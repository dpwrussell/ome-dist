// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Fileset.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Fileset_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Fileset_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class FilesetEntry;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilesetEntry>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilesetEntry*);

class Image;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Image>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Image*);

class FilesetJobLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilesetJobLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilesetJobLink*);

class Job;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Job>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Job*);

class FilesetAnnotationLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilesetAnnotationLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilesetAnnotationLink*);

class Annotation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class Fileset;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Fileset>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Fileset*);

}

}

}

namespace omero
{

namespace model
{

class FilesetEntry;
bool operator==(const FilesetEntry&, const FilesetEntry&);
bool operator<(const FilesetEntry&, const FilesetEntry&);
::Ice::Object* upCast(::omero::model::FilesetEntry*);
typedef ::IceInternal::Handle< ::omero::model::FilesetEntry> FilesetEntryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilesetEntry> FilesetEntryPrx;
void __patch(FilesetEntryPtr&, const ::Ice::ObjectPtr&);

class Image;
bool operator==(const Image&, const Image&);
bool operator<(const Image&, const Image&);
::Ice::Object* upCast(::omero::model::Image*);
typedef ::IceInternal::Handle< ::omero::model::Image> ImagePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Image> ImagePrx;
void __patch(ImagePtr&, const ::Ice::ObjectPtr&);

class FilesetJobLink;
bool operator==(const FilesetJobLink&, const FilesetJobLink&);
bool operator<(const FilesetJobLink&, const FilesetJobLink&);
::Ice::Object* upCast(::omero::model::FilesetJobLink*);
typedef ::IceInternal::Handle< ::omero::model::FilesetJobLink> FilesetJobLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilesetJobLink> FilesetJobLinkPrx;
void __patch(FilesetJobLinkPtr&, const ::Ice::ObjectPtr&);

class Job;
bool operator==(const Job&, const Job&);
bool operator<(const Job&, const Job&);
::Ice::Object* upCast(::omero::model::Job*);
typedef ::IceInternal::Handle< ::omero::model::Job> JobPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Job> JobPrx;
void __patch(JobPtr&, const ::Ice::ObjectPtr&);

class FilesetAnnotationLink;
bool operator==(const FilesetAnnotationLink&, const FilesetAnnotationLink&);
bool operator<(const FilesetAnnotationLink&, const FilesetAnnotationLink&);
::Ice::Object* upCast(::omero::model::FilesetAnnotationLink*);
typedef ::IceInternal::Handle< ::omero::model::FilesetAnnotationLink> FilesetAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilesetAnnotationLink> FilesetAnnotationLinkPrx;
void __patch(FilesetAnnotationLinkPtr&, const ::Ice::ObjectPtr&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);
::Ice::Object* upCast(::omero::model::Annotation*);
typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;
void __patch(AnnotationPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class Fileset;
bool operator==(const Fileset&, const Fileset&);
bool operator<(const Fileset&, const Fileset&);
::Ice::Object* upCast(::omero::model::Fileset*);
typedef ::IceInternal::Handle< ::omero::model::Fileset> FilesetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Fileset> FilesetPrx;
void __patch(FilesetPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::FilesetEntryPtr> FilesetUsedFilesSeq;

typedef ::std::vector< ::omero::model::ImagePtr> FilesetImagesSeq;

typedef ::std::vector< ::omero::model::FilesetJobLinkPtr> FilesetJobLinksSeq;

typedef ::std::vector< ::omero::model::JobPtr> FilesetLinkedJobSeq;

typedef ::std::vector< ::omero::model::FilesetAnnotationLinkPtr> FilesetAnnotationLinksSeq;

typedef ::std::vector< ::omero::model::AnnotationPtr> FilesetLinkedAnnotationSeq;

}

}

namespace omero
{

namespace model
{

class Callback_Fileset_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_getVersion_Base> Callback_Fileset_getVersionPtr;

class Callback_Fileset_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_setVersion_Base> Callback_Fileset_setVersionPtr;

class Callback_Fileset_unloadUsedFiles_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_unloadUsedFiles_Base> Callback_Fileset_unloadUsedFilesPtr;

class Callback_Fileset_sizeOfUsedFiles_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_sizeOfUsedFiles_Base> Callback_Fileset_sizeOfUsedFilesPtr;

class Callback_Fileset_copyUsedFiles_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_copyUsedFiles_Base> Callback_Fileset_copyUsedFilesPtr;

class Callback_Fileset_addFilesetEntry_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_addFilesetEntry_Base> Callback_Fileset_addFilesetEntryPtr;

class Callback_Fileset_addAllFilesetEntrySet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_addAllFilesetEntrySet_Base> Callback_Fileset_addAllFilesetEntrySetPtr;

class Callback_Fileset_removeFilesetEntry_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_removeFilesetEntry_Base> Callback_Fileset_removeFilesetEntryPtr;

class Callback_Fileset_removeAllFilesetEntrySet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_removeAllFilesetEntrySet_Base> Callback_Fileset_removeAllFilesetEntrySetPtr;

class Callback_Fileset_clearUsedFiles_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_clearUsedFiles_Base> Callback_Fileset_clearUsedFilesPtr;

class Callback_Fileset_reloadUsedFiles_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_reloadUsedFiles_Base> Callback_Fileset_reloadUsedFilesPtr;

class Callback_Fileset_getFilesetEntry_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_getFilesetEntry_Base> Callback_Fileset_getFilesetEntryPtr;

class Callback_Fileset_setFilesetEntry_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_setFilesetEntry_Base> Callback_Fileset_setFilesetEntryPtr;

class Callback_Fileset_getPrimaryFilesetEntry_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_getPrimaryFilesetEntry_Base> Callback_Fileset_getPrimaryFilesetEntryPtr;

class Callback_Fileset_setPrimaryFilesetEntry_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_setPrimaryFilesetEntry_Base> Callback_Fileset_setPrimaryFilesetEntryPtr;

class Callback_Fileset_unloadImages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_unloadImages_Base> Callback_Fileset_unloadImagesPtr;

class Callback_Fileset_sizeOfImages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_sizeOfImages_Base> Callback_Fileset_sizeOfImagesPtr;

class Callback_Fileset_copyImages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_copyImages_Base> Callback_Fileset_copyImagesPtr;

class Callback_Fileset_addImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_addImage_Base> Callback_Fileset_addImagePtr;

class Callback_Fileset_addAllImageSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_addAllImageSet_Base> Callback_Fileset_addAllImageSetPtr;

class Callback_Fileset_removeImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_removeImage_Base> Callback_Fileset_removeImagePtr;

class Callback_Fileset_removeAllImageSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_removeAllImageSet_Base> Callback_Fileset_removeAllImageSetPtr;

class Callback_Fileset_clearImages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_clearImages_Base> Callback_Fileset_clearImagesPtr;

class Callback_Fileset_reloadImages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_reloadImages_Base> Callback_Fileset_reloadImagesPtr;

class Callback_Fileset_unloadJobLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_unloadJobLinks_Base> Callback_Fileset_unloadJobLinksPtr;

class Callback_Fileset_sizeOfJobLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_sizeOfJobLinks_Base> Callback_Fileset_sizeOfJobLinksPtr;

class Callback_Fileset_copyJobLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_copyJobLinks_Base> Callback_Fileset_copyJobLinksPtr;

class Callback_Fileset_addFilesetJobLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_addFilesetJobLink_Base> Callback_Fileset_addFilesetJobLinkPtr;

class Callback_Fileset_addAllFilesetJobLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_addAllFilesetJobLinkSet_Base> Callback_Fileset_addAllFilesetJobLinkSetPtr;

class Callback_Fileset_removeFilesetJobLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_removeFilesetJobLink_Base> Callback_Fileset_removeFilesetJobLinkPtr;

class Callback_Fileset_removeAllFilesetJobLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_removeAllFilesetJobLinkSet_Base> Callback_Fileset_removeAllFilesetJobLinkSetPtr;

class Callback_Fileset_clearJobLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_clearJobLinks_Base> Callback_Fileset_clearJobLinksPtr;

class Callback_Fileset_reloadJobLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_reloadJobLinks_Base> Callback_Fileset_reloadJobLinksPtr;

class Callback_Fileset_getFilesetJobLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_getFilesetJobLink_Base> Callback_Fileset_getFilesetJobLinkPtr;

class Callback_Fileset_setFilesetJobLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_setFilesetJobLink_Base> Callback_Fileset_setFilesetJobLinkPtr;

class Callback_Fileset_getPrimaryFilesetJobLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_getPrimaryFilesetJobLink_Base> Callback_Fileset_getPrimaryFilesetJobLinkPtr;

class Callback_Fileset_setPrimaryFilesetJobLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_setPrimaryFilesetJobLink_Base> Callback_Fileset_setPrimaryFilesetJobLinkPtr;

class Callback_Fileset_getJobLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_getJobLinksCountPerOwner_Base> Callback_Fileset_getJobLinksCountPerOwnerPtr;

class Callback_Fileset_linkJob_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_linkJob_Base> Callback_Fileset_linkJobPtr;

class Callback_Fileset_addFilesetJobLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_addFilesetJobLinkToBoth_Base> Callback_Fileset_addFilesetJobLinkToBothPtr;

class Callback_Fileset_findFilesetJobLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_findFilesetJobLink_Base> Callback_Fileset_findFilesetJobLinkPtr;

class Callback_Fileset_unlinkJob_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_unlinkJob_Base> Callback_Fileset_unlinkJobPtr;

class Callback_Fileset_removeFilesetJobLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_removeFilesetJobLinkFromBoth_Base> Callback_Fileset_removeFilesetJobLinkFromBothPtr;

class Callback_Fileset_linkedJobList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_linkedJobList_Base> Callback_Fileset_linkedJobListPtr;

class Callback_Fileset_getTemplatePrefix_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_getTemplatePrefix_Base> Callback_Fileset_getTemplatePrefixPtr;

class Callback_Fileset_setTemplatePrefix_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_setTemplatePrefix_Base> Callback_Fileset_setTemplatePrefixPtr;

class Callback_Fileset_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_unloadAnnotationLinks_Base> Callback_Fileset_unloadAnnotationLinksPtr;

class Callback_Fileset_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_sizeOfAnnotationLinks_Base> Callback_Fileset_sizeOfAnnotationLinksPtr;

class Callback_Fileset_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_copyAnnotationLinks_Base> Callback_Fileset_copyAnnotationLinksPtr;

class Callback_Fileset_addFilesetAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_addFilesetAnnotationLink_Base> Callback_Fileset_addFilesetAnnotationLinkPtr;

class Callback_Fileset_addAllFilesetAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_addAllFilesetAnnotationLinkSet_Base> Callback_Fileset_addAllFilesetAnnotationLinkSetPtr;

class Callback_Fileset_removeFilesetAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_removeFilesetAnnotationLink_Base> Callback_Fileset_removeFilesetAnnotationLinkPtr;

class Callback_Fileset_removeAllFilesetAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_removeAllFilesetAnnotationLinkSet_Base> Callback_Fileset_removeAllFilesetAnnotationLinkSetPtr;

class Callback_Fileset_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_clearAnnotationLinks_Base> Callback_Fileset_clearAnnotationLinksPtr;

class Callback_Fileset_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_reloadAnnotationLinks_Base> Callback_Fileset_reloadAnnotationLinksPtr;

class Callback_Fileset_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_getAnnotationLinksCountPerOwner_Base> Callback_Fileset_getAnnotationLinksCountPerOwnerPtr;

class Callback_Fileset_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_linkAnnotation_Base> Callback_Fileset_linkAnnotationPtr;

class Callback_Fileset_addFilesetAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_addFilesetAnnotationLinkToBoth_Base> Callback_Fileset_addFilesetAnnotationLinkToBothPtr;

class Callback_Fileset_findFilesetAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_findFilesetAnnotationLink_Base> Callback_Fileset_findFilesetAnnotationLinkPtr;

class Callback_Fileset_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_unlinkAnnotation_Base> Callback_Fileset_unlinkAnnotationPtr;

class Callback_Fileset_removeFilesetAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_removeFilesetAnnotationLinkFromBoth_Base> Callback_Fileset_removeFilesetAnnotationLinkFromBothPtr;

class Callback_Fileset_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Fileset_linkedAnnotationList_Base> Callback_Fileset_linkedAnnotationListPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Fileset : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Fileset_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Fileset_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadUsedFiles()
    {
        unloadUsedFiles(0);
    }
    void unloadUsedFiles(const ::Ice::Context& __ctx)
    {
        unloadUsedFiles(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadUsedFiles(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadUsedFiles(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadUsedFiles(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadUsedFiles(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadUsedFiles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadUsedFiles(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadUsedFiles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadUsedFiles(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadUsedFiles()
    {
        return begin_unloadUsedFiles(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadUsedFiles(const ::Ice::Context& __ctx)
    {
        return begin_unloadUsedFiles(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadUsedFiles(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadUsedFiles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadUsedFiles(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadUsedFiles(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadUsedFiles(const ::omero::model::Callback_Fileset_unloadUsedFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadUsedFiles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadUsedFiles(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_unloadUsedFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadUsedFiles(&__ctx, __del, __cookie);
    }

    void end_unloadUsedFiles(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadUsedFiles(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadUsedFiles(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfUsedFiles()
    {
        return sizeOfUsedFiles(0);
    }
    ::Ice::Int sizeOfUsedFiles(const ::Ice::Context& __ctx)
    {
        return sizeOfUsedFiles(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfUsedFiles(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfUsedFiles(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfUsedFiles(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfUsedFiles(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfUsedFiles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfUsedFiles(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfUsedFiles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfUsedFiles(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfUsedFiles(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfUsedFiles(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfUsedFiles(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfUsedFiles()
    {
        return begin_sizeOfUsedFiles(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfUsedFiles(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfUsedFiles(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfUsedFiles(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfUsedFiles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfUsedFiles(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfUsedFiles(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfUsedFiles(const ::omero::model::Callback_Fileset_sizeOfUsedFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfUsedFiles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfUsedFiles(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_sizeOfUsedFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfUsedFiles(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfUsedFiles(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfUsedFiles(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfUsedFiles(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetUsedFilesSeq copyUsedFiles()
    {
        return copyUsedFiles(0);
    }
    ::omero::model::FilesetUsedFilesSeq copyUsedFiles(const ::Ice::Context& __ctx)
    {
        return copyUsedFiles(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyUsedFiles(const ::IceInternal::Function<void (const ::omero::model::FilesetUsedFilesSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyUsedFiles(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyUsedFiles(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyUsedFiles(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyUsedFiles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetUsedFilesSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyUsedFiles(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyUsedFiles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyUsedFiles(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyUsedFiles(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetUsedFilesSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetUsedFilesSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetUsedFilesSeq __ret;
                try
                {
                    __ret = __proxy->end_copyUsedFiles(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetUsedFilesSeq&)> _response;
        };
        return begin_copyUsedFiles(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyUsedFiles()
    {
        return begin_copyUsedFiles(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyUsedFiles(const ::Ice::Context& __ctx)
    {
        return begin_copyUsedFiles(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyUsedFiles(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyUsedFiles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyUsedFiles(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyUsedFiles(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyUsedFiles(const ::omero::model::Callback_Fileset_copyUsedFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyUsedFiles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyUsedFiles(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_copyUsedFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyUsedFiles(&__ctx, __del, __cookie);
    }

    ::omero::model::FilesetUsedFilesSeq end_copyUsedFiles(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetUsedFilesSeq copyUsedFiles(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyUsedFiles(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilesetEntry(const ::omero::model::FilesetEntryPtr& target)
    {
        addFilesetEntry(target, 0);
    }
    void addFilesetEntry(const ::omero::model::FilesetEntryPtr& target, const ::Ice::Context& __ctx)
    {
        addFilesetEntry(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addFilesetEntry(const ::omero::model::FilesetEntryPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilesetEntry(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetEntry(const ::omero::model::FilesetEntryPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilesetEntry(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetEntry(const ::omero::model::FilesetEntryPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilesetEntry(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetEntry(const ::omero::model::FilesetEntryPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilesetEntry(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addFilesetEntry(const ::omero::model::FilesetEntryPtr& target)
    {
        return begin_addFilesetEntry(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilesetEntry(const ::omero::model::FilesetEntryPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addFilesetEntry(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilesetEntry(const ::omero::model::FilesetEntryPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetEntry(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetEntry(const ::omero::model::FilesetEntryPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetEntry(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetEntry(const ::omero::model::FilesetEntryPtr& target, const ::omero::model::Callback_Fileset_addFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetEntry(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetEntry(const ::omero::model::FilesetEntryPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_addFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetEntry(target, &__ctx, __del, __cookie);
    }

    void end_addFilesetEntry(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets)
    {
        addAllFilesetEntrySet(targets, 0);
    }
    void addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllFilesetEntrySet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllFilesetEntrySet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllFilesetEntrySet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllFilesetEntrySet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllFilesetEntrySet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets)
    {
        return begin_addAllFilesetEntrySet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllFilesetEntrySet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetEntrySet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetEntrySet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::omero::model::Callback_Fileset_addAllFilesetEntrySetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetEntrySet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_addAllFilesetEntrySetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetEntrySet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllFilesetEntrySet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget)
    {
        removeFilesetEntry(theTarget, 0);
    }
    void removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeFilesetEntry(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilesetEntry(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilesetEntry(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilesetEntry(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilesetEntry(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget)
    {
        return begin_removeFilesetEntry(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeFilesetEntry(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetEntry(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetEntry(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget, const ::omero::model::Callback_Fileset_removeFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetEntry(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetEntry(const ::omero::model::FilesetEntryPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_removeFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetEntry(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeFilesetEntry(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets)
    {
        removeAllFilesetEntrySet(targets, 0);
    }
    void removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllFilesetEntrySet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllFilesetEntrySet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllFilesetEntrySet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllFilesetEntrySet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllFilesetEntrySet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets)
    {
        return begin_removeAllFilesetEntrySet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllFilesetEntrySet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetEntrySet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetEntrySet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::omero::model::Callback_Fileset_removeAllFilesetEntrySetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetEntrySet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_removeAllFilesetEntrySetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetEntrySet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllFilesetEntrySet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearUsedFiles()
    {
        clearUsedFiles(0);
    }
    void clearUsedFiles(const ::Ice::Context& __ctx)
    {
        clearUsedFiles(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearUsedFiles(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearUsedFiles(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearUsedFiles(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearUsedFiles(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearUsedFiles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearUsedFiles(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearUsedFiles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearUsedFiles(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearUsedFiles()
    {
        return begin_clearUsedFiles(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearUsedFiles(const ::Ice::Context& __ctx)
    {
        return begin_clearUsedFiles(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearUsedFiles(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearUsedFiles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearUsedFiles(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearUsedFiles(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearUsedFiles(const ::omero::model::Callback_Fileset_clearUsedFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearUsedFiles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearUsedFiles(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_clearUsedFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearUsedFiles(&__ctx, __del, __cookie);
    }

    void end_clearUsedFiles(const ::Ice::AsyncResultPtr&);
    
private:

    void clearUsedFiles(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearUsedFiles(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy)
    {
        reloadUsedFiles(toCopy, 0);
    }
    void reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadUsedFiles(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadUsedFiles(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadUsedFiles(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadUsedFiles(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadUsedFiles(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy)
    {
        return begin_reloadUsedFiles(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadUsedFiles(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadUsedFiles(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadUsedFiles(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy, const ::omero::model::Callback_Fileset_reloadUsedFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadUsedFiles(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadUsedFiles(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_reloadUsedFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadUsedFiles(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadUsedFiles(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadUsedFiles(const ::omero::model::FilesetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadUsedFiles(const ::omero::model::FilesetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetEntryPtr getFilesetEntry(::Ice::Int index)
    {
        return getFilesetEntry(index, 0);
    }
    ::omero::model::FilesetEntryPtr getFilesetEntry(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return getFilesetEntry(index, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFilesetEntry(::Ice::Int index, const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFilesetEntry(index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFilesetEntry(::Ice::Int index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFilesetEntry(index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFilesetEntry(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFilesetEntry(index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFilesetEntry(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFilesetEntry(index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFilesetEntry(::Ice::Int index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetEntryPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetEntryPtr __ret;
                try
                {
                    __ret = __proxy->end_getFilesetEntry(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetEntryPtr&)> _response;
        };
        return begin_getFilesetEntry(index, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFilesetEntry(::Ice::Int index)
    {
        return begin_getFilesetEntry(index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFilesetEntry(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return begin_getFilesetEntry(index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFilesetEntry(::Ice::Int index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilesetEntry(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilesetEntry(::Ice::Int index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilesetEntry(index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilesetEntry(::Ice::Int index, const ::omero::model::Callback_Fileset_getFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilesetEntry(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilesetEntry(::Ice::Int index, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_getFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilesetEntry(index, &__ctx, __del, __cookie);
    }

    ::omero::model::FilesetEntryPtr end_getFilesetEntry(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetEntryPtr getFilesetEntry(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFilesetEntry(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetEntryPtr setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement)
    {
        return setFilesetEntry(index, theElement, 0);
    }
    ::omero::model::FilesetEntryPtr setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx)
    {
        return setFilesetEntry(index, theElement, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement, const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setFilesetEntry(index, theElement, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFilesetEntry(index, theElement, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setFilesetEntry(index, theElement, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFilesetEntry(index, theElement, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetEntryPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetEntryPtr __ret;
                try
                {
                    __ret = __proxy->end_setFilesetEntry(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetEntryPtr&)> _response;
        };
        return begin_setFilesetEntry(index, theElement, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement)
    {
        return begin_setFilesetEntry(index, theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setFilesetEntry(index, theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilesetEntry(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilesetEntry(index, theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement, const ::omero::model::Callback_Fileset_setFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilesetEntry(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilesetEntry(::Ice::Int index, const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_setFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilesetEntry(index, theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::FilesetEntryPtr end_setFilesetEntry(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetEntryPtr setFilesetEntry(::Ice::Int, const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setFilesetEntry(::Ice::Int, const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetEntryPtr getPrimaryFilesetEntry()
    {
        return getPrimaryFilesetEntry(0);
    }
    ::omero::model::FilesetEntryPtr getPrimaryFilesetEntry(const ::Ice::Context& __ctx)
    {
        return getPrimaryFilesetEntry(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPrimaryFilesetEntry(const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPrimaryFilesetEntry(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryFilesetEntry(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPrimaryFilesetEntry(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryFilesetEntry(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPrimaryFilesetEntry(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryFilesetEntry(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPrimaryFilesetEntry(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPrimaryFilesetEntry(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetEntryPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetEntryPtr __ret;
                try
                {
                    __ret = __proxy->end_getPrimaryFilesetEntry(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetEntryPtr&)> _response;
        };
        return begin_getPrimaryFilesetEntry(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetEntry()
    {
        return begin_getPrimaryFilesetEntry(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetEntry(const ::Ice::Context& __ctx)
    {
        return begin_getPrimaryFilesetEntry(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetEntry(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryFilesetEntry(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetEntry(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryFilesetEntry(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetEntry(const ::omero::model::Callback_Fileset_getPrimaryFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryFilesetEntry(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetEntry(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_getPrimaryFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryFilesetEntry(&__ctx, __del, __cookie);
    }

    ::omero::model::FilesetEntryPtr end_getPrimaryFilesetEntry(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetEntryPtr getPrimaryFilesetEntry(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPrimaryFilesetEntry(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetEntryPtr setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement)
    {
        return setPrimaryFilesetEntry(theElement, 0);
    }
    ::omero::model::FilesetEntryPtr setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx)
    {
        return setPrimaryFilesetEntry(theElement, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement, const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPrimaryFilesetEntry(theElement, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPrimaryFilesetEntry(theElement, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPrimaryFilesetEntry(theElement, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPrimaryFilesetEntry(theElement, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetEntryPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetEntryPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetEntryPtr __ret;
                try
                {
                    __ret = __proxy->end_setPrimaryFilesetEntry(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetEntryPtr&)> _response;
        };
        return begin_setPrimaryFilesetEntry(theElement, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement)
    {
        return begin_setPrimaryFilesetEntry(theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setPrimaryFilesetEntry(theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryFilesetEntry(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryFilesetEntry(theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement, const ::omero::model::Callback_Fileset_setPrimaryFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryFilesetEntry(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_setPrimaryFilesetEntryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryFilesetEntry(theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::FilesetEntryPtr end_setPrimaryFilesetEntry(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetEntryPtr setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadImages()
    {
        unloadImages(0);
    }
    void unloadImages(const ::Ice::Context& __ctx)
    {
        unloadImages(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadImages(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadImages(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadImages(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadImages(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadImages(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadImages(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadImages(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadImages(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadImages()
    {
        return begin_unloadImages(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadImages(const ::Ice::Context& __ctx)
    {
        return begin_unloadImages(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadImages(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadImages(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadImages(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadImages(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadImages(const ::omero::model::Callback_Fileset_unloadImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadImages(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadImages(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_unloadImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadImages(&__ctx, __del, __cookie);
    }

    void end_unloadImages(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadImages(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadImages(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfImages()
    {
        return sizeOfImages(0);
    }
    ::Ice::Int sizeOfImages(const ::Ice::Context& __ctx)
    {
        return sizeOfImages(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfImages(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfImages(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfImages(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfImages(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfImages(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfImages(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfImages(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfImages(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfImages(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfImages(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfImages(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfImages()
    {
        return begin_sizeOfImages(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfImages(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfImages(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfImages(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfImages(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfImages(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfImages(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfImages(const ::omero::model::Callback_Fileset_sizeOfImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfImages(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfImages(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_sizeOfImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfImages(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfImages(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfImages(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfImages(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetImagesSeq copyImages()
    {
        return copyImages(0);
    }
    ::omero::model::FilesetImagesSeq copyImages(const ::Ice::Context& __ctx)
    {
        return copyImages(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyImages(const ::IceInternal::Function<void (const ::omero::model::FilesetImagesSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyImages(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyImages(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyImages(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyImages(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetImagesSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyImages(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyImages(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyImages(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyImages(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetImagesSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetImagesSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetImagesSeq __ret;
                try
                {
                    __ret = __proxy->end_copyImages(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetImagesSeq&)> _response;
        };
        return begin_copyImages(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyImages()
    {
        return begin_copyImages(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyImages(const ::Ice::Context& __ctx)
    {
        return begin_copyImages(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyImages(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyImages(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyImages(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyImages(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyImages(const ::omero::model::Callback_Fileset_copyImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyImages(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyImages(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_copyImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyImages(&__ctx, __del, __cookie);
    }

    ::omero::model::FilesetImagesSeq end_copyImages(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetImagesSeq copyImages(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyImages(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addImage(const ::omero::model::ImagePtr& target)
    {
        addImage(target, 0);
    }
    void addImage(const ::omero::model::ImagePtr& target, const ::Ice::Context& __ctx)
    {
        addImage(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addImage(const ::omero::model::ImagePtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addImage(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addImage(const ::omero::model::ImagePtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addImage(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addImage(const ::omero::model::ImagePtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addImage(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addImage(const ::omero::model::ImagePtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addImage(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addImage(const ::omero::model::ImagePtr& target)
    {
        return begin_addImage(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addImage(const ::omero::model::ImagePtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addImage(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addImage(const ::omero::model::ImagePtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImage(const ::omero::model::ImagePtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImage(const ::omero::model::ImagePtr& target, const ::omero::model::Callback_Fileset_addImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImage(const ::omero::model::ImagePtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_addImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(target, &__ctx, __del, __cookie);
    }

    void end_addImage(const ::Ice::AsyncResultPtr&);
    
private:

    void addImage(const ::omero::model::ImagePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addImage(const ::omero::model::ImagePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllImageSet(const ::omero::model::FilesetImagesSeq& targets)
    {
        addAllImageSet(targets, 0);
    }
    void addAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllImageSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllImageSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllImageSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllImageSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllImageSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllImageSet(const ::omero::model::FilesetImagesSeq& targets)
    {
        return begin_addAllImageSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllImageSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllImageSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllImageSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::omero::model::Callback_Fileset_addAllImageSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllImageSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_addAllImageSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllImageSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllImageSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeImage(const ::omero::model::ImagePtr& theTarget)
    {
        removeImage(theTarget, 0);
    }
    void removeImage(const ::omero::model::ImagePtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeImage(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeImage(const ::omero::model::ImagePtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeImage(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeImage(const ::omero::model::ImagePtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeImage(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeImage(const ::omero::model::ImagePtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeImage(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeImage(const ::omero::model::ImagePtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeImage(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeImage(const ::omero::model::ImagePtr& theTarget)
    {
        return begin_removeImage(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeImage(const ::omero::model::ImagePtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeImage(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeImage(const ::omero::model::ImagePtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImage(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeImage(const ::omero::model::ImagePtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImage(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeImage(const ::omero::model::ImagePtr& theTarget, const ::omero::model::Callback_Fileset_removeImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImage(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeImage(const ::omero::model::ImagePtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_removeImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImage(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeImage(const ::Ice::AsyncResultPtr&);
    
private:

    void removeImage(const ::omero::model::ImagePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeImage(const ::omero::model::ImagePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets)
    {
        removeAllImageSet(targets, 0);
    }
    void removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllImageSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllImageSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllImageSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllImageSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllImageSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets)
    {
        return begin_removeAllImageSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllImageSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllImageSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllImageSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::omero::model::Callback_Fileset_removeAllImageSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllImageSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllImageSet(const ::omero::model::FilesetImagesSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_removeAllImageSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllImageSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllImageSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearImages()
    {
        clearImages(0);
    }
    void clearImages(const ::Ice::Context& __ctx)
    {
        clearImages(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearImages(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearImages(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearImages(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearImages(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearImages(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearImages(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearImages(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearImages(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearImages()
    {
        return begin_clearImages(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearImages(const ::Ice::Context& __ctx)
    {
        return begin_clearImages(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearImages(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearImages(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearImages(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearImages(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearImages(const ::omero::model::Callback_Fileset_clearImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearImages(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearImages(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_clearImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearImages(&__ctx, __del, __cookie);
    }

    void end_clearImages(const ::Ice::AsyncResultPtr&);
    
private:

    void clearImages(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearImages(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadImages(const ::omero::model::FilesetPtr& toCopy)
    {
        reloadImages(toCopy, 0);
    }
    void reloadImages(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadImages(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadImages(const ::omero::model::FilesetPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadImages(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadImages(const ::omero::model::FilesetPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadImages(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadImages(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadImages(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadImages(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadImages(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadImages(const ::omero::model::FilesetPtr& toCopy)
    {
        return begin_reloadImages(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadImages(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadImages(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadImages(const ::omero::model::FilesetPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadImages(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadImages(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadImages(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadImages(const ::omero::model::FilesetPtr& toCopy, const ::omero::model::Callback_Fileset_reloadImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadImages(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadImages(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_reloadImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadImages(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadImages(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadImages(const ::omero::model::FilesetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadImages(const ::omero::model::FilesetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadJobLinks()
    {
        unloadJobLinks(0);
    }
    void unloadJobLinks(const ::Ice::Context& __ctx)
    {
        unloadJobLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadJobLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadJobLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadJobLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadJobLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadJobLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadJobLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadJobLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadJobLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadJobLinks()
    {
        return begin_unloadJobLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadJobLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadJobLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadJobLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadJobLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadJobLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadJobLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadJobLinks(const ::omero::model::Callback_Fileset_unloadJobLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadJobLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadJobLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_unloadJobLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadJobLinks(&__ctx, __del, __cookie);
    }

    void end_unloadJobLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadJobLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadJobLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfJobLinks()
    {
        return sizeOfJobLinks(0);
    }
    ::Ice::Int sizeOfJobLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfJobLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfJobLinks(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfJobLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfJobLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfJobLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfJobLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfJobLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfJobLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfJobLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfJobLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfJobLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfJobLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfJobLinks()
    {
        return begin_sizeOfJobLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfJobLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfJobLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfJobLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfJobLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfJobLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfJobLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfJobLinks(const ::omero::model::Callback_Fileset_sizeOfJobLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfJobLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfJobLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_sizeOfJobLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfJobLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfJobLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfJobLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfJobLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetJobLinksSeq copyJobLinks()
    {
        return copyJobLinks(0);
    }
    ::omero::model::FilesetJobLinksSeq copyJobLinks(const ::Ice::Context& __ctx)
    {
        return copyJobLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyJobLinks(const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyJobLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyJobLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyJobLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyJobLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyJobLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyJobLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyJobLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyJobLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetJobLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetJobLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_copyJobLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetJobLinksSeq&)> _response;
        };
        return begin_copyJobLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyJobLinks()
    {
        return begin_copyJobLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyJobLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyJobLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyJobLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyJobLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyJobLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyJobLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyJobLinks(const ::omero::model::Callback_Fileset_copyJobLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyJobLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyJobLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_copyJobLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyJobLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::FilesetJobLinksSeq end_copyJobLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetJobLinksSeq copyJobLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyJobLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target)
    {
        addFilesetJobLink(target, 0);
    }
    void addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addFilesetJobLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilesetJobLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilesetJobLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilesetJobLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilesetJobLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target)
    {
        return begin_addFilesetJobLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addFilesetJobLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetJobLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetJobLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target, const ::omero::model::Callback_Fileset_addFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetJobLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_addFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetJobLink(target, &__ctx, __del, __cookie);
    }

    void end_addFilesetJobLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets)
    {
        addAllFilesetJobLinkSet(targets, 0);
    }
    void addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllFilesetJobLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllFilesetJobLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllFilesetJobLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllFilesetJobLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllFilesetJobLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets)
    {
        return begin_addAllFilesetJobLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllFilesetJobLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetJobLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetJobLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::omero::model::Callback_Fileset_addAllFilesetJobLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetJobLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_addAllFilesetJobLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetJobLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllFilesetJobLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget)
    {
        removeFilesetJobLink(theTarget, 0);
    }
    void removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeFilesetJobLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilesetJobLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilesetJobLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilesetJobLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilesetJobLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget)
    {
        return begin_removeFilesetJobLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeFilesetJobLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetJobLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetJobLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget, const ::omero::model::Callback_Fileset_removeFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetJobLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_removeFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetJobLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeFilesetJobLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets)
    {
        removeAllFilesetJobLinkSet(targets, 0);
    }
    void removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllFilesetJobLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllFilesetJobLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllFilesetJobLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllFilesetJobLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllFilesetJobLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets)
    {
        return begin_removeAllFilesetJobLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllFilesetJobLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetJobLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetJobLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::omero::model::Callback_Fileset_removeAllFilesetJobLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetJobLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_removeAllFilesetJobLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetJobLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllFilesetJobLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearJobLinks()
    {
        clearJobLinks(0);
    }
    void clearJobLinks(const ::Ice::Context& __ctx)
    {
        clearJobLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearJobLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearJobLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearJobLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearJobLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearJobLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearJobLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearJobLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearJobLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearJobLinks()
    {
        return begin_clearJobLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearJobLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearJobLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearJobLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearJobLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearJobLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearJobLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearJobLinks(const ::omero::model::Callback_Fileset_clearJobLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearJobLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearJobLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_clearJobLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearJobLinks(&__ctx, __del, __cookie);
    }

    void end_clearJobLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearJobLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearJobLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadJobLinks(const ::omero::model::FilesetPtr& toCopy)
    {
        reloadJobLinks(toCopy, 0);
    }
    void reloadJobLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadJobLinks(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadJobLinks(const ::omero::model::FilesetPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadJobLinks(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadJobLinks(const ::omero::model::FilesetPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadJobLinks(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadJobLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadJobLinks(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadJobLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadJobLinks(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadJobLinks(const ::omero::model::FilesetPtr& toCopy)
    {
        return begin_reloadJobLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadJobLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadJobLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadJobLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadJobLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadJobLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadJobLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadJobLinks(const ::omero::model::FilesetPtr& toCopy, const ::omero::model::Callback_Fileset_reloadJobLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadJobLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadJobLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_reloadJobLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadJobLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadJobLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadJobLinks(const ::omero::model::FilesetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadJobLinks(const ::omero::model::FilesetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetJobLinkPtr getFilesetJobLink(::Ice::Int index)
    {
        return getFilesetJobLink(index, 0);
    }
    ::omero::model::FilesetJobLinkPtr getFilesetJobLink(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return getFilesetJobLink(index, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFilesetJobLink(::Ice::Int index, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFilesetJobLink(index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFilesetJobLink(::Ice::Int index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFilesetJobLink(index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFilesetJobLink(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFilesetJobLink(index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFilesetJobLink(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFilesetJobLink(index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFilesetJobLink(::Ice::Int index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetJobLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetJobLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_getFilesetJobLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetJobLinkPtr&)> _response;
        };
        return begin_getFilesetJobLink(index, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFilesetJobLink(::Ice::Int index)
    {
        return begin_getFilesetJobLink(index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFilesetJobLink(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return begin_getFilesetJobLink(index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFilesetJobLink(::Ice::Int index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilesetJobLink(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilesetJobLink(::Ice::Int index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilesetJobLink(index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilesetJobLink(::Ice::Int index, const ::omero::model::Callback_Fileset_getFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilesetJobLink(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilesetJobLink(::Ice::Int index, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_getFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilesetJobLink(index, &__ctx, __del, __cookie);
    }

    ::omero::model::FilesetJobLinkPtr end_getFilesetJobLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetJobLinkPtr getFilesetJobLink(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFilesetJobLink(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetJobLinkPtr setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement)
    {
        return setFilesetJobLink(index, theElement, 0);
    }
    ::omero::model::FilesetJobLinkPtr setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx)
    {
        return setFilesetJobLink(index, theElement, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setFilesetJobLink(index, theElement, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFilesetJobLink(index, theElement, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setFilesetJobLink(index, theElement, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFilesetJobLink(index, theElement, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetJobLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetJobLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_setFilesetJobLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetJobLinkPtr&)> _response;
        };
        return begin_setFilesetJobLink(index, theElement, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement)
    {
        return begin_setFilesetJobLink(index, theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setFilesetJobLink(index, theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilesetJobLink(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilesetJobLink(index, theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement, const ::omero::model::Callback_Fileset_setFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilesetJobLink(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilesetJobLink(::Ice::Int index, const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_setFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilesetJobLink(index, theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::FilesetJobLinkPtr end_setFilesetJobLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetJobLinkPtr setFilesetJobLink(::Ice::Int, const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setFilesetJobLink(::Ice::Int, const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetJobLinkPtr getPrimaryFilesetJobLink()
    {
        return getPrimaryFilesetJobLink(0);
    }
    ::omero::model::FilesetJobLinkPtr getPrimaryFilesetJobLink(const ::Ice::Context& __ctx)
    {
        return getPrimaryFilesetJobLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPrimaryFilesetJobLink(const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPrimaryFilesetJobLink(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryFilesetJobLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPrimaryFilesetJobLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryFilesetJobLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPrimaryFilesetJobLink(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryFilesetJobLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPrimaryFilesetJobLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPrimaryFilesetJobLink(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetJobLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetJobLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_getPrimaryFilesetJobLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetJobLinkPtr&)> _response;
        };
        return begin_getPrimaryFilesetJobLink(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetJobLink()
    {
        return begin_getPrimaryFilesetJobLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetJobLink(const ::Ice::Context& __ctx)
    {
        return begin_getPrimaryFilesetJobLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetJobLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryFilesetJobLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetJobLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryFilesetJobLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetJobLink(const ::omero::model::Callback_Fileset_getPrimaryFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryFilesetJobLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryFilesetJobLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_getPrimaryFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryFilesetJobLink(&__ctx, __del, __cookie);
    }

    ::omero::model::FilesetJobLinkPtr end_getPrimaryFilesetJobLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetJobLinkPtr getPrimaryFilesetJobLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPrimaryFilesetJobLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetJobLinkPtr setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement)
    {
        return setPrimaryFilesetJobLink(theElement, 0);
    }
    ::omero::model::FilesetJobLinkPtr setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx)
    {
        return setPrimaryFilesetJobLink(theElement, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPrimaryFilesetJobLink(theElement, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPrimaryFilesetJobLink(theElement, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPrimaryFilesetJobLink(theElement, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPrimaryFilesetJobLink(theElement, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetJobLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetJobLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_setPrimaryFilesetJobLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetJobLinkPtr&)> _response;
        };
        return begin_setPrimaryFilesetJobLink(theElement, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement)
    {
        return begin_setPrimaryFilesetJobLink(theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setPrimaryFilesetJobLink(theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryFilesetJobLink(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryFilesetJobLink(theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement, const ::omero::model::Callback_Fileset_setPrimaryFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryFilesetJobLink(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_setPrimaryFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryFilesetJobLink(theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::FilesetJobLinkPtr end_setPrimaryFilesetJobLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetJobLinkPtr setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getJobLinksCountPerOwner()
    {
        return getJobLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getJobLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getJobLinksCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getJobLinksCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getJobLinksCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getJobLinksCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getJobLinksCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getJobLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getJobLinksCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getJobLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getJobLinksCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getJobLinksCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getJobLinksCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getJobLinksCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getJobLinksCountPerOwner()
    {
        return begin_getJobLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJobLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getJobLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJobLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJobLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJobLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJobLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJobLinksCountPerOwner(const ::omero::model::Callback_Fileset_getJobLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJobLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJobLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_getJobLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJobLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getJobLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getJobLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getJobLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetJobLinkPtr linkJob(const ::omero::model::JobPtr& addition)
    {
        return linkJob(addition, 0);
    }
    ::omero::model::FilesetJobLinkPtr linkJob(const ::omero::model::JobPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkJob(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkJob(const ::omero::model::JobPtr& addition, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkJob(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkJob(const ::omero::model::JobPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkJob(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkJob(const ::omero::model::JobPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkJob(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkJob(const ::omero::model::JobPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkJob(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkJob(const ::omero::model::JobPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetJobLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetJobLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkJob(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetJobLinkPtr&)> _response;
        };
        return begin_linkJob(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkJob(const ::omero::model::JobPtr& addition)
    {
        return begin_linkJob(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkJob(const ::omero::model::JobPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkJob(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkJob(const ::omero::model::JobPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkJob(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkJob(const ::omero::model::JobPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkJob(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkJob(const ::omero::model::JobPtr& addition, const ::omero::model::Callback_Fileset_linkJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkJob(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkJob(const ::omero::model::JobPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_linkJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkJob(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::FilesetJobLinkPtr end_linkJob(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetJobLinkPtr linkJob(const ::omero::model::JobPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkJob(const ::omero::model::JobPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides)
    {
        addFilesetJobLinkToBoth(link, bothSides, 0);
    }
    void addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addFilesetJobLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilesetJobLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilesetJobLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilesetJobLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilesetJobLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides)
    {
        return begin_addFilesetJobLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addFilesetJobLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetJobLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetJobLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::omero::model::Callback_Fileset_addFilesetJobLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetJobLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_addFilesetJobLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetJobLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addFilesetJobLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetJobLinksSeq findFilesetJobLink(const ::omero::model::JobPtr& removal)
    {
        return findFilesetJobLink(removal, 0);
    }
    ::omero::model::FilesetJobLinksSeq findFilesetJobLink(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx)
    {
        return findFilesetJobLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findFilesetJobLink(const ::omero::model::JobPtr& removal, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findFilesetJobLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findFilesetJobLink(const ::omero::model::JobPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findFilesetJobLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findFilesetJobLink(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findFilesetJobLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findFilesetJobLink(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findFilesetJobLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findFilesetJobLink(const ::omero::model::JobPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetJobLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetJobLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetJobLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_findFilesetJobLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetJobLinksSeq&)> _response;
        };
        return begin_findFilesetJobLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findFilesetJobLink(const ::omero::model::JobPtr& removal)
    {
        return begin_findFilesetJobLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilesetJobLink(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findFilesetJobLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilesetJobLink(const ::omero::model::JobPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilesetJobLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilesetJobLink(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilesetJobLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilesetJobLink(const ::omero::model::JobPtr& removal, const ::omero::model::Callback_Fileset_findFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilesetJobLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilesetJobLink(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_findFilesetJobLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilesetJobLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::FilesetJobLinksSeq end_findFilesetJobLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetJobLinksSeq findFilesetJobLink(const ::omero::model::JobPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findFilesetJobLink(const ::omero::model::JobPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkJob(const ::omero::model::JobPtr& removal)
    {
        unlinkJob(removal, 0);
    }
    void unlinkJob(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkJob(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkJob(const ::omero::model::JobPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkJob(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkJob(const ::omero::model::JobPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkJob(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkJob(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkJob(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkJob(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkJob(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkJob(const ::omero::model::JobPtr& removal)
    {
        return begin_unlinkJob(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkJob(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkJob(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkJob(const ::omero::model::JobPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkJob(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkJob(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkJob(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkJob(const ::omero::model::JobPtr& removal, const ::omero::model::Callback_Fileset_unlinkJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkJob(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkJob(const ::omero::model::JobPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_unlinkJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkJob(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkJob(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkJob(const ::omero::model::JobPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkJob(const ::omero::model::JobPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides)
    {
        removeFilesetJobLinkFromBoth(link, bothSides, 0);
    }
    void removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeFilesetJobLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilesetJobLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilesetJobLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilesetJobLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilesetJobLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides)
    {
        return begin_removeFilesetJobLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeFilesetJobLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetJobLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetJobLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::omero::model::Callback_Fileset_removeFilesetJobLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetJobLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_removeFilesetJobLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetJobLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeFilesetJobLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetLinkedJobSeq linkedJobList()
    {
        return linkedJobList(0);
    }
    ::omero::model::FilesetLinkedJobSeq linkedJobList(const ::Ice::Context& __ctx)
    {
        return linkedJobList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedJobList(const ::IceInternal::Function<void (const ::omero::model::FilesetLinkedJobSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedJobList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedJobList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedJobList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedJobList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetLinkedJobSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedJobList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedJobList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedJobList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedJobList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetLinkedJobSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetLinkedJobSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetLinkedJobSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedJobList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetLinkedJobSeq&)> _response;
        };
        return begin_linkedJobList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedJobList()
    {
        return begin_linkedJobList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedJobList(const ::Ice::Context& __ctx)
    {
        return begin_linkedJobList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedJobList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedJobList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedJobList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedJobList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedJobList(const ::omero::model::Callback_Fileset_linkedJobListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedJobList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedJobList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_linkedJobListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedJobList(&__ctx, __del, __cookie);
    }

    ::omero::model::FilesetLinkedJobSeq end_linkedJobList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetLinkedJobSeq linkedJobList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedJobList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getTemplatePrefix()
    {
        return getTemplatePrefix(0);
    }
    ::omero::RStringPtr getTemplatePrefix(const ::Ice::Context& __ctx)
    {
        return getTemplatePrefix(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTemplatePrefix(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTemplatePrefix(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTemplatePrefix(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTemplatePrefix(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTemplatePrefix(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTemplatePrefix(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTemplatePrefix(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTemplatePrefix(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTemplatePrefix(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getTemplatePrefix(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getTemplatePrefix(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTemplatePrefix()
    {
        return begin_getTemplatePrefix(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTemplatePrefix(const ::Ice::Context& __ctx)
    {
        return begin_getTemplatePrefix(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTemplatePrefix(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTemplatePrefix(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTemplatePrefix(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTemplatePrefix(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTemplatePrefix(const ::omero::model::Callback_Fileset_getTemplatePrefixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTemplatePrefix(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTemplatePrefix(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_getTemplatePrefixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTemplatePrefix(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getTemplatePrefix(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getTemplatePrefix(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTemplatePrefix(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix)
    {
        setTemplatePrefix(theTemplatePrefix, 0);
    }
    void setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix, const ::Ice::Context& __ctx)
    {
        setTemplatePrefix(theTemplatePrefix, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTemplatePrefix(theTemplatePrefix, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTemplatePrefix(theTemplatePrefix, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTemplatePrefix(theTemplatePrefix, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTemplatePrefix(theTemplatePrefix, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix)
    {
        return begin_setTemplatePrefix(theTemplatePrefix, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix, const ::Ice::Context& __ctx)
    {
        return begin_setTemplatePrefix(theTemplatePrefix, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTemplatePrefix(theTemplatePrefix, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTemplatePrefix(theTemplatePrefix, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix, const ::omero::model::Callback_Fileset_setTemplatePrefixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTemplatePrefix(theTemplatePrefix, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTemplatePrefix(const ::omero::RStringPtr& theTemplatePrefix, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_setTemplatePrefixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTemplatePrefix(theTemplatePrefix, &__ctx, __del, __cookie);
    }

    void end_setTemplatePrefix(const ::Ice::AsyncResultPtr&);
    
private:

    void setTemplatePrefix(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTemplatePrefix(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_Fileset_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_Fileset_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::FilesetAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::omero::model::FilesetAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_copyAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetAnnotationLinksSeq&)> _response;
        };
        return begin_copyAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_Fileset_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::FilesetAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target)
    {
        addFilesetAnnotationLink(target, 0);
    }
    void addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addFilesetAnnotationLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilesetAnnotationLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilesetAnnotationLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilesetAnnotationLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilesetAnnotationLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target)
    {
        return begin_addFilesetAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addFilesetAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target, const ::omero::model::Callback_Fileset_addFilesetAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_addFilesetAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addFilesetAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets)
    {
        addAllFilesetAnnotationLinkSet(targets, 0);
    }
    void addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllFilesetAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllFilesetAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllFilesetAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllFilesetAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllFilesetAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets)
    {
        return begin_addAllFilesetAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllFilesetAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::omero::model::Callback_Fileset_addAllFilesetAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_addAllFilesetAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilesetAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllFilesetAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget)
    {
        removeFilesetAnnotationLink(theTarget, 0);
    }
    void removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeFilesetAnnotationLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilesetAnnotationLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilesetAnnotationLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilesetAnnotationLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilesetAnnotationLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget)
    {
        return begin_removeFilesetAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeFilesetAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget, const ::omero::model::Callback_Fileset_removeFilesetAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_removeFilesetAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeFilesetAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets)
    {
        removeAllFilesetAnnotationLinkSet(targets, 0);
    }
    void removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllFilesetAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllFilesetAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllFilesetAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllFilesetAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllFilesetAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets)
    {
        return begin_removeAllFilesetAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllFilesetAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::omero::model::Callback_Fileset_removeAllFilesetAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_removeAllFilesetAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilesetAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllFilesetAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_Fileset_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy, const ::omero::model::Callback_Fileset_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::FilesetPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::FilesetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::FilesetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAnnotationLinksCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getAnnotationLinksCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_Fileset_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::FilesetAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::omero::model::FilesetAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetAnnotationLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetAnnotationLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkAnnotation(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetAnnotationLinkPtr&)> _response;
        };
        return begin_linkAnnotation(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_Fileset_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::FilesetAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides)
    {
        addFilesetAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addFilesetAnnotationLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilesetAnnotationLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilesetAnnotationLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilesetAnnotationLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilesetAnnotationLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addFilesetAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addFilesetAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Fileset_addFilesetAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_addFilesetAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilesetAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addFilesetAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetAnnotationLinksSeq findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findFilesetAnnotationLink(removal, 0);
    }
    ::omero::model::FilesetAnnotationLinksSeq findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findFilesetAnnotationLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::omero::model::FilesetAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findFilesetAnnotationLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findFilesetAnnotationLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findFilesetAnnotationLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findFilesetAnnotationLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_findFilesetAnnotationLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetAnnotationLinksSeq&)> _response;
        };
        return begin_findFilesetAnnotationLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findFilesetAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findFilesetAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilesetAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilesetAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Fileset_findFilesetAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilesetAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_findFilesetAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilesetAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::FilesetAnnotationLinksSeq end_findFilesetAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetAnnotationLinksSeq findFilesetAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findFilesetAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Fileset_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides)
    {
        removeFilesetAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeFilesetAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilesetAnnotationLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilesetAnnotationLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilesetAnnotationLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilesetAnnotationLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removeFilesetAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeFilesetAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Fileset_removeFilesetAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_removeFilesetAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilesetAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeFilesetAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::FilesetLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::omero::model::FilesetLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedAnnotationList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetLinkedAnnotationSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetLinkedAnnotationSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedAnnotationList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetLinkedAnnotationSeq&)> _response;
        };
        return begin_linkedAnnotationList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_Fileset_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Fileset_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::FilesetLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Fileset> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_secure(bool __secure) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_twoway() const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_oneway() const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_batchOneway() const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_datagram() const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_batchDatagram() const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_compress(bool __compress) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Fileset> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Fileset*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Fileset : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetUsedFilesSeq copyUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadUsedFiles(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetEntryPtr getFilesetEntry(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetEntryPtr setFilesetEntry(::Ice::Int, const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetEntryPtr getPrimaryFilesetEntry(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetEntryPtr setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetImagesSeq copyImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addImage(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeImage(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadImages(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetJobLinksSeq copyJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadJobLinks(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetJobLinkPtr getFilesetJobLink(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetJobLinkPtr setFilesetJobLink(::Ice::Int, const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetJobLinkPtr getPrimaryFilesetJobLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetJobLinkPtr setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getJobLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetJobLinkPtr linkJob(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetJobLinksSeq findFilesetJobLink(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkJob(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetLinkedJobSeq linkedJobList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getTemplatePrefix(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setTemplatePrefix(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetAnnotationLinksSeq findFilesetAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Fileset : virtual public ::IceDelegate::omero::model::Fileset,
                virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetUsedFilesSeq copyUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadUsedFiles(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetEntryPtr getFilesetEntry(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetEntryPtr setFilesetEntry(::Ice::Int, const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetEntryPtr getPrimaryFilesetEntry(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetEntryPtr setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetImagesSeq copyImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addImage(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeImage(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadImages(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinksSeq copyJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadJobLinks(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinkPtr getFilesetJobLink(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinkPtr setFilesetJobLink(::Ice::Int, const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinkPtr getPrimaryFilesetJobLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinkPtr setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getJobLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinkPtr linkJob(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinksSeq findFilesetJobLink(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkJob(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetLinkedJobSeq linkedJobList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getTemplatePrefix(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTemplatePrefix(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetAnnotationLinksSeq findFilesetAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Fileset : virtual public ::IceDelegate::omero::model::Fileset,
                virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetUsedFilesSeq copyUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearUsedFiles(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadUsedFiles(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetEntryPtr getFilesetEntry(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetEntryPtr setFilesetEntry(::Ice::Int, const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetEntryPtr getPrimaryFilesetEntry(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetEntryPtr setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetImagesSeq copyImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addImage(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeImage(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearImages(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadImages(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinksSeq copyJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearJobLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadJobLinks(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinkPtr getFilesetJobLink(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinkPtr setFilesetJobLink(::Ice::Int, const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinkPtr getPrimaryFilesetJobLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinkPtr setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getJobLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinkPtr linkJob(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetJobLinksSeq findFilesetJobLink(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkJob(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetLinkedJobSeq linkedJobList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getTemplatePrefix(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTemplatePrefix(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetAnnotationLinksSeq findFilesetAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class Fileset : public ::omero::model::IObject
{
public:

    typedef FilesetPrx ProxyType;
    typedef FilesetPtr PointerType;

    Fileset()
    {
    }

    Fileset(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::model::FilesetUsedFilesSeq& __ice_usedFilesSeq, bool __ice_usedFilesLoaded, const ::omero::model::FilesetImagesSeq& __ice_imagesSeq, bool __ice_imagesLoaded, const ::omero::model::FilesetJobLinksSeq& __ice_jobLinksSeq, bool __ice_jobLinksLoaded, const ::omero::sys::CountMap& __ice_jobLinksCountPerOwner, const ::omero::RStringPtr& __ice_templatePrefix, const ::omero::model::FilesetAnnotationLinksSeq& __ice_annotationLinksSeq, bool __ice_annotationLinksLoaded, const ::omero::sys::CountMap& __ice_annotationLinksCountPerOwner) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        usedFilesSeq(__ice_usedFilesSeq),
        usedFilesLoaded(__ice_usedFilesLoaded),
        imagesSeq(__ice_imagesSeq),
        imagesLoaded(__ice_imagesLoaded),
        jobLinksSeq(__ice_jobLinksSeq),
        jobLinksLoaded(__ice_jobLinksLoaded),
        jobLinksCountPerOwner(__ice_jobLinksCountPerOwner),
        templatePrefix(__ice_templatePrefix),
        annotationLinksSeq(__ice_annotationLinksSeq),
        annotationLinksLoaded(__ice_annotationLinksLoaded),
        annotationLinksCountPerOwner(__ice_annotationLinksCountPerOwner)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadUsedFiles(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadUsedFiles(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfUsedFiles(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfUsedFiles(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetUsedFilesSeq copyUsedFiles(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyUsedFiles(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilesetEntry(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllFilesetEntrySet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilesetEntry(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllFilesetEntrySet(const ::omero::model::FilesetUsedFilesSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllFilesetEntrySet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearUsedFiles(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearUsedFiles(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadUsedFiles(const ::omero::model::FilesetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadUsedFiles(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetEntryPtr getFilesetEntry(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFilesetEntry(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetEntryPtr setFilesetEntry(::Ice::Int, const ::omero::model::FilesetEntryPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setFilesetEntry(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetEntryPtr getPrimaryFilesetEntry(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPrimaryFilesetEntry(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetEntryPtr setPrimaryFilesetEntry(const ::omero::model::FilesetEntryPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPrimaryFilesetEntry(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadImages(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfImages(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetImagesSeq copyImages(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addImage(const ::omero::model::ImagePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllImageSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeImage(const ::omero::model::ImagePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllImageSet(const ::omero::model::FilesetImagesSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllImageSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearImages(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadImages(const ::omero::model::FilesetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadJobLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadJobLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfJobLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfJobLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetJobLinksSeq copyJobLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyJobLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilesetJobLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllFilesetJobLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilesetJobLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllFilesetJobLinkSet(const ::omero::model::FilesetJobLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllFilesetJobLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearJobLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearJobLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadJobLinks(const ::omero::model::FilesetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadJobLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetJobLinkPtr getFilesetJobLink(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFilesetJobLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetJobLinkPtr setFilesetJobLink(::Ice::Int, const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setFilesetJobLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetJobLinkPtr getPrimaryFilesetJobLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPrimaryFilesetJobLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetJobLinkPtr setPrimaryFilesetJobLink(const ::omero::model::FilesetJobLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPrimaryFilesetJobLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getJobLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getJobLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetJobLinkPtr linkJob(const ::omero::model::JobPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilesetJobLinkToBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilesetJobLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetJobLinksSeq findFilesetJobLink(const ::omero::model::JobPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findFilesetJobLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkJob(const ::omero::model::JobPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilesetJobLinkFromBoth(const ::omero::model::FilesetJobLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilesetJobLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetLinkedJobSeq linkedJobList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedJobList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getTemplatePrefix(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTemplatePrefix(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTemplatePrefix(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTemplatePrefix(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilesetAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllFilesetAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilesetAnnotationLink(const ::omero::model::FilesetAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilesetAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllFilesetAnnotationLinkSet(const ::omero::model::FilesetAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllFilesetAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::FilesetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilesetAnnotationLinkToBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilesetAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetAnnotationLinksSeq findFilesetAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findFilesetAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilesetAnnotationLinkFromBoth(const ::omero::model::FilesetAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilesetAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::model::FilesetUsedFilesSeq usedFilesSeq;

    bool usedFilesLoaded;

    ::omero::model::FilesetImagesSeq imagesSeq;

    bool imagesLoaded;

    ::omero::model::FilesetJobLinksSeq jobLinksSeq;

    bool jobLinksLoaded;

    ::omero::sys::CountMap jobLinksCountPerOwner;

    ::omero::RStringPtr templatePrefix;

    ::omero::model::FilesetAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;
};

inline bool operator==(const Fileset& l, const Fileset& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Fileset& l, const Fileset& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Fileset_getVersion : public Callback_Fileset_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Fileset_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_getVersionPtr
newCallback_Fileset_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_getVersionPtr
newCallback_Fileset_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_getVersion : public Callback_Fileset_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Fileset_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_getVersionPtr
newCallback_Fileset_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_getVersionPtr
newCallback_Fileset_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_setVersion : public Callback_Fileset_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_setVersionPtr
newCallback_Fileset_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_setVersionPtr
newCallback_Fileset_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_setVersionPtr
newCallback_Fileset_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_setVersionPtr
newCallback_Fileset_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_setVersion : public Callback_Fileset_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_setVersionPtr
newCallback_Fileset_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_setVersionPtr
newCallback_Fileset_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_setVersionPtr
newCallback_Fileset_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_setVersionPtr
newCallback_Fileset_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_unloadUsedFiles : public Callback_Fileset_unloadUsedFiles_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_unloadUsedFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_unloadUsedFilesPtr
newCallback_Fileset_unloadUsedFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadUsedFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unloadUsedFilesPtr
newCallback_Fileset_unloadUsedFiles(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadUsedFiles<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_unloadUsedFilesPtr
newCallback_Fileset_unloadUsedFiles(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadUsedFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unloadUsedFilesPtr
newCallback_Fileset_unloadUsedFiles(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadUsedFiles<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_unloadUsedFiles : public Callback_Fileset_unloadUsedFiles_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_unloadUsedFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_unloadUsedFilesPtr
newCallback_Fileset_unloadUsedFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadUsedFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadUsedFilesPtr
newCallback_Fileset_unloadUsedFiles(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadUsedFiles<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadUsedFilesPtr
newCallback_Fileset_unloadUsedFiles(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadUsedFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadUsedFilesPtr
newCallback_Fileset_unloadUsedFiles(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadUsedFiles<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_sizeOfUsedFiles : public Callback_Fileset_sizeOfUsedFiles_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Fileset_sizeOfUsedFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfUsedFiles(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_sizeOfUsedFilesPtr
newCallback_Fileset_sizeOfUsedFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_sizeOfUsedFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_sizeOfUsedFilesPtr
newCallback_Fileset_sizeOfUsedFiles(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_sizeOfUsedFiles<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_sizeOfUsedFiles : public Callback_Fileset_sizeOfUsedFiles_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Fileset_sizeOfUsedFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfUsedFiles(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_sizeOfUsedFilesPtr
newCallback_Fileset_sizeOfUsedFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_sizeOfUsedFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_sizeOfUsedFilesPtr
newCallback_Fileset_sizeOfUsedFiles(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_sizeOfUsedFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_copyUsedFiles : public Callback_Fileset_copyUsedFiles_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetUsedFilesSeq&);

    CallbackNC_Fileset_copyUsedFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetUsedFilesSeq __ret;
        try
        {
            __ret = __proxy->end_copyUsedFiles(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_copyUsedFilesPtr
newCallback_Fileset_copyUsedFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetUsedFilesSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_copyUsedFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_copyUsedFilesPtr
newCallback_Fileset_copyUsedFiles(T* instance, void (T::*cb)(const ::omero::model::FilesetUsedFilesSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_copyUsedFiles<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_copyUsedFiles : public Callback_Fileset_copyUsedFiles_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetUsedFilesSeq&, const CT&);

    Callback_Fileset_copyUsedFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetUsedFilesSeq __ret;
        try
        {
            __ret = __proxy->end_copyUsedFiles(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_copyUsedFilesPtr
newCallback_Fileset_copyUsedFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetUsedFilesSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_copyUsedFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_copyUsedFilesPtr
newCallback_Fileset_copyUsedFiles(T* instance, void (T::*cb)(const ::omero::model::FilesetUsedFilesSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_copyUsedFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_addFilesetEntry : public Callback_Fileset_addFilesetEntry_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_addFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_addFilesetEntryPtr
newCallback_Fileset_addFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetEntryPtr
newCallback_Fileset_addFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetEntry<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetEntryPtr
newCallback_Fileset_addFilesetEntry(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetEntryPtr
newCallback_Fileset_addFilesetEntry(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetEntry<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_addFilesetEntry : public Callback_Fileset_addFilesetEntry_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_addFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_addFilesetEntryPtr
newCallback_Fileset_addFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetEntryPtr
newCallback_Fileset_addFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetEntry<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetEntryPtr
newCallback_Fileset_addFilesetEntry(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetEntryPtr
newCallback_Fileset_addFilesetEntry(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetEntry<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_addAllFilesetEntrySet : public Callback_Fileset_addAllFilesetEntrySet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_addAllFilesetEntrySet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_addAllFilesetEntrySetPtr
newCallback_Fileset_addAllFilesetEntrySet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetEntrySet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addAllFilesetEntrySetPtr
newCallback_Fileset_addAllFilesetEntrySet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetEntrySet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_addAllFilesetEntrySetPtr
newCallback_Fileset_addAllFilesetEntrySet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetEntrySet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addAllFilesetEntrySetPtr
newCallback_Fileset_addAllFilesetEntrySet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetEntrySet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_addAllFilesetEntrySet : public Callback_Fileset_addAllFilesetEntrySet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_addAllFilesetEntrySet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_addAllFilesetEntrySetPtr
newCallback_Fileset_addAllFilesetEntrySet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetEntrySet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllFilesetEntrySetPtr
newCallback_Fileset_addAllFilesetEntrySet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetEntrySet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllFilesetEntrySetPtr
newCallback_Fileset_addAllFilesetEntrySet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetEntrySet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllFilesetEntrySetPtr
newCallback_Fileset_addAllFilesetEntrySet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetEntrySet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_removeFilesetEntry : public Callback_Fileset_removeFilesetEntry_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_removeFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_removeFilesetEntryPtr
newCallback_Fileset_removeFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetEntryPtr
newCallback_Fileset_removeFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetEntry<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetEntryPtr
newCallback_Fileset_removeFilesetEntry(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetEntryPtr
newCallback_Fileset_removeFilesetEntry(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetEntry<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_removeFilesetEntry : public Callback_Fileset_removeFilesetEntry_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_removeFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_removeFilesetEntryPtr
newCallback_Fileset_removeFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetEntryPtr
newCallback_Fileset_removeFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetEntry<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetEntryPtr
newCallback_Fileset_removeFilesetEntry(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetEntryPtr
newCallback_Fileset_removeFilesetEntry(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetEntry<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_removeAllFilesetEntrySet : public Callback_Fileset_removeAllFilesetEntrySet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_removeAllFilesetEntrySet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_removeAllFilesetEntrySetPtr
newCallback_Fileset_removeAllFilesetEntrySet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetEntrySet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllFilesetEntrySetPtr
newCallback_Fileset_removeAllFilesetEntrySet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetEntrySet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllFilesetEntrySetPtr
newCallback_Fileset_removeAllFilesetEntrySet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetEntrySet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllFilesetEntrySetPtr
newCallback_Fileset_removeAllFilesetEntrySet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetEntrySet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_removeAllFilesetEntrySet : public Callback_Fileset_removeAllFilesetEntrySet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_removeAllFilesetEntrySet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_removeAllFilesetEntrySetPtr
newCallback_Fileset_removeAllFilesetEntrySet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetEntrySet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllFilesetEntrySetPtr
newCallback_Fileset_removeAllFilesetEntrySet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetEntrySet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllFilesetEntrySetPtr
newCallback_Fileset_removeAllFilesetEntrySet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetEntrySet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllFilesetEntrySetPtr
newCallback_Fileset_removeAllFilesetEntrySet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetEntrySet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_clearUsedFiles : public Callback_Fileset_clearUsedFiles_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_clearUsedFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_clearUsedFilesPtr
newCallback_Fileset_clearUsedFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearUsedFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_clearUsedFilesPtr
newCallback_Fileset_clearUsedFiles(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearUsedFiles<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_clearUsedFilesPtr
newCallback_Fileset_clearUsedFiles(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearUsedFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_clearUsedFilesPtr
newCallback_Fileset_clearUsedFiles(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearUsedFiles<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_clearUsedFiles : public Callback_Fileset_clearUsedFiles_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_clearUsedFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_clearUsedFilesPtr
newCallback_Fileset_clearUsedFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearUsedFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearUsedFilesPtr
newCallback_Fileset_clearUsedFiles(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearUsedFiles<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearUsedFilesPtr
newCallback_Fileset_clearUsedFiles(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearUsedFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearUsedFilesPtr
newCallback_Fileset_clearUsedFiles(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearUsedFiles<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_reloadUsedFiles : public Callback_Fileset_reloadUsedFiles_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_reloadUsedFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_reloadUsedFilesPtr
newCallback_Fileset_reloadUsedFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadUsedFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_reloadUsedFilesPtr
newCallback_Fileset_reloadUsedFiles(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadUsedFiles<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_reloadUsedFilesPtr
newCallback_Fileset_reloadUsedFiles(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadUsedFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_reloadUsedFilesPtr
newCallback_Fileset_reloadUsedFiles(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadUsedFiles<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_reloadUsedFiles : public Callback_Fileset_reloadUsedFiles_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_reloadUsedFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_reloadUsedFilesPtr
newCallback_Fileset_reloadUsedFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadUsedFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadUsedFilesPtr
newCallback_Fileset_reloadUsedFiles(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadUsedFiles<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadUsedFilesPtr
newCallback_Fileset_reloadUsedFiles(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadUsedFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadUsedFilesPtr
newCallback_Fileset_reloadUsedFiles(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadUsedFiles<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_getFilesetEntry : public Callback_Fileset_getFilesetEntry_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetEntryPtr&);

    CallbackNC_Fileset_getFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetEntryPtr __ret;
        try
        {
            __ret = __proxy->end_getFilesetEntry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_getFilesetEntryPtr
newCallback_Fileset_getFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_getFilesetEntryPtr
newCallback_Fileset_getFilesetEntry(T* instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_getFilesetEntry : public Callback_Fileset_getFilesetEntry_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetEntryPtr&, const CT&);

    Callback_Fileset_getFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetEntryPtr __ret;
        try
        {
            __ret = __proxy->end_getFilesetEntry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_getFilesetEntryPtr
newCallback_Fileset_getFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_getFilesetEntryPtr
newCallback_Fileset_getFilesetEntry(T* instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_setFilesetEntry : public Callback_Fileset_setFilesetEntry_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetEntryPtr&);

    CallbackNC_Fileset_setFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetEntryPtr __ret;
        try
        {
            __ret = __proxy->end_setFilesetEntry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_setFilesetEntryPtr
newCallback_Fileset_setFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_setFilesetEntryPtr
newCallback_Fileset_setFilesetEntry(T* instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_setFilesetEntry : public Callback_Fileset_setFilesetEntry_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetEntryPtr&, const CT&);

    Callback_Fileset_setFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetEntryPtr __ret;
        try
        {
            __ret = __proxy->end_setFilesetEntry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_setFilesetEntryPtr
newCallback_Fileset_setFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_setFilesetEntryPtr
newCallback_Fileset_setFilesetEntry(T* instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_getPrimaryFilesetEntry : public Callback_Fileset_getPrimaryFilesetEntry_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetEntryPtr&);

    CallbackNC_Fileset_getPrimaryFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetEntryPtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryFilesetEntry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_getPrimaryFilesetEntryPtr
newCallback_Fileset_getPrimaryFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getPrimaryFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_getPrimaryFilesetEntryPtr
newCallback_Fileset_getPrimaryFilesetEntry(T* instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getPrimaryFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_getPrimaryFilesetEntry : public Callback_Fileset_getPrimaryFilesetEntry_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetEntryPtr&, const CT&);

    Callback_Fileset_getPrimaryFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetEntryPtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryFilesetEntry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_getPrimaryFilesetEntryPtr
newCallback_Fileset_getPrimaryFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getPrimaryFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_getPrimaryFilesetEntryPtr
newCallback_Fileset_getPrimaryFilesetEntry(T* instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getPrimaryFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_setPrimaryFilesetEntry : public Callback_Fileset_setPrimaryFilesetEntry_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetEntryPtr&);

    CallbackNC_Fileset_setPrimaryFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetEntryPtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryFilesetEntry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_setPrimaryFilesetEntryPtr
newCallback_Fileset_setPrimaryFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setPrimaryFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_setPrimaryFilesetEntryPtr
newCallback_Fileset_setPrimaryFilesetEntry(T* instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setPrimaryFilesetEntry<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_setPrimaryFilesetEntry : public Callback_Fileset_setPrimaryFilesetEntry_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetEntryPtr&, const CT&);

    Callback_Fileset_setPrimaryFilesetEntry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetEntryPtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryFilesetEntry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_setPrimaryFilesetEntryPtr
newCallback_Fileset_setPrimaryFilesetEntry(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setPrimaryFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_setPrimaryFilesetEntryPtr
newCallback_Fileset_setPrimaryFilesetEntry(T* instance, void (T::*cb)(const ::omero::model::FilesetEntryPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setPrimaryFilesetEntry<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_unloadImages : public Callback_Fileset_unloadImages_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_unloadImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_unloadImagesPtr
newCallback_Fileset_unloadImages(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unloadImagesPtr
newCallback_Fileset_unloadImages(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadImages<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_unloadImagesPtr
newCallback_Fileset_unloadImages(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unloadImagesPtr
newCallback_Fileset_unloadImages(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadImages<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_unloadImages : public Callback_Fileset_unloadImages_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_unloadImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_unloadImagesPtr
newCallback_Fileset_unloadImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadImagesPtr
newCallback_Fileset_unloadImages(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadImages<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadImagesPtr
newCallback_Fileset_unloadImages(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadImagesPtr
newCallback_Fileset_unloadImages(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadImages<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_sizeOfImages : public Callback_Fileset_sizeOfImages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Fileset_sizeOfImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfImages(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_sizeOfImagesPtr
newCallback_Fileset_sizeOfImages(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_sizeOfImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_sizeOfImagesPtr
newCallback_Fileset_sizeOfImages(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_sizeOfImages<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_sizeOfImages : public Callback_Fileset_sizeOfImages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Fileset_sizeOfImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfImages(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_sizeOfImagesPtr
newCallback_Fileset_sizeOfImages(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_sizeOfImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_sizeOfImagesPtr
newCallback_Fileset_sizeOfImages(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_sizeOfImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_copyImages : public Callback_Fileset_copyImages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetImagesSeq&);

    CallbackNC_Fileset_copyImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetImagesSeq __ret;
        try
        {
            __ret = __proxy->end_copyImages(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_copyImagesPtr
newCallback_Fileset_copyImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetImagesSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_copyImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_copyImagesPtr
newCallback_Fileset_copyImages(T* instance, void (T::*cb)(const ::omero::model::FilesetImagesSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_copyImages<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_copyImages : public Callback_Fileset_copyImages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetImagesSeq&, const CT&);

    Callback_Fileset_copyImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetImagesSeq __ret;
        try
        {
            __ret = __proxy->end_copyImages(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_copyImagesPtr
newCallback_Fileset_copyImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetImagesSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_copyImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_copyImagesPtr
newCallback_Fileset_copyImages(T* instance, void (T::*cb)(const ::omero::model::FilesetImagesSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_copyImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_addImage : public Callback_Fileset_addImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_addImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_addImagePtr
newCallback_Fileset_addImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addImagePtr
newCallback_Fileset_addImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_addImagePtr
newCallback_Fileset_addImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addImagePtr
newCallback_Fileset_addImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_addImage : public Callback_Fileset_addImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_addImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_addImagePtr
newCallback_Fileset_addImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addImagePtr
newCallback_Fileset_addImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addImagePtr
newCallback_Fileset_addImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addImagePtr
newCallback_Fileset_addImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_addAllImageSet : public Callback_Fileset_addAllImageSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_addAllImageSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_addAllImageSetPtr
newCallback_Fileset_addAllImageSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllImageSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addAllImageSetPtr
newCallback_Fileset_addAllImageSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllImageSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_addAllImageSetPtr
newCallback_Fileset_addAllImageSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllImageSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addAllImageSetPtr
newCallback_Fileset_addAllImageSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllImageSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_addAllImageSet : public Callback_Fileset_addAllImageSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_addAllImageSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_addAllImageSetPtr
newCallback_Fileset_addAllImageSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllImageSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllImageSetPtr
newCallback_Fileset_addAllImageSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllImageSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllImageSetPtr
newCallback_Fileset_addAllImageSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllImageSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllImageSetPtr
newCallback_Fileset_addAllImageSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllImageSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_removeImage : public Callback_Fileset_removeImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_removeImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_removeImagePtr
newCallback_Fileset_removeImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeImagePtr
newCallback_Fileset_removeImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_removeImagePtr
newCallback_Fileset_removeImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeImagePtr
newCallback_Fileset_removeImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_removeImage : public Callback_Fileset_removeImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_removeImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_removeImagePtr
newCallback_Fileset_removeImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeImagePtr
newCallback_Fileset_removeImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeImagePtr
newCallback_Fileset_removeImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeImagePtr
newCallback_Fileset_removeImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_removeAllImageSet : public Callback_Fileset_removeAllImageSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_removeAllImageSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_removeAllImageSetPtr
newCallback_Fileset_removeAllImageSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllImageSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllImageSetPtr
newCallback_Fileset_removeAllImageSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllImageSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllImageSetPtr
newCallback_Fileset_removeAllImageSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllImageSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllImageSetPtr
newCallback_Fileset_removeAllImageSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllImageSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_removeAllImageSet : public Callback_Fileset_removeAllImageSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_removeAllImageSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_removeAllImageSetPtr
newCallback_Fileset_removeAllImageSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllImageSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllImageSetPtr
newCallback_Fileset_removeAllImageSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllImageSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllImageSetPtr
newCallback_Fileset_removeAllImageSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllImageSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllImageSetPtr
newCallback_Fileset_removeAllImageSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllImageSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_clearImages : public Callback_Fileset_clearImages_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_clearImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_clearImagesPtr
newCallback_Fileset_clearImages(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_clearImagesPtr
newCallback_Fileset_clearImages(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearImages<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_clearImagesPtr
newCallback_Fileset_clearImages(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_clearImagesPtr
newCallback_Fileset_clearImages(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearImages<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_clearImages : public Callback_Fileset_clearImages_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_clearImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_clearImagesPtr
newCallback_Fileset_clearImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearImagesPtr
newCallback_Fileset_clearImages(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearImages<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearImagesPtr
newCallback_Fileset_clearImages(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearImagesPtr
newCallback_Fileset_clearImages(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearImages<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_reloadImages : public Callback_Fileset_reloadImages_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_reloadImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_reloadImagesPtr
newCallback_Fileset_reloadImages(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_reloadImagesPtr
newCallback_Fileset_reloadImages(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadImages<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_reloadImagesPtr
newCallback_Fileset_reloadImages(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_reloadImagesPtr
newCallback_Fileset_reloadImages(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadImages<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_reloadImages : public Callback_Fileset_reloadImages_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_reloadImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_reloadImagesPtr
newCallback_Fileset_reloadImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadImagesPtr
newCallback_Fileset_reloadImages(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadImages<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadImagesPtr
newCallback_Fileset_reloadImages(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadImagesPtr
newCallback_Fileset_reloadImages(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadImages<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_unloadJobLinks : public Callback_Fileset_unloadJobLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_unloadJobLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_unloadJobLinksPtr
newCallback_Fileset_unloadJobLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadJobLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unloadJobLinksPtr
newCallback_Fileset_unloadJobLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadJobLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_unloadJobLinksPtr
newCallback_Fileset_unloadJobLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadJobLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unloadJobLinksPtr
newCallback_Fileset_unloadJobLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadJobLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_unloadJobLinks : public Callback_Fileset_unloadJobLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_unloadJobLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_unloadJobLinksPtr
newCallback_Fileset_unloadJobLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadJobLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadJobLinksPtr
newCallback_Fileset_unloadJobLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadJobLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadJobLinksPtr
newCallback_Fileset_unloadJobLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadJobLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadJobLinksPtr
newCallback_Fileset_unloadJobLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadJobLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_sizeOfJobLinks : public Callback_Fileset_sizeOfJobLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Fileset_sizeOfJobLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfJobLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_sizeOfJobLinksPtr
newCallback_Fileset_sizeOfJobLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_sizeOfJobLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_sizeOfJobLinksPtr
newCallback_Fileset_sizeOfJobLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_sizeOfJobLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_sizeOfJobLinks : public Callback_Fileset_sizeOfJobLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Fileset_sizeOfJobLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfJobLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_sizeOfJobLinksPtr
newCallback_Fileset_sizeOfJobLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_sizeOfJobLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_sizeOfJobLinksPtr
newCallback_Fileset_sizeOfJobLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_sizeOfJobLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_copyJobLinks : public Callback_Fileset_copyJobLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinksSeq&);

    CallbackNC_Fileset_copyJobLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyJobLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_copyJobLinksPtr
newCallback_Fileset_copyJobLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_copyJobLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_copyJobLinksPtr
newCallback_Fileset_copyJobLinks(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_copyJobLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_copyJobLinks : public Callback_Fileset_copyJobLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinksSeq&, const CT&);

    Callback_Fileset_copyJobLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyJobLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_copyJobLinksPtr
newCallback_Fileset_copyJobLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_copyJobLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_copyJobLinksPtr
newCallback_Fileset_copyJobLinks(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_copyJobLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_addFilesetJobLink : public Callback_Fileset_addFilesetJobLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_addFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_addFilesetJobLinkPtr
newCallback_Fileset_addFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetJobLinkPtr
newCallback_Fileset_addFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetJobLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetJobLinkPtr
newCallback_Fileset_addFilesetJobLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetJobLinkPtr
newCallback_Fileset_addFilesetJobLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetJobLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_addFilesetJobLink : public Callback_Fileset_addFilesetJobLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_addFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_addFilesetJobLinkPtr
newCallback_Fileset_addFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetJobLinkPtr
newCallback_Fileset_addFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetJobLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetJobLinkPtr
newCallback_Fileset_addFilesetJobLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetJobLinkPtr
newCallback_Fileset_addFilesetJobLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetJobLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_addAllFilesetJobLinkSet : public Callback_Fileset_addAllFilesetJobLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_addAllFilesetJobLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_addAllFilesetJobLinkSetPtr
newCallback_Fileset_addAllFilesetJobLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetJobLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addAllFilesetJobLinkSetPtr
newCallback_Fileset_addAllFilesetJobLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetJobLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_addAllFilesetJobLinkSetPtr
newCallback_Fileset_addAllFilesetJobLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetJobLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addAllFilesetJobLinkSetPtr
newCallback_Fileset_addAllFilesetJobLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetJobLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_addAllFilesetJobLinkSet : public Callback_Fileset_addAllFilesetJobLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_addAllFilesetJobLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_addAllFilesetJobLinkSetPtr
newCallback_Fileset_addAllFilesetJobLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetJobLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllFilesetJobLinkSetPtr
newCallback_Fileset_addAllFilesetJobLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetJobLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllFilesetJobLinkSetPtr
newCallback_Fileset_addAllFilesetJobLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetJobLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllFilesetJobLinkSetPtr
newCallback_Fileset_addAllFilesetJobLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetJobLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_removeFilesetJobLink : public Callback_Fileset_removeFilesetJobLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_removeFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_removeFilesetJobLinkPtr
newCallback_Fileset_removeFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetJobLinkPtr
newCallback_Fileset_removeFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetJobLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetJobLinkPtr
newCallback_Fileset_removeFilesetJobLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetJobLinkPtr
newCallback_Fileset_removeFilesetJobLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetJobLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_removeFilesetJobLink : public Callback_Fileset_removeFilesetJobLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_removeFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_removeFilesetJobLinkPtr
newCallback_Fileset_removeFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetJobLinkPtr
newCallback_Fileset_removeFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetJobLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetJobLinkPtr
newCallback_Fileset_removeFilesetJobLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetJobLinkPtr
newCallback_Fileset_removeFilesetJobLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetJobLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_removeAllFilesetJobLinkSet : public Callback_Fileset_removeAllFilesetJobLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_removeAllFilesetJobLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_removeAllFilesetJobLinkSetPtr
newCallback_Fileset_removeAllFilesetJobLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetJobLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllFilesetJobLinkSetPtr
newCallback_Fileset_removeAllFilesetJobLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetJobLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllFilesetJobLinkSetPtr
newCallback_Fileset_removeAllFilesetJobLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetJobLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllFilesetJobLinkSetPtr
newCallback_Fileset_removeAllFilesetJobLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetJobLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_removeAllFilesetJobLinkSet : public Callback_Fileset_removeAllFilesetJobLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_removeAllFilesetJobLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_removeAllFilesetJobLinkSetPtr
newCallback_Fileset_removeAllFilesetJobLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetJobLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllFilesetJobLinkSetPtr
newCallback_Fileset_removeAllFilesetJobLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetJobLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllFilesetJobLinkSetPtr
newCallback_Fileset_removeAllFilesetJobLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetJobLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllFilesetJobLinkSetPtr
newCallback_Fileset_removeAllFilesetJobLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetJobLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_clearJobLinks : public Callback_Fileset_clearJobLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_clearJobLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_clearJobLinksPtr
newCallback_Fileset_clearJobLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearJobLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_clearJobLinksPtr
newCallback_Fileset_clearJobLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearJobLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_clearJobLinksPtr
newCallback_Fileset_clearJobLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearJobLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_clearJobLinksPtr
newCallback_Fileset_clearJobLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearJobLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_clearJobLinks : public Callback_Fileset_clearJobLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_clearJobLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_clearJobLinksPtr
newCallback_Fileset_clearJobLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearJobLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearJobLinksPtr
newCallback_Fileset_clearJobLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearJobLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearJobLinksPtr
newCallback_Fileset_clearJobLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearJobLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearJobLinksPtr
newCallback_Fileset_clearJobLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearJobLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_reloadJobLinks : public Callback_Fileset_reloadJobLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_reloadJobLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_reloadJobLinksPtr
newCallback_Fileset_reloadJobLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadJobLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_reloadJobLinksPtr
newCallback_Fileset_reloadJobLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadJobLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_reloadJobLinksPtr
newCallback_Fileset_reloadJobLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadJobLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_reloadJobLinksPtr
newCallback_Fileset_reloadJobLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadJobLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_reloadJobLinks : public Callback_Fileset_reloadJobLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_reloadJobLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_reloadJobLinksPtr
newCallback_Fileset_reloadJobLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadJobLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadJobLinksPtr
newCallback_Fileset_reloadJobLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadJobLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadJobLinksPtr
newCallback_Fileset_reloadJobLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadJobLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadJobLinksPtr
newCallback_Fileset_reloadJobLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadJobLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_getFilesetJobLink : public Callback_Fileset_getFilesetJobLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinkPtr&);

    CallbackNC_Fileset_getFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinkPtr __ret;
        try
        {
            __ret = __proxy->end_getFilesetJobLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_getFilesetJobLinkPtr
newCallback_Fileset_getFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_getFilesetJobLinkPtr
newCallback_Fileset_getFilesetJobLink(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_getFilesetJobLink : public Callback_Fileset_getFilesetJobLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinkPtr&, const CT&);

    Callback_Fileset_getFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinkPtr __ret;
        try
        {
            __ret = __proxy->end_getFilesetJobLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_getFilesetJobLinkPtr
newCallback_Fileset_getFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_getFilesetJobLinkPtr
newCallback_Fileset_getFilesetJobLink(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_setFilesetJobLink : public Callback_Fileset_setFilesetJobLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinkPtr&);

    CallbackNC_Fileset_setFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinkPtr __ret;
        try
        {
            __ret = __proxy->end_setFilesetJobLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_setFilesetJobLinkPtr
newCallback_Fileset_setFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_setFilesetJobLinkPtr
newCallback_Fileset_setFilesetJobLink(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_setFilesetJobLink : public Callback_Fileset_setFilesetJobLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinkPtr&, const CT&);

    Callback_Fileset_setFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinkPtr __ret;
        try
        {
            __ret = __proxy->end_setFilesetJobLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_setFilesetJobLinkPtr
newCallback_Fileset_setFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_setFilesetJobLinkPtr
newCallback_Fileset_setFilesetJobLink(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_getPrimaryFilesetJobLink : public Callback_Fileset_getPrimaryFilesetJobLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinkPtr&);

    CallbackNC_Fileset_getPrimaryFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinkPtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryFilesetJobLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_getPrimaryFilesetJobLinkPtr
newCallback_Fileset_getPrimaryFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getPrimaryFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_getPrimaryFilesetJobLinkPtr
newCallback_Fileset_getPrimaryFilesetJobLink(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getPrimaryFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_getPrimaryFilesetJobLink : public Callback_Fileset_getPrimaryFilesetJobLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinkPtr&, const CT&);

    Callback_Fileset_getPrimaryFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinkPtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryFilesetJobLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_getPrimaryFilesetJobLinkPtr
newCallback_Fileset_getPrimaryFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getPrimaryFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_getPrimaryFilesetJobLinkPtr
newCallback_Fileset_getPrimaryFilesetJobLink(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getPrimaryFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_setPrimaryFilesetJobLink : public Callback_Fileset_setPrimaryFilesetJobLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinkPtr&);

    CallbackNC_Fileset_setPrimaryFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinkPtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryFilesetJobLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_setPrimaryFilesetJobLinkPtr
newCallback_Fileset_setPrimaryFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setPrimaryFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_setPrimaryFilesetJobLinkPtr
newCallback_Fileset_setPrimaryFilesetJobLink(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setPrimaryFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_setPrimaryFilesetJobLink : public Callback_Fileset_setPrimaryFilesetJobLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinkPtr&, const CT&);

    Callback_Fileset_setPrimaryFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinkPtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryFilesetJobLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_setPrimaryFilesetJobLinkPtr
newCallback_Fileset_setPrimaryFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setPrimaryFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_setPrimaryFilesetJobLinkPtr
newCallback_Fileset_setPrimaryFilesetJobLink(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setPrimaryFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_getJobLinksCountPerOwner : public Callback_Fileset_getJobLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Fileset_getJobLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getJobLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_getJobLinksCountPerOwnerPtr
newCallback_Fileset_getJobLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getJobLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_getJobLinksCountPerOwnerPtr
newCallback_Fileset_getJobLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getJobLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_getJobLinksCountPerOwner : public Callback_Fileset_getJobLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Fileset_getJobLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getJobLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_getJobLinksCountPerOwnerPtr
newCallback_Fileset_getJobLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getJobLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_getJobLinksCountPerOwnerPtr
newCallback_Fileset_getJobLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getJobLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_linkJob : public Callback_Fileset_linkJob_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinkPtr&);

    CallbackNC_Fileset_linkJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkJob(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_linkJobPtr
newCallback_Fileset_linkJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_linkJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_linkJobPtr
newCallback_Fileset_linkJob(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_linkJob<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_linkJob : public Callback_Fileset_linkJob_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinkPtr&, const CT&);

    Callback_Fileset_linkJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkJob(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_linkJobPtr
newCallback_Fileset_linkJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_linkJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_linkJobPtr
newCallback_Fileset_linkJob(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_linkJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_addFilesetJobLinkToBoth : public Callback_Fileset_addFilesetJobLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_addFilesetJobLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_addFilesetJobLinkToBothPtr
newCallback_Fileset_addFilesetJobLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetJobLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetJobLinkToBothPtr
newCallback_Fileset_addFilesetJobLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetJobLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetJobLinkToBothPtr
newCallback_Fileset_addFilesetJobLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetJobLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetJobLinkToBothPtr
newCallback_Fileset_addFilesetJobLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetJobLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_addFilesetJobLinkToBoth : public Callback_Fileset_addFilesetJobLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_addFilesetJobLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_addFilesetJobLinkToBothPtr
newCallback_Fileset_addFilesetJobLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetJobLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetJobLinkToBothPtr
newCallback_Fileset_addFilesetJobLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetJobLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetJobLinkToBothPtr
newCallback_Fileset_addFilesetJobLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetJobLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetJobLinkToBothPtr
newCallback_Fileset_addFilesetJobLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetJobLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_findFilesetJobLink : public Callback_Fileset_findFilesetJobLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinksSeq&);

    CallbackNC_Fileset_findFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findFilesetJobLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_findFilesetJobLinkPtr
newCallback_Fileset_findFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_findFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_findFilesetJobLinkPtr
newCallback_Fileset_findFilesetJobLink(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_findFilesetJobLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_findFilesetJobLink : public Callback_Fileset_findFilesetJobLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetJobLinksSeq&, const CT&);

    Callback_Fileset_findFilesetJobLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetJobLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findFilesetJobLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_findFilesetJobLinkPtr
newCallback_Fileset_findFilesetJobLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetJobLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_findFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_findFilesetJobLinkPtr
newCallback_Fileset_findFilesetJobLink(T* instance, void (T::*cb)(const ::omero::model::FilesetJobLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_findFilesetJobLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_unlinkJob : public Callback_Fileset_unlinkJob_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_unlinkJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_unlinkJobPtr
newCallback_Fileset_unlinkJob(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unlinkJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unlinkJobPtr
newCallback_Fileset_unlinkJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unlinkJob<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_unlinkJobPtr
newCallback_Fileset_unlinkJob(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unlinkJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unlinkJobPtr
newCallback_Fileset_unlinkJob(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unlinkJob<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_unlinkJob : public Callback_Fileset_unlinkJob_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_unlinkJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_unlinkJobPtr
newCallback_Fileset_unlinkJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unlinkJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unlinkJobPtr
newCallback_Fileset_unlinkJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unlinkJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unlinkJobPtr
newCallback_Fileset_unlinkJob(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unlinkJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unlinkJobPtr
newCallback_Fileset_unlinkJob(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unlinkJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_removeFilesetJobLinkFromBoth : public Callback_Fileset_removeFilesetJobLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_removeFilesetJobLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_removeFilesetJobLinkFromBothPtr
newCallback_Fileset_removeFilesetJobLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetJobLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetJobLinkFromBothPtr
newCallback_Fileset_removeFilesetJobLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetJobLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetJobLinkFromBothPtr
newCallback_Fileset_removeFilesetJobLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetJobLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetJobLinkFromBothPtr
newCallback_Fileset_removeFilesetJobLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetJobLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_removeFilesetJobLinkFromBoth : public Callback_Fileset_removeFilesetJobLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_removeFilesetJobLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_removeFilesetJobLinkFromBothPtr
newCallback_Fileset_removeFilesetJobLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetJobLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetJobLinkFromBothPtr
newCallback_Fileset_removeFilesetJobLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetJobLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetJobLinkFromBothPtr
newCallback_Fileset_removeFilesetJobLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetJobLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetJobLinkFromBothPtr
newCallback_Fileset_removeFilesetJobLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetJobLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_linkedJobList : public Callback_Fileset_linkedJobList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetLinkedJobSeq&);

    CallbackNC_Fileset_linkedJobList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetLinkedJobSeq __ret;
        try
        {
            __ret = __proxy->end_linkedJobList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_linkedJobListPtr
newCallback_Fileset_linkedJobList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetLinkedJobSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_linkedJobList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_linkedJobListPtr
newCallback_Fileset_linkedJobList(T* instance, void (T::*cb)(const ::omero::model::FilesetLinkedJobSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_linkedJobList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_linkedJobList : public Callback_Fileset_linkedJobList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetLinkedJobSeq&, const CT&);

    Callback_Fileset_linkedJobList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetLinkedJobSeq __ret;
        try
        {
            __ret = __proxy->end_linkedJobList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_linkedJobListPtr
newCallback_Fileset_linkedJobList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetLinkedJobSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_linkedJobList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_linkedJobListPtr
newCallback_Fileset_linkedJobList(T* instance, void (T::*cb)(const ::omero::model::FilesetLinkedJobSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_linkedJobList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_getTemplatePrefix : public Callback_Fileset_getTemplatePrefix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Fileset_getTemplatePrefix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getTemplatePrefix(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_getTemplatePrefixPtr
newCallback_Fileset_getTemplatePrefix(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getTemplatePrefix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_getTemplatePrefixPtr
newCallback_Fileset_getTemplatePrefix(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getTemplatePrefix<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_getTemplatePrefix : public Callback_Fileset_getTemplatePrefix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Fileset_getTemplatePrefix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getTemplatePrefix(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_getTemplatePrefixPtr
newCallback_Fileset_getTemplatePrefix(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getTemplatePrefix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_getTemplatePrefixPtr
newCallback_Fileset_getTemplatePrefix(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getTemplatePrefix<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_setTemplatePrefix : public Callback_Fileset_setTemplatePrefix_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_setTemplatePrefix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_setTemplatePrefixPtr
newCallback_Fileset_setTemplatePrefix(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setTemplatePrefix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_setTemplatePrefixPtr
newCallback_Fileset_setTemplatePrefix(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setTemplatePrefix<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_setTemplatePrefixPtr
newCallback_Fileset_setTemplatePrefix(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setTemplatePrefix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_setTemplatePrefixPtr
newCallback_Fileset_setTemplatePrefix(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_setTemplatePrefix<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_setTemplatePrefix : public Callback_Fileset_setTemplatePrefix_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_setTemplatePrefix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_setTemplatePrefixPtr
newCallback_Fileset_setTemplatePrefix(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setTemplatePrefix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_setTemplatePrefixPtr
newCallback_Fileset_setTemplatePrefix(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setTemplatePrefix<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_setTemplatePrefixPtr
newCallback_Fileset_setTemplatePrefix(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setTemplatePrefix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_setTemplatePrefixPtr
newCallback_Fileset_setTemplatePrefix(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_setTemplatePrefix<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_unloadAnnotationLinks : public Callback_Fileset_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_unloadAnnotationLinksPtr
newCallback_Fileset_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unloadAnnotationLinksPtr
newCallback_Fileset_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_unloadAnnotationLinksPtr
newCallback_Fileset_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unloadAnnotationLinksPtr
newCallback_Fileset_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_unloadAnnotationLinks : public Callback_Fileset_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_unloadAnnotationLinksPtr
newCallback_Fileset_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadAnnotationLinksPtr
newCallback_Fileset_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadAnnotationLinksPtr
newCallback_Fileset_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unloadAnnotationLinksPtr
newCallback_Fileset_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_sizeOfAnnotationLinks : public Callback_Fileset_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Fileset_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_sizeOfAnnotationLinksPtr
newCallback_Fileset_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_sizeOfAnnotationLinksPtr
newCallback_Fileset_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_sizeOfAnnotationLinks : public Callback_Fileset_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Fileset_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_sizeOfAnnotationLinksPtr
newCallback_Fileset_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_sizeOfAnnotationLinksPtr
newCallback_Fileset_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_copyAnnotationLinks : public Callback_Fileset_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetAnnotationLinksSeq&);

    CallbackNC_Fileset_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_copyAnnotationLinksPtr
newCallback_Fileset_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_copyAnnotationLinksPtr
newCallback_Fileset_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_copyAnnotationLinks : public Callback_Fileset_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetAnnotationLinksSeq&, const CT&);

    Callback_Fileset_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_copyAnnotationLinksPtr
newCallback_Fileset_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_copyAnnotationLinksPtr
newCallback_Fileset_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_addFilesetAnnotationLink : public Callback_Fileset_addFilesetAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_addFilesetAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_addFilesetAnnotationLinkPtr
newCallback_Fileset_addFilesetAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetAnnotationLinkPtr
newCallback_Fileset_addFilesetAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetAnnotationLinkPtr
newCallback_Fileset_addFilesetAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetAnnotationLinkPtr
newCallback_Fileset_addFilesetAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_addFilesetAnnotationLink : public Callback_Fileset_addFilesetAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_addFilesetAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_addFilesetAnnotationLinkPtr
newCallback_Fileset_addFilesetAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetAnnotationLinkPtr
newCallback_Fileset_addFilesetAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetAnnotationLinkPtr
newCallback_Fileset_addFilesetAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetAnnotationLinkPtr
newCallback_Fileset_addFilesetAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_addAllFilesetAnnotationLinkSet : public Callback_Fileset_addAllFilesetAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_addAllFilesetAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_addAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_addAllFilesetAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_addAllFilesetAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_addAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_addAllFilesetAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_addAllFilesetAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addAllFilesetAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_addAllFilesetAnnotationLinkSet : public Callback_Fileset_addAllFilesetAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_addAllFilesetAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_addAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_addAllFilesetAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_addAllFilesetAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_addAllFilesetAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_addAllFilesetAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addAllFilesetAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_removeFilesetAnnotationLink : public Callback_Fileset_removeFilesetAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_removeFilesetAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_removeFilesetAnnotationLinkPtr
newCallback_Fileset_removeFilesetAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetAnnotationLinkPtr
newCallback_Fileset_removeFilesetAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetAnnotationLinkPtr
newCallback_Fileset_removeFilesetAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetAnnotationLinkPtr
newCallback_Fileset_removeFilesetAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_removeFilesetAnnotationLink : public Callback_Fileset_removeFilesetAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_removeFilesetAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_removeFilesetAnnotationLinkPtr
newCallback_Fileset_removeFilesetAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetAnnotationLinkPtr
newCallback_Fileset_removeFilesetAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetAnnotationLinkPtr
newCallback_Fileset_removeFilesetAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetAnnotationLinkPtr
newCallback_Fileset_removeFilesetAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_removeAllFilesetAnnotationLinkSet : public Callback_Fileset_removeAllFilesetAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_removeAllFilesetAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_removeAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_removeAllFilesetAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_removeAllFilesetAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_removeAllFilesetAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_removeAllFilesetAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeAllFilesetAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_removeAllFilesetAnnotationLinkSet : public Callback_Fileset_removeAllFilesetAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_removeAllFilesetAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_removeAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_removeAllFilesetAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_removeAllFilesetAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_removeAllFilesetAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeAllFilesetAnnotationLinkSetPtr
newCallback_Fileset_removeAllFilesetAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeAllFilesetAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_clearAnnotationLinks : public Callback_Fileset_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_clearAnnotationLinksPtr
newCallback_Fileset_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_clearAnnotationLinksPtr
newCallback_Fileset_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_clearAnnotationLinksPtr
newCallback_Fileset_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_clearAnnotationLinksPtr
newCallback_Fileset_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_clearAnnotationLinks : public Callback_Fileset_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_clearAnnotationLinksPtr
newCallback_Fileset_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearAnnotationLinksPtr
newCallback_Fileset_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearAnnotationLinksPtr
newCallback_Fileset_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_clearAnnotationLinksPtr
newCallback_Fileset_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_reloadAnnotationLinks : public Callback_Fileset_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_reloadAnnotationLinksPtr
newCallback_Fileset_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_reloadAnnotationLinksPtr
newCallback_Fileset_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_reloadAnnotationLinksPtr
newCallback_Fileset_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_reloadAnnotationLinksPtr
newCallback_Fileset_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_reloadAnnotationLinks : public Callback_Fileset_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_reloadAnnotationLinksPtr
newCallback_Fileset_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadAnnotationLinksPtr
newCallback_Fileset_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadAnnotationLinksPtr
newCallback_Fileset_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_reloadAnnotationLinksPtr
newCallback_Fileset_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_getAnnotationLinksCountPerOwner : public Callback_Fileset_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Fileset_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_getAnnotationLinksCountPerOwnerPtr
newCallback_Fileset_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_getAnnotationLinksCountPerOwnerPtr
newCallback_Fileset_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_getAnnotationLinksCountPerOwner : public Callback_Fileset_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Fileset_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_getAnnotationLinksCountPerOwnerPtr
newCallback_Fileset_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_getAnnotationLinksCountPerOwnerPtr
newCallback_Fileset_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_linkAnnotation : public Callback_Fileset_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetAnnotationLinkPtr&);

    CallbackNC_Fileset_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_linkAnnotationPtr
newCallback_Fileset_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_linkAnnotationPtr
newCallback_Fileset_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_linkAnnotation : public Callback_Fileset_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetAnnotationLinkPtr&, const CT&);

    Callback_Fileset_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_linkAnnotationPtr
newCallback_Fileset_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_linkAnnotationPtr
newCallback_Fileset_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_addFilesetAnnotationLinkToBoth : public Callback_Fileset_addFilesetAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_addFilesetAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_addFilesetAnnotationLinkToBothPtr
newCallback_Fileset_addFilesetAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetAnnotationLinkToBothPtr
newCallback_Fileset_addFilesetAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetAnnotationLinkToBothPtr
newCallback_Fileset_addFilesetAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_addFilesetAnnotationLinkToBothPtr
newCallback_Fileset_addFilesetAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_addFilesetAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_addFilesetAnnotationLinkToBoth : public Callback_Fileset_addFilesetAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_addFilesetAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_addFilesetAnnotationLinkToBothPtr
newCallback_Fileset_addFilesetAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetAnnotationLinkToBothPtr
newCallback_Fileset_addFilesetAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetAnnotationLinkToBothPtr
newCallback_Fileset_addFilesetAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_addFilesetAnnotationLinkToBothPtr
newCallback_Fileset_addFilesetAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_addFilesetAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_findFilesetAnnotationLink : public Callback_Fileset_findFilesetAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetAnnotationLinksSeq&);

    CallbackNC_Fileset_findFilesetAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findFilesetAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_findFilesetAnnotationLinkPtr
newCallback_Fileset_findFilesetAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_findFilesetAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_findFilesetAnnotationLinkPtr
newCallback_Fileset_findFilesetAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_findFilesetAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_findFilesetAnnotationLink : public Callback_Fileset_findFilesetAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetAnnotationLinksSeq&, const CT&);

    Callback_Fileset_findFilesetAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findFilesetAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_findFilesetAnnotationLinkPtr
newCallback_Fileset_findFilesetAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_findFilesetAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_findFilesetAnnotationLinkPtr
newCallback_Fileset_findFilesetAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::FilesetAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_findFilesetAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_unlinkAnnotation : public Callback_Fileset_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_unlinkAnnotationPtr
newCallback_Fileset_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unlinkAnnotationPtr
newCallback_Fileset_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_unlinkAnnotationPtr
newCallback_Fileset_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_unlinkAnnotationPtr
newCallback_Fileset_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_unlinkAnnotation : public Callback_Fileset_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_unlinkAnnotationPtr
newCallback_Fileset_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unlinkAnnotationPtr
newCallback_Fileset_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unlinkAnnotationPtr
newCallback_Fileset_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_unlinkAnnotationPtr
newCallback_Fileset_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_removeFilesetAnnotationLinkFromBoth : public Callback_Fileset_removeFilesetAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Fileset_removeFilesetAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Fileset_removeFilesetAnnotationLinkFromBothPtr
newCallback_Fileset_removeFilesetAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetAnnotationLinkFromBothPtr
newCallback_Fileset_removeFilesetAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetAnnotationLinkFromBothPtr
newCallback_Fileset_removeFilesetAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_removeFilesetAnnotationLinkFromBothPtr
newCallback_Fileset_removeFilesetAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_removeFilesetAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_removeFilesetAnnotationLinkFromBoth : public Callback_Fileset_removeFilesetAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Fileset_removeFilesetAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Fileset_removeFilesetAnnotationLinkFromBothPtr
newCallback_Fileset_removeFilesetAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetAnnotationLinkFromBothPtr
newCallback_Fileset_removeFilesetAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetAnnotationLinkFromBothPtr
newCallback_Fileset_removeFilesetAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_removeFilesetAnnotationLinkFromBothPtr
newCallback_Fileset_removeFilesetAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_removeFilesetAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Fileset_linkedAnnotationList : public Callback_Fileset_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetLinkedAnnotationSeq&);

    CallbackNC_Fileset_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Fileset_linkedAnnotationListPtr
newCallback_Fileset_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Fileset_linkedAnnotationListPtr
newCallback_Fileset_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::FilesetLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Fileset_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Fileset_linkedAnnotationList : public Callback_Fileset_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetLinkedAnnotationSeq&, const CT&);

    Callback_Fileset_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetPrx __proxy = ::omero::model::FilesetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Fileset_linkedAnnotationListPtr
newCallback_Fileset_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Fileset_linkedAnnotationListPtr
newCallback_Fileset_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::FilesetLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Fileset_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
