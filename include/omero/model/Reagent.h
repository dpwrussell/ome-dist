// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Reagent.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Reagent_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Reagent_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Screen;

class WellReagentLink;

class Well;

class ReagentAnnotationLink;

class Annotation;

class Details;

class Reagent;

}

}

}

namespace omero
{

namespace model
{

class Screen;
bool operator==(const Screen&, const Screen&);
bool operator<(const Screen&, const Screen&);

class WellReagentLink;
bool operator==(const WellReagentLink&, const WellReagentLink&);
bool operator<(const WellReagentLink&, const WellReagentLink&);

class Well;
bool operator==(const Well&, const Well&);
bool operator<(const Well&, const Well&);

class ReagentAnnotationLink;
bool operator==(const ReagentAnnotationLink&, const ReagentAnnotationLink&);
bool operator<(const ReagentAnnotationLink&, const ReagentAnnotationLink&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class Reagent;
bool operator==(const Reagent&, const Reagent&);
bool operator<(const Reagent&, const Reagent&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::Screen*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Screen*);

::Ice::Object* upCast(::omero::model::WellReagentLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::WellReagentLink*);

::Ice::Object* upCast(::omero::model::Well*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Well*);

::Ice::Object* upCast(::omero::model::ReagentAnnotationLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ReagentAnnotationLink*);

::Ice::Object* upCast(::omero::model::Annotation*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::Reagent*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Reagent*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::Screen> ScreenPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Screen> ScreenPrx;

void __read(::IceInternal::BasicStream*, ScreenPrx&);
void __patch__ScreenPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::WellReagentLink> WellReagentLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::WellReagentLink> WellReagentLinkPrx;

void __read(::IceInternal::BasicStream*, WellReagentLinkPrx&);
void __patch__WellReagentLinkPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Well> WellPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Well> WellPrx;

void __read(::IceInternal::BasicStream*, WellPrx&);
void __patch__WellPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::ReagentAnnotationLink> ReagentAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ReagentAnnotationLink> ReagentAnnotationLinkPrx;

void __read(::IceInternal::BasicStream*, ReagentAnnotationLinkPrx&);
void __patch__ReagentAnnotationLinkPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;

void __read(::IceInternal::BasicStream*, AnnotationPrx&);
void __patch__AnnotationPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Reagent> ReagentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Reagent> ReagentPrx;

void __read(::IceInternal::BasicStream*, ReagentPrx&);
void __patch__ReagentPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::WellReagentLinkPtr> ReagentWellLinksSeq;
void __writeReagentWellLinksSeq(::IceInternal::BasicStream*, const ::omero::model::WellReagentLinkPtr*, const ::omero::model::WellReagentLinkPtr*);
void __readReagentWellLinksSeq(::IceInternal::BasicStream*, ReagentWellLinksSeq&);

typedef ::std::vector< ::omero::model::WellPtr> ReagentLinkedWellSeq;
void __writeReagentLinkedWellSeq(::IceInternal::BasicStream*, const ::omero::model::WellPtr*, const ::omero::model::WellPtr*);
void __readReagentLinkedWellSeq(::IceInternal::BasicStream*, ReagentLinkedWellSeq&);

typedef ::std::vector< ::omero::model::ReagentAnnotationLinkPtr> ReagentAnnotationLinksSeq;
void __writeReagentAnnotationLinksSeq(::IceInternal::BasicStream*, const ::omero::model::ReagentAnnotationLinkPtr*, const ::omero::model::ReagentAnnotationLinkPtr*);
void __readReagentAnnotationLinksSeq(::IceInternal::BasicStream*, ReagentAnnotationLinksSeq&);

typedef ::std::vector< ::omero::model::AnnotationPtr> ReagentLinkedAnnotationSeq;
void __writeReagentLinkedAnnotationSeq(::IceInternal::BasicStream*, const ::omero::model::AnnotationPtr*, const ::omero::model::AnnotationPtr*);
void __readReagentLinkedAnnotationSeq(::IceInternal::BasicStream*, ReagentLinkedAnnotationSeq&);

}

}

namespace omero
{

namespace model
{

class Callback_Reagent_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_getVersion_Base> Callback_Reagent_getVersionPtr;

class Callback_Reagent_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_setVersion_Base> Callback_Reagent_setVersionPtr;

class Callback_Reagent_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_getName_Base> Callback_Reagent_getNamePtr;

class Callback_Reagent_setName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_setName_Base> Callback_Reagent_setNamePtr;

class Callback_Reagent_getReagentIdentifier_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_getReagentIdentifier_Base> Callback_Reagent_getReagentIdentifierPtr;

class Callback_Reagent_setReagentIdentifier_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_setReagentIdentifier_Base> Callback_Reagent_setReagentIdentifierPtr;

class Callback_Reagent_getScreen_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_getScreen_Base> Callback_Reagent_getScreenPtr;

class Callback_Reagent_setScreen_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_setScreen_Base> Callback_Reagent_setScreenPtr;

class Callback_Reagent_unloadWellLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_unloadWellLinks_Base> Callback_Reagent_unloadWellLinksPtr;

class Callback_Reagent_sizeOfWellLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_sizeOfWellLinks_Base> Callback_Reagent_sizeOfWellLinksPtr;

class Callback_Reagent_copyWellLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_copyWellLinks_Base> Callback_Reagent_copyWellLinksPtr;

class Callback_Reagent_addWellReagentLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_addWellReagentLink_Base> Callback_Reagent_addWellReagentLinkPtr;

class Callback_Reagent_addAllWellReagentLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_addAllWellReagentLinkSet_Base> Callback_Reagent_addAllWellReagentLinkSetPtr;

class Callback_Reagent_removeWellReagentLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_removeWellReagentLink_Base> Callback_Reagent_removeWellReagentLinkPtr;

class Callback_Reagent_removeAllWellReagentLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_removeAllWellReagentLinkSet_Base> Callback_Reagent_removeAllWellReagentLinkSetPtr;

class Callback_Reagent_clearWellLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_clearWellLinks_Base> Callback_Reagent_clearWellLinksPtr;

class Callback_Reagent_reloadWellLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_reloadWellLinks_Base> Callback_Reagent_reloadWellLinksPtr;

class Callback_Reagent_getWellLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_getWellLinksCountPerOwner_Base> Callback_Reagent_getWellLinksCountPerOwnerPtr;

class Callback_Reagent_linkWell_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_linkWell_Base> Callback_Reagent_linkWellPtr;

class Callback_Reagent_addWellReagentLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_addWellReagentLinkToBoth_Base> Callback_Reagent_addWellReagentLinkToBothPtr;

class Callback_Reagent_findWellReagentLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_findWellReagentLink_Base> Callback_Reagent_findWellReagentLinkPtr;

class Callback_Reagent_unlinkWell_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_unlinkWell_Base> Callback_Reagent_unlinkWellPtr;

class Callback_Reagent_removeWellReagentLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_removeWellReagentLinkFromBoth_Base> Callback_Reagent_removeWellReagentLinkFromBothPtr;

class Callback_Reagent_linkedWellList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_linkedWellList_Base> Callback_Reagent_linkedWellListPtr;

class Callback_Reagent_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_unloadAnnotationLinks_Base> Callback_Reagent_unloadAnnotationLinksPtr;

class Callback_Reagent_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_sizeOfAnnotationLinks_Base> Callback_Reagent_sizeOfAnnotationLinksPtr;

class Callback_Reagent_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_copyAnnotationLinks_Base> Callback_Reagent_copyAnnotationLinksPtr;

class Callback_Reagent_addReagentAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_addReagentAnnotationLink_Base> Callback_Reagent_addReagentAnnotationLinkPtr;

class Callback_Reagent_addAllReagentAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_addAllReagentAnnotationLinkSet_Base> Callback_Reagent_addAllReagentAnnotationLinkSetPtr;

class Callback_Reagent_removeReagentAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_removeReagentAnnotationLink_Base> Callback_Reagent_removeReagentAnnotationLinkPtr;

class Callback_Reagent_removeAllReagentAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_removeAllReagentAnnotationLinkSet_Base> Callback_Reagent_removeAllReagentAnnotationLinkSetPtr;

class Callback_Reagent_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_clearAnnotationLinks_Base> Callback_Reagent_clearAnnotationLinksPtr;

class Callback_Reagent_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_reloadAnnotationLinks_Base> Callback_Reagent_reloadAnnotationLinksPtr;

class Callback_Reagent_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_getAnnotationLinksCountPerOwner_Base> Callback_Reagent_getAnnotationLinksCountPerOwnerPtr;

class Callback_Reagent_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_linkAnnotation_Base> Callback_Reagent_linkAnnotationPtr;

class Callback_Reagent_addReagentAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_addReagentAnnotationLinkToBoth_Base> Callback_Reagent_addReagentAnnotationLinkToBothPtr;

class Callback_Reagent_findReagentAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_findReagentAnnotationLink_Base> Callback_Reagent_findReagentAnnotationLinkPtr;

class Callback_Reagent_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_unlinkAnnotation_Base> Callback_Reagent_unlinkAnnotationPtr;

class Callback_Reagent_removeReagentAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_removeReagentAnnotationLinkFromBoth_Base> Callback_Reagent_removeReagentAnnotationLinkFromBothPtr;

class Callback_Reagent_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_linkedAnnotationList_Base> Callback_Reagent_linkedAnnotationListPtr;

class Callback_Reagent_getDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_getDescription_Base> Callback_Reagent_getDescriptionPtr;

class Callback_Reagent_setDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Reagent_setDescription_Base> Callback_Reagent_setDescriptionPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Reagent : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Reagent_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Reagent_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getName()
    {
        return getName(0);
    }
    ::omero::RStringPtr getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::omero::model::Callback_Reagent_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setName(const ::omero::RStringPtr& theName)
    {
        setName(theName, 0);
    }
    void setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        setName(theName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName)
    {
        return begin_setName(theName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        return begin_setName(theName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::omero::model::Callback_Reagent_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    void end_setName(const ::Ice::AsyncResultPtr&);
    
private:

    void setName(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getReagentIdentifier()
    {
        return getReagentIdentifier(0);
    }
    ::omero::RStringPtr getReagentIdentifier(const ::Ice::Context& __ctx)
    {
        return getReagentIdentifier(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getReagentIdentifier()
    {
        return begin_getReagentIdentifier(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReagentIdentifier(const ::Ice::Context& __ctx)
    {
        return begin_getReagentIdentifier(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReagentIdentifier(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentIdentifier(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentIdentifier(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentIdentifier(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentIdentifier(const ::omero::model::Callback_Reagent_getReagentIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentIdentifier(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentIdentifier(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_getReagentIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentIdentifier(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getReagentIdentifier(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getReagentIdentifier(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getReagentIdentifier(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setReagentIdentifier(const ::omero::RStringPtr& theReagentIdentifier)
    {
        setReagentIdentifier(theReagentIdentifier, 0);
    }
    void setReagentIdentifier(const ::omero::RStringPtr& theReagentIdentifier, const ::Ice::Context& __ctx)
    {
        setReagentIdentifier(theReagentIdentifier, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setReagentIdentifier(const ::omero::RStringPtr& theReagentIdentifier)
    {
        return begin_setReagentIdentifier(theReagentIdentifier, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReagentIdentifier(const ::omero::RStringPtr& theReagentIdentifier, const ::Ice::Context& __ctx)
    {
        return begin_setReagentIdentifier(theReagentIdentifier, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReagentIdentifier(const ::omero::RStringPtr& theReagentIdentifier, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentIdentifier(theReagentIdentifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReagentIdentifier(const ::omero::RStringPtr& theReagentIdentifier, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentIdentifier(theReagentIdentifier, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReagentIdentifier(const ::omero::RStringPtr& theReagentIdentifier, const ::omero::model::Callback_Reagent_setReagentIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentIdentifier(theReagentIdentifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReagentIdentifier(const ::omero::RStringPtr& theReagentIdentifier, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_setReagentIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentIdentifier(theReagentIdentifier, &__ctx, __del, __cookie);
    }

    void end_setReagentIdentifier(const ::Ice::AsyncResultPtr&);
    
private:

    void setReagentIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setReagentIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ScreenPtr getScreen()
    {
        return getScreen(0);
    }
    ::omero::model::ScreenPtr getScreen(const ::Ice::Context& __ctx)
    {
        return getScreen(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getScreen()
    {
        return begin_getScreen(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScreen(const ::Ice::Context& __ctx)
    {
        return begin_getScreen(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScreen(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScreen(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScreen(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScreen(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScreen(const ::omero::model::Callback_Reagent_getScreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScreen(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScreen(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_getScreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScreen(&__ctx, __del, __cookie);
    }

    ::omero::model::ScreenPtr end_getScreen(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ScreenPtr getScreen(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getScreen(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setScreen(const ::omero::model::ScreenPtr& theScreen)
    {
        setScreen(theScreen, 0);
    }
    void setScreen(const ::omero::model::ScreenPtr& theScreen, const ::Ice::Context& __ctx)
    {
        setScreen(theScreen, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setScreen(const ::omero::model::ScreenPtr& theScreen)
    {
        return begin_setScreen(theScreen, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setScreen(const ::omero::model::ScreenPtr& theScreen, const ::Ice::Context& __ctx)
    {
        return begin_setScreen(theScreen, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setScreen(const ::omero::model::ScreenPtr& theScreen, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScreen(theScreen, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScreen(const ::omero::model::ScreenPtr& theScreen, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScreen(theScreen, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScreen(const ::omero::model::ScreenPtr& theScreen, const ::omero::model::Callback_Reagent_setScreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScreen(theScreen, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScreen(const ::omero::model::ScreenPtr& theScreen, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_setScreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScreen(theScreen, &__ctx, __del, __cookie);
    }

    void end_setScreen(const ::Ice::AsyncResultPtr&);
    
private:

    void setScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadWellLinks()
    {
        unloadWellLinks(0);
    }
    void unloadWellLinks(const ::Ice::Context& __ctx)
    {
        unloadWellLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadWellLinks()
    {
        return begin_unloadWellLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadWellLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadWellLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadWellLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellLinks(const ::omero::model::Callback_Reagent_unloadWellLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_unloadWellLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellLinks(&__ctx, __del, __cookie);
    }

    void end_unloadWellLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadWellLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadWellLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfWellLinks()
    {
        return sizeOfWellLinks(0);
    }
    ::Ice::Int sizeOfWellLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfWellLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellLinks()
    {
        return begin_sizeOfWellLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfWellLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellLinks(const ::omero::model::Callback_Reagent_sizeOfWellLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_sizeOfWellLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfWellLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfWellLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfWellLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ReagentWellLinksSeq copyWellLinks()
    {
        return copyWellLinks(0);
    }
    ::omero::model::ReagentWellLinksSeq copyWellLinks(const ::Ice::Context& __ctx)
    {
        return copyWellLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyWellLinks()
    {
        return begin_copyWellLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyWellLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyWellLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyWellLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellLinks(const ::omero::model::Callback_Reagent_copyWellLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_copyWellLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::ReagentWellLinksSeq end_copyWellLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ReagentWellLinksSeq copyWellLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyWellLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target)
    {
        addWellReagentLink(target, 0);
    }
    void addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addWellReagentLink(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target)
    {
        return begin_addWellReagentLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addWellReagentLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::omero::model::Callback_Reagent_addWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_addWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLink(target, &__ctx, __del, __cookie);
    }

    void end_addWellReagentLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets)
    {
        addAllWellReagentLinkSet(targets, 0);
    }
    void addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllWellReagentLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets)
    {
        return begin_addAllWellReagentLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllWellReagentLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellReagentLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellReagentLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::omero::model::Callback_Reagent_addAllWellReagentLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellReagentLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_addAllWellReagentLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellReagentLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllWellReagentLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget)
    {
        removeWellReagentLink(theTarget, 0);
    }
    void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeWellReagentLink(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget)
    {
        return begin_removeWellReagentLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeWellReagentLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::omero::model::Callback_Reagent_removeWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_removeWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeWellReagentLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets)
    {
        removeAllWellReagentLinkSet(targets, 0);
    }
    void removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllWellReagentLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets)
    {
        return begin_removeAllWellReagentLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllWellReagentLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellReagentLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellReagentLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::omero::model::Callback_Reagent_removeAllWellReagentLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellReagentLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_removeAllWellReagentLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellReagentLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllWellReagentLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearWellLinks()
    {
        clearWellLinks(0);
    }
    void clearWellLinks(const ::Ice::Context& __ctx)
    {
        clearWellLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearWellLinks()
    {
        return begin_clearWellLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearWellLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearWellLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearWellLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellLinks(const ::omero::model::Callback_Reagent_clearWellLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_clearWellLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellLinks(&__ctx, __del, __cookie);
    }

    void end_clearWellLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearWellLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearWellLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadWellLinks(const ::omero::model::ReagentPtr& toCopy)
    {
        reloadWellLinks(toCopy, 0);
    }
    void reloadWellLinks(const ::omero::model::ReagentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadWellLinks(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadWellLinks(const ::omero::model::ReagentPtr& toCopy)
    {
        return begin_reloadWellLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadWellLinks(const ::omero::model::ReagentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadWellLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadWellLinks(const ::omero::model::ReagentPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellLinks(const ::omero::model::ReagentPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellLinks(const ::omero::model::ReagentPtr& toCopy, const ::omero::model::Callback_Reagent_reloadWellLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellLinks(const ::omero::model::ReagentPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_reloadWellLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadWellLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadWellLinks(const ::omero::model::ReagentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadWellLinks(const ::omero::model::ReagentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getWellLinksCountPerOwner()
    {
        return getWellLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getWellLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getWellLinksCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getWellLinksCountPerOwner()
    {
        return begin_getWellLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWellLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getWellLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWellLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellLinksCountPerOwner(const ::omero::model::Callback_Reagent_getWellLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_getWellLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getWellLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getWellLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getWellLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellReagentLinkPtr linkWell(const ::omero::model::WellPtr& addition)
    {
        return linkWell(addition, 0);
    }
    ::omero::model::WellReagentLinkPtr linkWell(const ::omero::model::WellPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkWell(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkWell(const ::omero::model::WellPtr& addition)
    {
        return begin_linkWell(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkWell(const ::omero::model::WellPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkWell(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkWell(const ::omero::model::WellPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkWell(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkWell(const ::omero::model::WellPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkWell(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkWell(const ::omero::model::WellPtr& addition, const ::omero::model::Callback_Reagent_linkWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkWell(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkWell(const ::omero::model::WellPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_linkWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkWell(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::WellReagentLinkPtr end_linkWell(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellReagentLinkPtr linkWell(const ::omero::model::WellPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkWell(const ::omero::model::WellPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides)
    {
        addWellReagentLinkToBoth(link, bothSides, 0);
    }
    void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addWellReagentLinkToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::omero::model::Callback_Reagent_addWellReagentLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_addWellReagentLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addWellReagentLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ReagentWellLinksSeq findWellReagentLink(const ::omero::model::WellPtr& removal)
    {
        return findWellReagentLink(removal, 0);
    }
    ::omero::model::ReagentWellLinksSeq findWellReagentLink(const ::omero::model::WellPtr& removal, const ::Ice::Context& __ctx)
    {
        return findWellReagentLink(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::WellPtr& removal)
    {
        return begin_findWellReagentLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::WellPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findWellReagentLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::WellPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellReagentLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::WellPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellReagentLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::WellPtr& removal, const ::omero::model::Callback_Reagent_findWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellReagentLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::WellPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_findWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellReagentLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::ReagentWellLinksSeq end_findWellReagentLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ReagentWellLinksSeq findWellReagentLink(const ::omero::model::WellPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::WellPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkWell(const ::omero::model::WellPtr& removal)
    {
        unlinkWell(removal, 0);
    }
    void unlinkWell(const ::omero::model::WellPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkWell(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkWell(const ::omero::model::WellPtr& removal)
    {
        return begin_unlinkWell(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkWell(const ::omero::model::WellPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkWell(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkWell(const ::omero::model::WellPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkWell(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkWell(const ::omero::model::WellPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkWell(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkWell(const ::omero::model::WellPtr& removal, const ::omero::model::Callback_Reagent_unlinkWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkWell(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkWell(const ::omero::model::WellPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_unlinkWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkWell(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkWell(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkWell(const ::omero::model::WellPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkWell(const ::omero::model::WellPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides)
    {
        removeWellReagentLinkFromBoth(link, bothSides, 0);
    }
    void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeWellReagentLinkFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::omero::model::Callback_Reagent_removeWellReagentLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_removeWellReagentLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeWellReagentLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ReagentLinkedWellSeq linkedWellList()
    {
        return linkedWellList(0);
    }
    ::omero::model::ReagentLinkedWellSeq linkedWellList(const ::Ice::Context& __ctx)
    {
        return linkedWellList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedWellList()
    {
        return begin_linkedWellList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedWellList(const ::Ice::Context& __ctx)
    {
        return begin_linkedWellList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedWellList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedWellList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedWellList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedWellList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedWellList(const ::omero::model::Callback_Reagent_linkedWellListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedWellList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedWellList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_linkedWellListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedWellList(&__ctx, __del, __cookie);
    }

    ::omero::model::ReagentLinkedWellSeq end_linkedWellList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ReagentLinkedWellSeq linkedWellList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedWellList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_Reagent_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_Reagent_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ReagentAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::ReagentAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_Reagent_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::ReagentAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ReagentAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& target)
    {
        addReagentAnnotationLink(target, 0);
    }
    void addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addReagentAnnotationLink(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& target)
    {
        return begin_addReagentAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addReagentAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagentAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagentAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& target, const ::omero::model::Callback_Reagent_addReagentAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagentAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_addReagentAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagentAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addReagentAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets)
    {
        addAllReagentAnnotationLinkSet(targets, 0);
    }
    void addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllReagentAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets)
    {
        return begin_addAllReagentAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllReagentAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllReagentAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllReagentAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::omero::model::Callback_Reagent_addAllReagentAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllReagentAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_addAllReagentAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllReagentAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllReagentAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& theTarget)
    {
        removeReagentAnnotationLink(theTarget, 0);
    }
    void removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeReagentAnnotationLink(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& theTarget)
    {
        return begin_removeReagentAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeReagentAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagentAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagentAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& theTarget, const ::omero::model::Callback_Reagent_removeReagentAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagentAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_removeReagentAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagentAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeReagentAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets)
    {
        removeAllReagentAnnotationLinkSet(targets, 0);
    }
    void removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllReagentAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets)
    {
        return begin_removeAllReagentAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllReagentAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllReagentAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllReagentAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::omero::model::Callback_Reagent_removeAllReagentAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllReagentAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_removeAllReagentAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllReagentAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllReagentAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_Reagent_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::ReagentPtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::ReagentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ReagentPtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ReagentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ReagentPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ReagentPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ReagentPtr& toCopy, const ::omero::model::Callback_Reagent_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ReagentPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::ReagentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ReagentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_Reagent_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ReagentAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::ReagentAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_Reagent_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::ReagentAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ReagentAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides)
    {
        addReagentAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addReagentAnnotationLinkToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addReagentAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addReagentAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagentAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagentAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Reagent_addReagentAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagentAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_addReagentAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagentAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addReagentAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ReagentAnnotationLinksSeq findReagentAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findReagentAnnotationLink(removal, 0);
    }
    ::omero::model::ReagentAnnotationLinksSeq findReagentAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findReagentAnnotationLink(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findReagentAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findReagentAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findReagentAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findReagentAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findReagentAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findReagentAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findReagentAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findReagentAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findReagentAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Reagent_findReagentAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findReagentAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findReagentAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_findReagentAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findReagentAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::ReagentAnnotationLinksSeq end_findReagentAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ReagentAnnotationLinksSeq findReagentAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findReagentAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Reagent_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides)
    {
        removeReagentAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeReagentAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removeReagentAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeReagentAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagentAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagentAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Reagent_removeReagentAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagentAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_removeReagentAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagentAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeReagentAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ReagentLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::ReagentLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_Reagent_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::ReagentLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ReagentLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getDescription()
    {
        return getDescription(0);
    }
    ::omero::RStringPtr getDescription(const ::Ice::Context& __ctx)
    {
        return getDescription(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDescription()
    {
        return begin_getDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx)
    {
        return begin_getDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::omero::model::Callback_Reagent_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDescription(const ::omero::RStringPtr& theDescription)
    {
        setDescription(theDescription, 0);
    }
    void setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        setDescription(theDescription, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription)
    {
        return begin_setDescription(theDescription, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        return begin_setDescription(theDescription, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::omero::model::Callback_Reagent_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::omero::model::Callback_Reagent_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    void end_setDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Reagent> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Reagent> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Reagent*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Reagent*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Reagent : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getName(const ::Ice::Context*) = 0;

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getReagentIdentifier(const ::Ice::Context*) = 0;

    virtual void setReagentIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::ScreenPtr getScreen(const ::Ice::Context*) = 0;

    virtual void setScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*) = 0;

    virtual void unloadWellLinks(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfWellLinks(const ::Ice::Context*) = 0;

    virtual ::omero::model::ReagentWellLinksSeq copyWellLinks(const ::Ice::Context*) = 0;

    virtual void addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*) = 0;

    virtual void addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Context*) = 0;

    virtual void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Context*) = 0;

    virtual void clearWellLinks(const ::Ice::Context*) = 0;

    virtual void reloadWellLinks(const ::omero::model::ReagentPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getWellLinksCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::WellReagentLinkPtr linkWell(const ::omero::model::WellPtr&, const ::Ice::Context*) = 0;

    virtual void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ReagentWellLinksSeq findWellReagentLink(const ::omero::model::WellPtr&, const ::Ice::Context*) = 0;

    virtual void unlinkWell(const ::omero::model::WellPtr&, const ::Ice::Context*) = 0;

    virtual void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ReagentLinkedWellSeq linkedWellList(const ::Ice::Context*) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::omero::model::ReagentAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::ReagentPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::ReagentAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ReagentAnnotationLinksSeq findReagentAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ReagentLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*) = 0;

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Reagent : virtual public ::IceDelegate::omero::model::Reagent,
                virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getReagentIdentifier(const ::Ice::Context*);

    virtual void setReagentIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::model::ScreenPtr getScreen(const ::Ice::Context*);

    virtual void setScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*);

    virtual void unloadWellLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfWellLinks(const ::Ice::Context*);

    virtual ::omero::model::ReagentWellLinksSeq copyWellLinks(const ::Ice::Context*);

    virtual void addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);

    virtual void addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Context*);

    virtual void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);

    virtual void removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Context*);

    virtual void clearWellLinks(const ::Ice::Context*);

    virtual void reloadWellLinks(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getWellLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::WellReagentLinkPtr linkWell(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ReagentWellLinksSeq findWellReagentLink(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual void unlinkWell(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ReagentLinkedWellSeq linkedWellList(const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::ReagentAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::ReagentAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ReagentAnnotationLinksSeq findReagentAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ReagentLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Reagent : virtual public ::IceDelegate::omero::model::Reagent,
                virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getReagentIdentifier(const ::Ice::Context*);

    virtual void setReagentIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::model::ScreenPtr getScreen(const ::Ice::Context*);

    virtual void setScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*);

    virtual void unloadWellLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfWellLinks(const ::Ice::Context*);

    virtual ::omero::model::ReagentWellLinksSeq copyWellLinks(const ::Ice::Context*);

    virtual void addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);

    virtual void addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Context*);

    virtual void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);

    virtual void removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Context*);

    virtual void clearWellLinks(const ::Ice::Context*);

    virtual void reloadWellLinks(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getWellLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::WellReagentLinkPtr linkWell(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ReagentWellLinksSeq findWellReagentLink(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual void unlinkWell(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ReagentLinkedWellSeq linkedWellList(const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::ReagentAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::ReagentAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ReagentAnnotationLinksSeq findReagentAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ReagentLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class Reagent : public ::omero::model::IObject
{
public:

    typedef ReagentPrx ProxyType;
    typedef ReagentPtr PointerType;
    
    Reagent() {}
    Reagent(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::model::ScreenPtr&, const ::omero::model::ReagentWellLinksSeq&, bool, const ::omero::sys::CountMap&, const ::omero::model::ReagentAnnotationLinksSeq&, bool, const ::omero::sys::CountMap&, const ::omero::RStringPtr&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getReagentIdentifier(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getReagentIdentifier(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setReagentIdentifier(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setReagentIdentifier(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ScreenPtr getScreen(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getScreen(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setScreen(const ::omero::model::ScreenPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setScreen(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadWellLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadWellLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfWellLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfWellLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ReagentWellLinksSeq copyWellLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyWellLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWellReagentLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllWellReagentLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWellReagentLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllWellReagentLinkSet(const ::omero::model::ReagentWellLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllWellReagentLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearWellLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearWellLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadWellLinks(const ::omero::model::ReagentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadWellLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getWellLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getWellLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellReagentLinkPtr linkWell(const ::omero::model::WellPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkWell(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWellReagentLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ReagentWellLinksSeq findWellReagentLink(const ::omero::model::WellPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findWellReagentLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkWell(const ::omero::model::WellPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkWell(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWellReagentLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ReagentLinkedWellSeq linkedWellList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedWellList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ReagentAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addReagentAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllReagentAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeReagentAnnotationLink(const ::omero::model::ReagentAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeReagentAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllReagentAnnotationLinkSet(const ::omero::model::ReagentAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllReagentAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::ReagentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ReagentAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addReagentAnnotationLinkToBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addReagentAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ReagentAnnotationLinksSeq findReagentAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findReagentAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeReagentAnnotationLinkFromBoth(const ::omero::model::ReagentAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeReagentAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ReagentLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::RStringPtr name;

    ::omero::RStringPtr reagentIdentifier;

    ::omero::model::ScreenPtr screen;

    ::omero::model::ReagentWellLinksSeq wellLinksSeq;

    bool wellLinksLoaded;

    ::omero::sys::CountMap wellLinksCountPerOwner;

    ::omero::model::ReagentAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;

    ::omero::RStringPtr description;
};

inline bool operator==(const Reagent& l, const Reagent& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Reagent& l, const Reagent& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Reagent_getVersion : public Callback_Reagent_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Reagent_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_getVersionPtr
newCallback_Reagent_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_getVersionPtr
newCallback_Reagent_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_getVersion : public Callback_Reagent_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Reagent_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_getVersionPtr
newCallback_Reagent_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_getVersionPtr
newCallback_Reagent_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_setVersion : public Callback_Reagent_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_setVersionPtr
newCallback_Reagent_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_setVersionPtr
newCallback_Reagent_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_setVersionPtr
newCallback_Reagent_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_setVersionPtr
newCallback_Reagent_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_setVersion : public Callback_Reagent_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_setVersionPtr
newCallback_Reagent_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setVersionPtr
newCallback_Reagent_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setVersionPtr
newCallback_Reagent_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setVersionPtr
newCallback_Reagent_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_getName : public Callback_Reagent_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Reagent_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_getNamePtr
newCallback_Reagent_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_getNamePtr
newCallback_Reagent_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_getName : public Callback_Reagent_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Reagent_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_getNamePtr
newCallback_Reagent_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_getNamePtr
newCallback_Reagent_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_setName : public Callback_Reagent_setName_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_setNamePtr
newCallback_Reagent_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_setNamePtr
newCallback_Reagent_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_setNamePtr
newCallback_Reagent_setName(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_setNamePtr
newCallback_Reagent_setName(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_setName : public Callback_Reagent_setName_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_setNamePtr
newCallback_Reagent_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setNamePtr
newCallback_Reagent_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setNamePtr
newCallback_Reagent_setName(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setNamePtr
newCallback_Reagent_setName(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_getReagentIdentifier : public Callback_Reagent_getReagentIdentifier_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Reagent_getReagentIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getReagentIdentifier(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_getReagentIdentifierPtr
newCallback_Reagent_getReagentIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getReagentIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_getReagentIdentifierPtr
newCallback_Reagent_getReagentIdentifier(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getReagentIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_getReagentIdentifier : public Callback_Reagent_getReagentIdentifier_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Reagent_getReagentIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getReagentIdentifier(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_getReagentIdentifierPtr
newCallback_Reagent_getReagentIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getReagentIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_getReagentIdentifierPtr
newCallback_Reagent_getReagentIdentifier(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getReagentIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_setReagentIdentifier : public Callback_Reagent_setReagentIdentifier_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_setReagentIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_setReagentIdentifierPtr
newCallback_Reagent_setReagentIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setReagentIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_setReagentIdentifierPtr
newCallback_Reagent_setReagentIdentifier(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setReagentIdentifier<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_setReagentIdentifierPtr
newCallback_Reagent_setReagentIdentifier(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setReagentIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_setReagentIdentifierPtr
newCallback_Reagent_setReagentIdentifier(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setReagentIdentifier<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_setReagentIdentifier : public Callback_Reagent_setReagentIdentifier_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_setReagentIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_setReagentIdentifierPtr
newCallback_Reagent_setReagentIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setReagentIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setReagentIdentifierPtr
newCallback_Reagent_setReagentIdentifier(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setReagentIdentifier<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setReagentIdentifierPtr
newCallback_Reagent_setReagentIdentifier(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setReagentIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setReagentIdentifierPtr
newCallback_Reagent_setReagentIdentifier(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setReagentIdentifier<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_getScreen : public Callback_Reagent_getScreen_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ScreenPtr&);

    CallbackNC_Reagent_getScreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenPtr __ret;
        try
        {
            __ret = __proxy->end_getScreen(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_getScreenPtr
newCallback_Reagent_getScreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getScreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_getScreenPtr
newCallback_Reagent_getScreen(T* instance, void (T::*cb)(const ::omero::model::ScreenPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getScreen<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_getScreen : public Callback_Reagent_getScreen_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ScreenPtr&, const CT&);

    Callback_Reagent_getScreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenPtr __ret;
        try
        {
            __ret = __proxy->end_getScreen(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_getScreenPtr
newCallback_Reagent_getScreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getScreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_getScreenPtr
newCallback_Reagent_getScreen(T* instance, void (T::*cb)(const ::omero::model::ScreenPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getScreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_setScreen : public Callback_Reagent_setScreen_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_setScreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_setScreenPtr
newCallback_Reagent_setScreen(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setScreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_setScreenPtr
newCallback_Reagent_setScreen(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setScreen<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_setScreenPtr
newCallback_Reagent_setScreen(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setScreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_setScreenPtr
newCallback_Reagent_setScreen(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setScreen<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_setScreen : public Callback_Reagent_setScreen_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_setScreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_setScreenPtr
newCallback_Reagent_setScreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setScreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setScreenPtr
newCallback_Reagent_setScreen(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setScreen<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setScreenPtr
newCallback_Reagent_setScreen(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setScreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setScreenPtr
newCallback_Reagent_setScreen(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setScreen<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_unloadWellLinks : public Callback_Reagent_unloadWellLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_unloadWellLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_unloadWellLinksPtr
newCallback_Reagent_unloadWellLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unloadWellLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_unloadWellLinksPtr
newCallback_Reagent_unloadWellLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unloadWellLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_unloadWellLinksPtr
newCallback_Reagent_unloadWellLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unloadWellLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_unloadWellLinksPtr
newCallback_Reagent_unloadWellLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unloadWellLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_unloadWellLinks : public Callback_Reagent_unloadWellLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_unloadWellLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_unloadWellLinksPtr
newCallback_Reagent_unloadWellLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unloadWellLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unloadWellLinksPtr
newCallback_Reagent_unloadWellLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unloadWellLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unloadWellLinksPtr
newCallback_Reagent_unloadWellLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unloadWellLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unloadWellLinksPtr
newCallback_Reagent_unloadWellLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unloadWellLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_sizeOfWellLinks : public Callback_Reagent_sizeOfWellLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Reagent_sizeOfWellLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfWellLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_sizeOfWellLinksPtr
newCallback_Reagent_sizeOfWellLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_sizeOfWellLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_sizeOfWellLinksPtr
newCallback_Reagent_sizeOfWellLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_sizeOfWellLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_sizeOfWellLinks : public Callback_Reagent_sizeOfWellLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Reagent_sizeOfWellLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfWellLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_sizeOfWellLinksPtr
newCallback_Reagent_sizeOfWellLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_sizeOfWellLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_sizeOfWellLinksPtr
newCallback_Reagent_sizeOfWellLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_sizeOfWellLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_copyWellLinks : public Callback_Reagent_copyWellLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ReagentWellLinksSeq&);

    CallbackNC_Reagent_copyWellLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentWellLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyWellLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_copyWellLinksPtr
newCallback_Reagent_copyWellLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentWellLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_copyWellLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_copyWellLinksPtr
newCallback_Reagent_copyWellLinks(T* instance, void (T::*cb)(const ::omero::model::ReagentWellLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_copyWellLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_copyWellLinks : public Callback_Reagent_copyWellLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ReagentWellLinksSeq&, const CT&);

    Callback_Reagent_copyWellLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentWellLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyWellLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_copyWellLinksPtr
newCallback_Reagent_copyWellLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentWellLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_copyWellLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_copyWellLinksPtr
newCallback_Reagent_copyWellLinks(T* instance, void (T::*cb)(const ::omero::model::ReagentWellLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_copyWellLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_addWellReagentLink : public Callback_Reagent_addWellReagentLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_addWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_addWellReagentLinkPtr
newCallback_Reagent_addWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addWellReagentLinkPtr
newCallback_Reagent_addWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addWellReagentLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_addWellReagentLinkPtr
newCallback_Reagent_addWellReagentLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addWellReagentLinkPtr
newCallback_Reagent_addWellReagentLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addWellReagentLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_addWellReagentLink : public Callback_Reagent_addWellReagentLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_addWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_addWellReagentLinkPtr
newCallback_Reagent_addWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addWellReagentLinkPtr
newCallback_Reagent_addWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addWellReagentLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addWellReagentLinkPtr
newCallback_Reagent_addWellReagentLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addWellReagentLinkPtr
newCallback_Reagent_addWellReagentLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addWellReagentLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_addAllWellReagentLinkSet : public Callback_Reagent_addAllWellReagentLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_addAllWellReagentLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_addAllWellReagentLinkSetPtr
newCallback_Reagent_addAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addAllWellReagentLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addAllWellReagentLinkSetPtr
newCallback_Reagent_addAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addAllWellReagentLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_addAllWellReagentLinkSetPtr
newCallback_Reagent_addAllWellReagentLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addAllWellReagentLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addAllWellReagentLinkSetPtr
newCallback_Reagent_addAllWellReagentLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addAllWellReagentLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_addAllWellReagentLinkSet : public Callback_Reagent_addAllWellReagentLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_addAllWellReagentLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_addAllWellReagentLinkSetPtr
newCallback_Reagent_addAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addAllWellReagentLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addAllWellReagentLinkSetPtr
newCallback_Reagent_addAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addAllWellReagentLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addAllWellReagentLinkSetPtr
newCallback_Reagent_addAllWellReagentLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addAllWellReagentLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addAllWellReagentLinkSetPtr
newCallback_Reagent_addAllWellReagentLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addAllWellReagentLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_removeWellReagentLink : public Callback_Reagent_removeWellReagentLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_removeWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_removeWellReagentLinkPtr
newCallback_Reagent_removeWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeWellReagentLinkPtr
newCallback_Reagent_removeWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeWellReagentLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_removeWellReagentLinkPtr
newCallback_Reagent_removeWellReagentLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeWellReagentLinkPtr
newCallback_Reagent_removeWellReagentLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeWellReagentLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_removeWellReagentLink : public Callback_Reagent_removeWellReagentLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_removeWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_removeWellReagentLinkPtr
newCallback_Reagent_removeWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeWellReagentLinkPtr
newCallback_Reagent_removeWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeWellReagentLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeWellReagentLinkPtr
newCallback_Reagent_removeWellReagentLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeWellReagentLinkPtr
newCallback_Reagent_removeWellReagentLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeWellReagentLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_removeAllWellReagentLinkSet : public Callback_Reagent_removeAllWellReagentLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_removeAllWellReagentLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_removeAllWellReagentLinkSetPtr
newCallback_Reagent_removeAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeAllWellReagentLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeAllWellReagentLinkSetPtr
newCallback_Reagent_removeAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeAllWellReagentLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_removeAllWellReagentLinkSetPtr
newCallback_Reagent_removeAllWellReagentLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeAllWellReagentLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeAllWellReagentLinkSetPtr
newCallback_Reagent_removeAllWellReagentLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeAllWellReagentLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_removeAllWellReagentLinkSet : public Callback_Reagent_removeAllWellReagentLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_removeAllWellReagentLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_removeAllWellReagentLinkSetPtr
newCallback_Reagent_removeAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeAllWellReagentLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeAllWellReagentLinkSetPtr
newCallback_Reagent_removeAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeAllWellReagentLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeAllWellReagentLinkSetPtr
newCallback_Reagent_removeAllWellReagentLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeAllWellReagentLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeAllWellReagentLinkSetPtr
newCallback_Reagent_removeAllWellReagentLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeAllWellReagentLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_clearWellLinks : public Callback_Reagent_clearWellLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_clearWellLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_clearWellLinksPtr
newCallback_Reagent_clearWellLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_clearWellLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_clearWellLinksPtr
newCallback_Reagent_clearWellLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_clearWellLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_clearWellLinksPtr
newCallback_Reagent_clearWellLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_clearWellLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_clearWellLinksPtr
newCallback_Reagent_clearWellLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_clearWellLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_clearWellLinks : public Callback_Reagent_clearWellLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_clearWellLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_clearWellLinksPtr
newCallback_Reagent_clearWellLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_clearWellLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_clearWellLinksPtr
newCallback_Reagent_clearWellLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_clearWellLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_clearWellLinksPtr
newCallback_Reagent_clearWellLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_clearWellLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_clearWellLinksPtr
newCallback_Reagent_clearWellLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_clearWellLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_reloadWellLinks : public Callback_Reagent_reloadWellLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_reloadWellLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_reloadWellLinksPtr
newCallback_Reagent_reloadWellLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_reloadWellLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_reloadWellLinksPtr
newCallback_Reagent_reloadWellLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_reloadWellLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_reloadWellLinksPtr
newCallback_Reagent_reloadWellLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_reloadWellLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_reloadWellLinksPtr
newCallback_Reagent_reloadWellLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_reloadWellLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_reloadWellLinks : public Callback_Reagent_reloadWellLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_reloadWellLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_reloadWellLinksPtr
newCallback_Reagent_reloadWellLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_reloadWellLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_reloadWellLinksPtr
newCallback_Reagent_reloadWellLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_reloadWellLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_reloadWellLinksPtr
newCallback_Reagent_reloadWellLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_reloadWellLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_reloadWellLinksPtr
newCallback_Reagent_reloadWellLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_reloadWellLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_getWellLinksCountPerOwner : public Callback_Reagent_getWellLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Reagent_getWellLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getWellLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_getWellLinksCountPerOwnerPtr
newCallback_Reagent_getWellLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getWellLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_getWellLinksCountPerOwnerPtr
newCallback_Reagent_getWellLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getWellLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_getWellLinksCountPerOwner : public Callback_Reagent_getWellLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Reagent_getWellLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getWellLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_getWellLinksCountPerOwnerPtr
newCallback_Reagent_getWellLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getWellLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_getWellLinksCountPerOwnerPtr
newCallback_Reagent_getWellLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getWellLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_linkWell : public Callback_Reagent_linkWell_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellReagentLinkPtr&);

    CallbackNC_Reagent_linkWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellReagentLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkWell(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_linkWellPtr
newCallback_Reagent_linkWell(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellReagentLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_linkWell<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_linkWellPtr
newCallback_Reagent_linkWell(T* instance, void (T::*cb)(const ::omero::model::WellReagentLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_linkWell<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_linkWell : public Callback_Reagent_linkWell_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellReagentLinkPtr&, const CT&);

    Callback_Reagent_linkWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellReagentLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkWell(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_linkWellPtr
newCallback_Reagent_linkWell(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellReagentLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_linkWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_linkWellPtr
newCallback_Reagent_linkWell(T* instance, void (T::*cb)(const ::omero::model::WellReagentLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_linkWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_addWellReagentLinkToBoth : public Callback_Reagent_addWellReagentLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_addWellReagentLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_addWellReagentLinkToBothPtr
newCallback_Reagent_addWellReagentLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addWellReagentLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addWellReagentLinkToBothPtr
newCallback_Reagent_addWellReagentLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addWellReagentLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_addWellReagentLinkToBothPtr
newCallback_Reagent_addWellReagentLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addWellReagentLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addWellReagentLinkToBothPtr
newCallback_Reagent_addWellReagentLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addWellReagentLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_addWellReagentLinkToBoth : public Callback_Reagent_addWellReagentLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_addWellReagentLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_addWellReagentLinkToBothPtr
newCallback_Reagent_addWellReagentLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addWellReagentLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addWellReagentLinkToBothPtr
newCallback_Reagent_addWellReagentLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addWellReagentLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addWellReagentLinkToBothPtr
newCallback_Reagent_addWellReagentLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addWellReagentLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addWellReagentLinkToBothPtr
newCallback_Reagent_addWellReagentLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addWellReagentLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_findWellReagentLink : public Callback_Reagent_findWellReagentLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ReagentWellLinksSeq&);

    CallbackNC_Reagent_findWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentWellLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findWellReagentLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_findWellReagentLinkPtr
newCallback_Reagent_findWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentWellLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_findWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_findWellReagentLinkPtr
newCallback_Reagent_findWellReagentLink(T* instance, void (T::*cb)(const ::omero::model::ReagentWellLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_findWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_findWellReagentLink : public Callback_Reagent_findWellReagentLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ReagentWellLinksSeq&, const CT&);

    Callback_Reagent_findWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentWellLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findWellReagentLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_findWellReagentLinkPtr
newCallback_Reagent_findWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentWellLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_findWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_findWellReagentLinkPtr
newCallback_Reagent_findWellReagentLink(T* instance, void (T::*cb)(const ::omero::model::ReagentWellLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_findWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_unlinkWell : public Callback_Reagent_unlinkWell_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_unlinkWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_unlinkWellPtr
newCallback_Reagent_unlinkWell(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unlinkWell<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_unlinkWellPtr
newCallback_Reagent_unlinkWell(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unlinkWell<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_unlinkWellPtr
newCallback_Reagent_unlinkWell(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unlinkWell<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_unlinkWellPtr
newCallback_Reagent_unlinkWell(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unlinkWell<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_unlinkWell : public Callback_Reagent_unlinkWell_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_unlinkWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_unlinkWellPtr
newCallback_Reagent_unlinkWell(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unlinkWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unlinkWellPtr
newCallback_Reagent_unlinkWell(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unlinkWell<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unlinkWellPtr
newCallback_Reagent_unlinkWell(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unlinkWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unlinkWellPtr
newCallback_Reagent_unlinkWell(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unlinkWell<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_removeWellReagentLinkFromBoth : public Callback_Reagent_removeWellReagentLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_removeWellReagentLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_removeWellReagentLinkFromBothPtr
newCallback_Reagent_removeWellReagentLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeWellReagentLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeWellReagentLinkFromBothPtr
newCallback_Reagent_removeWellReagentLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeWellReagentLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_removeWellReagentLinkFromBothPtr
newCallback_Reagent_removeWellReagentLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeWellReagentLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeWellReagentLinkFromBothPtr
newCallback_Reagent_removeWellReagentLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeWellReagentLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_removeWellReagentLinkFromBoth : public Callback_Reagent_removeWellReagentLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_removeWellReagentLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_removeWellReagentLinkFromBothPtr
newCallback_Reagent_removeWellReagentLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeWellReagentLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeWellReagentLinkFromBothPtr
newCallback_Reagent_removeWellReagentLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeWellReagentLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeWellReagentLinkFromBothPtr
newCallback_Reagent_removeWellReagentLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeWellReagentLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeWellReagentLinkFromBothPtr
newCallback_Reagent_removeWellReagentLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeWellReagentLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_linkedWellList : public Callback_Reagent_linkedWellList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ReagentLinkedWellSeq&);

    CallbackNC_Reagent_linkedWellList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentLinkedWellSeq __ret;
        try
        {
            __ret = __proxy->end_linkedWellList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_linkedWellListPtr
newCallback_Reagent_linkedWellList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentLinkedWellSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_linkedWellList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_linkedWellListPtr
newCallback_Reagent_linkedWellList(T* instance, void (T::*cb)(const ::omero::model::ReagentLinkedWellSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_linkedWellList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_linkedWellList : public Callback_Reagent_linkedWellList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ReagentLinkedWellSeq&, const CT&);

    Callback_Reagent_linkedWellList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentLinkedWellSeq __ret;
        try
        {
            __ret = __proxy->end_linkedWellList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_linkedWellListPtr
newCallback_Reagent_linkedWellList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentLinkedWellSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_linkedWellList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_linkedWellListPtr
newCallback_Reagent_linkedWellList(T* instance, void (T::*cb)(const ::omero::model::ReagentLinkedWellSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_linkedWellList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_unloadAnnotationLinks : public Callback_Reagent_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_unloadAnnotationLinksPtr
newCallback_Reagent_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_unloadAnnotationLinksPtr
newCallback_Reagent_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_unloadAnnotationLinksPtr
newCallback_Reagent_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_unloadAnnotationLinksPtr
newCallback_Reagent_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_unloadAnnotationLinks : public Callback_Reagent_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_unloadAnnotationLinksPtr
newCallback_Reagent_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unloadAnnotationLinksPtr
newCallback_Reagent_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unloadAnnotationLinksPtr
newCallback_Reagent_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unloadAnnotationLinksPtr
newCallback_Reagent_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_sizeOfAnnotationLinks : public Callback_Reagent_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Reagent_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_sizeOfAnnotationLinksPtr
newCallback_Reagent_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_sizeOfAnnotationLinksPtr
newCallback_Reagent_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_sizeOfAnnotationLinks : public Callback_Reagent_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Reagent_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_sizeOfAnnotationLinksPtr
newCallback_Reagent_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_sizeOfAnnotationLinksPtr
newCallback_Reagent_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_copyAnnotationLinks : public Callback_Reagent_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ReagentAnnotationLinksSeq&);

    CallbackNC_Reagent_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_copyAnnotationLinksPtr
newCallback_Reagent_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_copyAnnotationLinksPtr
newCallback_Reagent_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_copyAnnotationLinks : public Callback_Reagent_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ReagentAnnotationLinksSeq&, const CT&);

    Callback_Reagent_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_copyAnnotationLinksPtr
newCallback_Reagent_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_copyAnnotationLinksPtr
newCallback_Reagent_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_addReagentAnnotationLink : public Callback_Reagent_addReagentAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_addReagentAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_addReagentAnnotationLinkPtr
newCallback_Reagent_addReagentAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addReagentAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addReagentAnnotationLinkPtr
newCallback_Reagent_addReagentAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addReagentAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_addReagentAnnotationLinkPtr
newCallback_Reagent_addReagentAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addReagentAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addReagentAnnotationLinkPtr
newCallback_Reagent_addReagentAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addReagentAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_addReagentAnnotationLink : public Callback_Reagent_addReagentAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_addReagentAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_addReagentAnnotationLinkPtr
newCallback_Reagent_addReagentAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addReagentAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addReagentAnnotationLinkPtr
newCallback_Reagent_addReagentAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addReagentAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addReagentAnnotationLinkPtr
newCallback_Reagent_addReagentAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addReagentAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addReagentAnnotationLinkPtr
newCallback_Reagent_addReagentAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addReagentAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_addAllReagentAnnotationLinkSet : public Callback_Reagent_addAllReagentAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_addAllReagentAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_addAllReagentAnnotationLinkSetPtr
newCallback_Reagent_addAllReagentAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addAllReagentAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addAllReagentAnnotationLinkSetPtr
newCallback_Reagent_addAllReagentAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addAllReagentAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_addAllReagentAnnotationLinkSetPtr
newCallback_Reagent_addAllReagentAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addAllReagentAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addAllReagentAnnotationLinkSetPtr
newCallback_Reagent_addAllReagentAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addAllReagentAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_addAllReagentAnnotationLinkSet : public Callback_Reagent_addAllReagentAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_addAllReagentAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_addAllReagentAnnotationLinkSetPtr
newCallback_Reagent_addAllReagentAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addAllReagentAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addAllReagentAnnotationLinkSetPtr
newCallback_Reagent_addAllReagentAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addAllReagentAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addAllReagentAnnotationLinkSetPtr
newCallback_Reagent_addAllReagentAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addAllReagentAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addAllReagentAnnotationLinkSetPtr
newCallback_Reagent_addAllReagentAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addAllReagentAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_removeReagentAnnotationLink : public Callback_Reagent_removeReagentAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_removeReagentAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_removeReagentAnnotationLinkPtr
newCallback_Reagent_removeReagentAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeReagentAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeReagentAnnotationLinkPtr
newCallback_Reagent_removeReagentAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeReagentAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_removeReagentAnnotationLinkPtr
newCallback_Reagent_removeReagentAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeReagentAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeReagentAnnotationLinkPtr
newCallback_Reagent_removeReagentAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeReagentAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_removeReagentAnnotationLink : public Callback_Reagent_removeReagentAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_removeReagentAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_removeReagentAnnotationLinkPtr
newCallback_Reagent_removeReagentAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeReagentAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeReagentAnnotationLinkPtr
newCallback_Reagent_removeReagentAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeReagentAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeReagentAnnotationLinkPtr
newCallback_Reagent_removeReagentAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeReagentAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeReagentAnnotationLinkPtr
newCallback_Reagent_removeReagentAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeReagentAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_removeAllReagentAnnotationLinkSet : public Callback_Reagent_removeAllReagentAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_removeAllReagentAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_removeAllReagentAnnotationLinkSetPtr
newCallback_Reagent_removeAllReagentAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeAllReagentAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeAllReagentAnnotationLinkSetPtr
newCallback_Reagent_removeAllReagentAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeAllReagentAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_removeAllReagentAnnotationLinkSetPtr
newCallback_Reagent_removeAllReagentAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeAllReagentAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeAllReagentAnnotationLinkSetPtr
newCallback_Reagent_removeAllReagentAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeAllReagentAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_removeAllReagentAnnotationLinkSet : public Callback_Reagent_removeAllReagentAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_removeAllReagentAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_removeAllReagentAnnotationLinkSetPtr
newCallback_Reagent_removeAllReagentAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeAllReagentAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeAllReagentAnnotationLinkSetPtr
newCallback_Reagent_removeAllReagentAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeAllReagentAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeAllReagentAnnotationLinkSetPtr
newCallback_Reagent_removeAllReagentAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeAllReagentAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeAllReagentAnnotationLinkSetPtr
newCallback_Reagent_removeAllReagentAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeAllReagentAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_clearAnnotationLinks : public Callback_Reagent_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_clearAnnotationLinksPtr
newCallback_Reagent_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_clearAnnotationLinksPtr
newCallback_Reagent_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_clearAnnotationLinksPtr
newCallback_Reagent_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_clearAnnotationLinksPtr
newCallback_Reagent_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_clearAnnotationLinks : public Callback_Reagent_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_clearAnnotationLinksPtr
newCallback_Reagent_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_clearAnnotationLinksPtr
newCallback_Reagent_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_clearAnnotationLinksPtr
newCallback_Reagent_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_clearAnnotationLinksPtr
newCallback_Reagent_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_reloadAnnotationLinks : public Callback_Reagent_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_reloadAnnotationLinksPtr
newCallback_Reagent_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_reloadAnnotationLinksPtr
newCallback_Reagent_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_reloadAnnotationLinksPtr
newCallback_Reagent_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_reloadAnnotationLinksPtr
newCallback_Reagent_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_reloadAnnotationLinks : public Callback_Reagent_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_reloadAnnotationLinksPtr
newCallback_Reagent_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_reloadAnnotationLinksPtr
newCallback_Reagent_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_reloadAnnotationLinksPtr
newCallback_Reagent_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_reloadAnnotationLinksPtr
newCallback_Reagent_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_getAnnotationLinksCountPerOwner : public Callback_Reagent_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Reagent_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_getAnnotationLinksCountPerOwnerPtr
newCallback_Reagent_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_getAnnotationLinksCountPerOwnerPtr
newCallback_Reagent_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_getAnnotationLinksCountPerOwner : public Callback_Reagent_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Reagent_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_getAnnotationLinksCountPerOwnerPtr
newCallback_Reagent_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_getAnnotationLinksCountPerOwnerPtr
newCallback_Reagent_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_linkAnnotation : public Callback_Reagent_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ReagentAnnotationLinkPtr&);

    CallbackNC_Reagent_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_linkAnnotationPtr
newCallback_Reagent_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_linkAnnotationPtr
newCallback_Reagent_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_linkAnnotation : public Callback_Reagent_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ReagentAnnotationLinkPtr&, const CT&);

    Callback_Reagent_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_linkAnnotationPtr
newCallback_Reagent_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_linkAnnotationPtr
newCallback_Reagent_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_addReagentAnnotationLinkToBoth : public Callback_Reagent_addReagentAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_addReagentAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_addReagentAnnotationLinkToBothPtr
newCallback_Reagent_addReagentAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addReagentAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addReagentAnnotationLinkToBothPtr
newCallback_Reagent_addReagentAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addReagentAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_addReagentAnnotationLinkToBothPtr
newCallback_Reagent_addReagentAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addReagentAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_addReagentAnnotationLinkToBothPtr
newCallback_Reagent_addReagentAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_addReagentAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_addReagentAnnotationLinkToBoth : public Callback_Reagent_addReagentAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_addReagentAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_addReagentAnnotationLinkToBothPtr
newCallback_Reagent_addReagentAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addReagentAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addReagentAnnotationLinkToBothPtr
newCallback_Reagent_addReagentAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addReagentAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addReagentAnnotationLinkToBothPtr
newCallback_Reagent_addReagentAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addReagentAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_addReagentAnnotationLinkToBothPtr
newCallback_Reagent_addReagentAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_addReagentAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_findReagentAnnotationLink : public Callback_Reagent_findReagentAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ReagentAnnotationLinksSeq&);

    CallbackNC_Reagent_findReagentAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findReagentAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_findReagentAnnotationLinkPtr
newCallback_Reagent_findReagentAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_findReagentAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_findReagentAnnotationLinkPtr
newCallback_Reagent_findReagentAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_findReagentAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_findReagentAnnotationLink : public Callback_Reagent_findReagentAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ReagentAnnotationLinksSeq&, const CT&);

    Callback_Reagent_findReagentAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findReagentAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_findReagentAnnotationLinkPtr
newCallback_Reagent_findReagentAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_findReagentAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_findReagentAnnotationLinkPtr
newCallback_Reagent_findReagentAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::ReagentAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_findReagentAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_unlinkAnnotation : public Callback_Reagent_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_unlinkAnnotationPtr
newCallback_Reagent_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_unlinkAnnotationPtr
newCallback_Reagent_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_unlinkAnnotationPtr
newCallback_Reagent_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_unlinkAnnotationPtr
newCallback_Reagent_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_unlinkAnnotation : public Callback_Reagent_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_unlinkAnnotationPtr
newCallback_Reagent_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unlinkAnnotationPtr
newCallback_Reagent_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unlinkAnnotationPtr
newCallback_Reagent_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_unlinkAnnotationPtr
newCallback_Reagent_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_removeReagentAnnotationLinkFromBoth : public Callback_Reagent_removeReagentAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_removeReagentAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_removeReagentAnnotationLinkFromBothPtr
newCallback_Reagent_removeReagentAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeReagentAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeReagentAnnotationLinkFromBothPtr
newCallback_Reagent_removeReagentAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeReagentAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_removeReagentAnnotationLinkFromBothPtr
newCallback_Reagent_removeReagentAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeReagentAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_removeReagentAnnotationLinkFromBothPtr
newCallback_Reagent_removeReagentAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_removeReagentAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_removeReagentAnnotationLinkFromBoth : public Callback_Reagent_removeReagentAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_removeReagentAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_removeReagentAnnotationLinkFromBothPtr
newCallback_Reagent_removeReagentAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeReagentAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeReagentAnnotationLinkFromBothPtr
newCallback_Reagent_removeReagentAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeReagentAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeReagentAnnotationLinkFromBothPtr
newCallback_Reagent_removeReagentAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeReagentAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_removeReagentAnnotationLinkFromBothPtr
newCallback_Reagent_removeReagentAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_removeReagentAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_linkedAnnotationList : public Callback_Reagent_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ReagentLinkedAnnotationSeq&);

    CallbackNC_Reagent_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_linkedAnnotationListPtr
newCallback_Reagent_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_linkedAnnotationListPtr
newCallback_Reagent_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::ReagentLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_linkedAnnotationList : public Callback_Reagent_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ReagentLinkedAnnotationSeq&, const CT&);

    Callback_Reagent_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ReagentLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_linkedAnnotationListPtr
newCallback_Reagent_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ReagentLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_linkedAnnotationListPtr
newCallback_Reagent_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::ReagentLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_getDescription : public Callback_Reagent_getDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Reagent_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Reagent_getDescriptionPtr
newCallback_Reagent_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_getDescriptionPtr
newCallback_Reagent_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_getDescription : public Callback_Reagent_getDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Reagent_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ReagentPrx __proxy = ::omero::model::ReagentPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Reagent_getDescriptionPtr
newCallback_Reagent_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_getDescriptionPtr
newCallback_Reagent_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Reagent_setDescription : public Callback_Reagent_setDescription_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Reagent_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Reagent_setDescriptionPtr
newCallback_Reagent_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_setDescriptionPtr
newCallback_Reagent_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Reagent_setDescriptionPtr
newCallback_Reagent_setDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Reagent_setDescriptionPtr
newCallback_Reagent_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Reagent_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Reagent_setDescription : public Callback_Reagent_setDescription_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Reagent_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Reagent_setDescriptionPtr
newCallback_Reagent_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setDescriptionPtr
newCallback_Reagent_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setDescriptionPtr
newCallback_Reagent_setDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Reagent_setDescriptionPtr
newCallback_Reagent_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Reagent_setDescription<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
