// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `LightEmittingDiode.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_LightEmittingDiode_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_LightEmittingDiode_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <omero/model/LightSource.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Instrument;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Instrument*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class LightEmittingDiode;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightEmittingDiode>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::LightEmittingDiode*);

}

}

}

namespace omero
{

namespace model
{

class Instrument;
bool operator==(const Instrument&, const Instrument&);
bool operator<(const Instrument&, const Instrument&);
::Ice::Object* upCast(::omero::model::Instrument*);
typedef ::IceInternal::Handle< ::omero::model::Instrument> InstrumentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument> InstrumentPrx;
void __patch(InstrumentPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class LightEmittingDiode;
bool operator==(const LightEmittingDiode&, const LightEmittingDiode&);
bool operator<(const LightEmittingDiode&, const LightEmittingDiode&);
::Ice::Object* upCast(::omero::model::LightEmittingDiode*);
typedef ::IceInternal::Handle< ::omero::model::LightEmittingDiode> LightEmittingDiodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightEmittingDiode> LightEmittingDiodePrx;
void __patch(LightEmittingDiodePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class LightEmittingDiode : virtual public ::IceProxy::omero::model::LightSource
{
public:
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_secure(bool __secure) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_twoway() const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_oneway() const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_batchOneway() const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_datagram() const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_batchDatagram() const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_compress(bool __compress) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_timeout(int __timeout) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LightEmittingDiode> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<LightEmittingDiode*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class LightEmittingDiode : virtual public ::IceDelegate::omero::model::LightSource
{
public:
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class LightEmittingDiode : virtual public ::IceDelegate::omero::model::LightEmittingDiode,
                           virtual public ::IceDelegateM::omero::model::LightSource
{
public:
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class LightEmittingDiode : virtual public ::IceDelegate::omero::model::LightEmittingDiode,
                           virtual public ::IceDelegateD::omero::model::LightSource
{
public:
};

}

}

}

namespace omero
{

namespace model
{

class LightEmittingDiode : public ::omero::model::LightSource
{
public:

    typedef LightEmittingDiodePrx ProxyType;
    typedef LightEmittingDiodePtr PointerType;

    LightEmittingDiode()
    {
    }

    LightEmittingDiode(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::RStringPtr& __ice_manufacturer, const ::omero::RStringPtr& __ice_model, const ::omero::RDoublePtr& __ice_power, const ::omero::RStringPtr& __ice_lotNumber, const ::omero::RStringPtr& __ice_serialNumber, const ::omero::model::InstrumentPtr& __ice_instrument) :
        ::omero::model::LightSource(__ice_id, __ice_details, __ice_loaded, __ice_version, __ice_manufacturer, __ice_model, __ice_power, __ice_lotNumber, __ice_serialNumber, __ice_instrument)
        
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::LightSource::__writeImpl;
    using ::omero::model::LightSource::__readImpl;
    #endif
};

inline bool operator==(const LightEmittingDiode& l, const LightEmittingDiode& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const LightEmittingDiode& l, const LightEmittingDiode& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

}

}

#endif
