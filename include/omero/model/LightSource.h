// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `LightSource.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_LightSource_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_LightSource_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Instrument;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Instrument*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class LightSource;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightSource>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::LightSource*);

}

}

}

namespace omero
{

namespace model
{

class Instrument;
bool operator==(const Instrument&, const Instrument&);
bool operator<(const Instrument&, const Instrument&);
::Ice::Object* upCast(::omero::model::Instrument*);
typedef ::IceInternal::Handle< ::omero::model::Instrument> InstrumentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument> InstrumentPrx;
void __patch(InstrumentPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class LightSource;
bool operator==(const LightSource&, const LightSource&);
bool operator<(const LightSource&, const LightSource&);
::Ice::Object* upCast(::omero::model::LightSource*);
typedef ::IceInternal::Handle< ::omero::model::LightSource> LightSourcePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightSource> LightSourcePrx;
void __patch(LightSourcePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_LightSource_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_getVersion_Base> Callback_LightSource_getVersionPtr;

class Callback_LightSource_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_setVersion_Base> Callback_LightSource_setVersionPtr;

class Callback_LightSource_getManufacturer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_getManufacturer_Base> Callback_LightSource_getManufacturerPtr;

class Callback_LightSource_setManufacturer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_setManufacturer_Base> Callback_LightSource_setManufacturerPtr;

class Callback_LightSource_getModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_getModel_Base> Callback_LightSource_getModelPtr;

class Callback_LightSource_setModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_setModel_Base> Callback_LightSource_setModelPtr;

class Callback_LightSource_getPower_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_getPower_Base> Callback_LightSource_getPowerPtr;

class Callback_LightSource_setPower_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_setPower_Base> Callback_LightSource_setPowerPtr;

class Callback_LightSource_getLotNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_getLotNumber_Base> Callback_LightSource_getLotNumberPtr;

class Callback_LightSource_setLotNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_setLotNumber_Base> Callback_LightSource_setLotNumberPtr;

class Callback_LightSource_getSerialNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_getSerialNumber_Base> Callback_LightSource_getSerialNumberPtr;

class Callback_LightSource_setSerialNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_setSerialNumber_Base> Callback_LightSource_setSerialNumberPtr;

class Callback_LightSource_getInstrument_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_getInstrument_Base> Callback_LightSource_getInstrumentPtr;

class Callback_LightSource_setInstrument_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightSource_setInstrument_Base> Callback_LightSource_setInstrumentPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class LightSource : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_LightSource_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_LightSource_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getManufacturer()
    {
        return getManufacturer(0);
    }
    ::omero::RStringPtr getManufacturer(const ::Ice::Context& __ctx)
    {
        return getManufacturer(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getManufacturer(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getManufacturer(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getManufacturer(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getManufacturer(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getManufacturer(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getManufacturer(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getManufacturer(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getManufacturer(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getManufacturer(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getManufacturer(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getManufacturer(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getManufacturer()
    {
        return begin_getManufacturer(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx)
    {
        return begin_getManufacturer(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::omero::model::Callback_LightSource_getManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_getManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getManufacturer(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getManufacturer(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setManufacturer(const ::omero::RStringPtr& theManufacturer)
    {
        setManufacturer(theManufacturer, 0);
    }
    void setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx)
    {
        setManufacturer(theManufacturer, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setManufacturer(theManufacturer, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setManufacturer(theManufacturer, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setManufacturer(theManufacturer, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setManufacturer(theManufacturer, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer)
    {
        return begin_setManufacturer(theManufacturer, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::omero::model::Callback_LightSource_setManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_setManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, __del, __cookie);
    }

    void end_setManufacturer(const ::Ice::AsyncResultPtr&);
    
private:

    void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getModel()
    {
        return getModel(0);
    }
    ::omero::RStringPtr getModel(const ::Ice::Context& __ctx)
    {
        return getModel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getModel(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getModel(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getModel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getModel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getModel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getModel(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getModel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getModel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getModel(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getModel(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getModel(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getModel()
    {
        return begin_getModel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx)
    {
        return begin_getModel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::omero::model::Callback_LightSource_getModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_getModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getModel(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getModel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setModel(const ::omero::RStringPtr& theModel)
    {
        setModel(theModel, 0);
    }
    void setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx)
    {
        setModel(theModel, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setModel(const ::omero::RStringPtr& theModel, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setModel(theModel, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setModel(const ::omero::RStringPtr& theModel, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setModel(theModel, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setModel(theModel, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setModel(theModel, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel)
    {
        return begin_setModel(theModel, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx)
    {
        return begin_setModel(theModel, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::omero::model::Callback_LightSource_setModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_setModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, &__ctx, __del, __cookie);
    }

    void end_setModel(const ::Ice::AsyncResultPtr&);
    
private:

    void setModel(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getPower()
    {
        return getPower(0);
    }
    ::omero::RDoublePtr getPower(const ::Ice::Context& __ctx)
    {
        return getPower(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPower(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPower(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPower(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPower(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPower(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPower(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPower(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPower(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPower(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getPower(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getPower(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPower()
    {
        return begin_getPower(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPower(const ::Ice::Context& __ctx)
    {
        return begin_getPower(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPower(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPower(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPower(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPower(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPower(const ::omero::model::Callback_LightSource_getPowerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPower(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPower(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_getPowerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPower(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getPower(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getPower(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPower(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPower(const ::omero::RDoublePtr& thePower)
    {
        setPower(thePower, 0);
    }
    void setPower(const ::omero::RDoublePtr& thePower, const ::Ice::Context& __ctx)
    {
        setPower(thePower, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPower(const ::omero::RDoublePtr& thePower, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPower(thePower, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPower(const ::omero::RDoublePtr& thePower, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPower(thePower, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPower(const ::omero::RDoublePtr& thePower, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPower(thePower, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPower(const ::omero::RDoublePtr& thePower, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPower(thePower, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPower(const ::omero::RDoublePtr& thePower)
    {
        return begin_setPower(thePower, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPower(const ::omero::RDoublePtr& thePower, const ::Ice::Context& __ctx)
    {
        return begin_setPower(thePower, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPower(const ::omero::RDoublePtr& thePower, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPower(thePower, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPower(const ::omero::RDoublePtr& thePower, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPower(thePower, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPower(const ::omero::RDoublePtr& thePower, const ::omero::model::Callback_LightSource_setPowerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPower(thePower, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPower(const ::omero::RDoublePtr& thePower, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_setPowerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPower(thePower, &__ctx, __del, __cookie);
    }

    void end_setPower(const ::Ice::AsyncResultPtr&);
    
private:

    void setPower(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPower(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getLotNumber()
    {
        return getLotNumber(0);
    }
    ::omero::RStringPtr getLotNumber(const ::Ice::Context& __ctx)
    {
        return getLotNumber(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLotNumber(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLotNumber(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLotNumber(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLotNumber(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLotNumber(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLotNumber(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLotNumber(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLotNumber(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLotNumber(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getLotNumber(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getLotNumber(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLotNumber()
    {
        return begin_getLotNumber(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx)
    {
        return begin_getLotNumber(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::omero::model::Callback_LightSource_getLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_getLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getLotNumber(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getLotNumber(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setLotNumber(const ::omero::RStringPtr& theLotNumber)
    {
        setLotNumber(theLotNumber, 0);
    }
    void setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx)
    {
        setLotNumber(theLotNumber, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setLotNumber(theLotNumber, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setLotNumber(theLotNumber, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setLotNumber(theLotNumber, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setLotNumber(theLotNumber, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber)
    {
        return begin_setLotNumber(theLotNumber, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::omero::model::Callback_LightSource_setLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_setLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, __del, __cookie);
    }

    void end_setLotNumber(const ::Ice::AsyncResultPtr&);
    
private:

    void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getSerialNumber()
    {
        return getSerialNumber(0);
    }
    ::omero::RStringPtr getSerialNumber(const ::Ice::Context& __ctx)
    {
        return getSerialNumber(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSerialNumber(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSerialNumber(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSerialNumber(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSerialNumber(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSerialNumber(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSerialNumber(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSerialNumber(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSerialNumber(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSerialNumber(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getSerialNumber(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getSerialNumber(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSerialNumber()
    {
        return begin_getSerialNumber(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx)
    {
        return begin_getSerialNumber(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::omero::model::Callback_LightSource_getSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_getSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getSerialNumber(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getSerialNumber(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSerialNumber(const ::omero::RStringPtr& theSerialNumber)
    {
        setSerialNumber(theSerialNumber, 0);
    }
    void setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx)
    {
        setSerialNumber(theSerialNumber, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSerialNumber(theSerialNumber, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSerialNumber(theSerialNumber, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber)
    {
        return begin_setSerialNumber(theSerialNumber, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::omero::model::Callback_LightSource_setSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_setSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, __del, __cookie);
    }

    void end_setSerialNumber(const ::Ice::AsyncResultPtr&);
    
private:

    void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentPtr getInstrument()
    {
        return getInstrument(0);
    }
    ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context& __ctx)
    {
        return getInstrument(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInstrument(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInstrument(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInstrument(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInstrument(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getInstrument(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::InstrumentPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
                ::omero::model::InstrumentPtr __ret;
                try
                {
                    __ret = __proxy->end_getInstrument(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::InstrumentPtr&)> _response;
        };
        return begin_getInstrument(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getInstrument()
    {
        return begin_getInstrument(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx)
    {
        return begin_getInstrument(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::omero::model::Callback_LightSource_getInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_getInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentPtr end_getInstrument(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setInstrument(const ::omero::model::InstrumentPtr& theInstrument)
    {
        setInstrument(theInstrument, 0);
    }
    void setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx)
    {
        setInstrument(theInstrument, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInstrument(theInstrument, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInstrument(theInstrument, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInstrument(theInstrument, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInstrument(theInstrument, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument)
    {
        return begin_setInstrument(theInstrument, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx)
    {
        return begin_setInstrument(theInstrument, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::omero::model::Callback_LightSource_setInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightSource_setInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, &__ctx, __del, __cookie);
    }

    void end_setInstrument(const ::Ice::AsyncResultPtr&);
    
private:

    void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<LightSource> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_secure(bool __secure) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_twoway() const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_oneway() const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_batchOneway() const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_datagram() const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_batchDatagram() const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_compress(bool __compress) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_timeout(int __timeout) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LightSource> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<LightSource*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class LightSource : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getPower(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPower(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class LightSource : virtual public ::IceDelegate::omero::model::LightSource,
                    virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getPower(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPower(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class LightSource : virtual public ::IceDelegate::omero::model::LightSource,
                    virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getPower(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPower(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class LightSource : public ::omero::model::IObject
{
public:

    typedef LightSourcePrx ProxyType;
    typedef LightSourcePtr PointerType;

    LightSource()
    {
    }

    LightSource(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::RStringPtr& __ice_manufacturer, const ::omero::RStringPtr& __ice_model, const ::omero::RDoublePtr& __ice_power, const ::omero::RStringPtr& __ice_lotNumber, const ::omero::RStringPtr& __ice_serialNumber, const ::omero::model::InstrumentPtr& __ice_instrument) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        manufacturer(__ice_manufacturer),
        model(__ice_model),
        power(__ice_power),
        lotNumber(__ice_lotNumber),
        serialNumber(__ice_serialNumber),
        instrument(__ice_instrument)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getManufacturer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setManufacturer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getModel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getPower(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPower(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPower(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPower(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLotNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setLotNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSerialNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSerialNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getInstrument(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInstrument(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::RStringPtr manufacturer;

    ::omero::RStringPtr model;

    ::omero::RDoublePtr power;

    ::omero::RStringPtr lotNumber;

    ::omero::RStringPtr serialNumber;

    ::omero::model::InstrumentPtr instrument;
};

inline bool operator==(const LightSource& l, const LightSource& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const LightSource& l, const LightSource& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_LightSource_getVersion : public Callback_LightSource_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_LightSource_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightSource_getVersionPtr
newCallback_LightSource_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_getVersionPtr
newCallback_LightSource_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_getVersion : public Callback_LightSource_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_LightSource_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightSource_getVersionPtr
newCallback_LightSource_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_getVersionPtr
newCallback_LightSource_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_setVersion : public Callback_LightSource_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightSource_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightSource_setVersionPtr
newCallback_LightSource_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setVersionPtr
newCallback_LightSource_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightSource_setVersionPtr
newCallback_LightSource_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setVersionPtr
newCallback_LightSource_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_setVersion : public Callback_LightSource_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightSource_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightSource_setVersionPtr
newCallback_LightSource_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setVersionPtr
newCallback_LightSource_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setVersionPtr
newCallback_LightSource_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setVersionPtr
newCallback_LightSource_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_getManufacturer : public Callback_LightSource_getManufacturer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_LightSource_getManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getManufacturer(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightSource_getManufacturerPtr
newCallback_LightSource_getManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_getManufacturerPtr
newCallback_LightSource_getManufacturer(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_getManufacturer : public Callback_LightSource_getManufacturer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_LightSource_getManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getManufacturer(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightSource_getManufacturerPtr
newCallback_LightSource_getManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_getManufacturerPtr
newCallback_LightSource_getManufacturer(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_setManufacturer : public Callback_LightSource_setManufacturer_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightSource_setManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightSource_setManufacturerPtr
newCallback_LightSource_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setManufacturerPtr
newCallback_LightSource_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setManufacturer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightSource_setManufacturerPtr
newCallback_LightSource_setManufacturer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setManufacturerPtr
newCallback_LightSource_setManufacturer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setManufacturer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_setManufacturer : public Callback_LightSource_setManufacturer_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightSource_setManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightSource_setManufacturerPtr
newCallback_LightSource_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setManufacturerPtr
newCallback_LightSource_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setManufacturer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setManufacturerPtr
newCallback_LightSource_setManufacturer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setManufacturerPtr
newCallback_LightSource_setManufacturer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setManufacturer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_getModel : public Callback_LightSource_getModel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_LightSource_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getModel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightSource_getModelPtr
newCallback_LightSource_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_getModelPtr
newCallback_LightSource_getModel(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getModel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_getModel : public Callback_LightSource_getModel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_LightSource_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getModel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightSource_getModelPtr
newCallback_LightSource_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_getModelPtr
newCallback_LightSource_getModel(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_setModel : public Callback_LightSource_setModel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightSource_setModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightSource_setModelPtr
newCallback_LightSource_setModel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setModelPtr
newCallback_LightSource_setModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setModel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightSource_setModelPtr
newCallback_LightSource_setModel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setModelPtr
newCallback_LightSource_setModel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setModel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_setModel : public Callback_LightSource_setModel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightSource_setModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightSource_setModelPtr
newCallback_LightSource_setModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setModelPtr
newCallback_LightSource_setModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setModelPtr
newCallback_LightSource_setModel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setModelPtr
newCallback_LightSource_setModel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_getPower : public Callback_LightSource_getPower_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_LightSource_getPower(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPower(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightSource_getPowerPtr
newCallback_LightSource_getPower(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getPower<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_getPowerPtr
newCallback_LightSource_getPower(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getPower<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_getPower : public Callback_LightSource_getPower_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_LightSource_getPower(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPower(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightSource_getPowerPtr
newCallback_LightSource_getPower(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getPower<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_getPowerPtr
newCallback_LightSource_getPower(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getPower<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_setPower : public Callback_LightSource_setPower_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightSource_setPower(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightSource_setPowerPtr
newCallback_LightSource_setPower(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setPower<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setPowerPtr
newCallback_LightSource_setPower(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setPower<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightSource_setPowerPtr
newCallback_LightSource_setPower(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setPower<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setPowerPtr
newCallback_LightSource_setPower(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setPower<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_setPower : public Callback_LightSource_setPower_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightSource_setPower(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightSource_setPowerPtr
newCallback_LightSource_setPower(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setPower<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setPowerPtr
newCallback_LightSource_setPower(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setPower<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setPowerPtr
newCallback_LightSource_setPower(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setPower<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setPowerPtr
newCallback_LightSource_setPower(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setPower<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_getLotNumber : public Callback_LightSource_getLotNumber_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_LightSource_getLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getLotNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightSource_getLotNumberPtr
newCallback_LightSource_getLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_getLotNumberPtr
newCallback_LightSource_getLotNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_getLotNumber : public Callback_LightSource_getLotNumber_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_LightSource_getLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getLotNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightSource_getLotNumberPtr
newCallback_LightSource_getLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_getLotNumberPtr
newCallback_LightSource_getLotNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_setLotNumber : public Callback_LightSource_setLotNumber_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightSource_setLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightSource_setLotNumberPtr
newCallback_LightSource_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setLotNumberPtr
newCallback_LightSource_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setLotNumber<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightSource_setLotNumberPtr
newCallback_LightSource_setLotNumber(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setLotNumberPtr
newCallback_LightSource_setLotNumber(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setLotNumber<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_setLotNumber : public Callback_LightSource_setLotNumber_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightSource_setLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightSource_setLotNumberPtr
newCallback_LightSource_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setLotNumberPtr
newCallback_LightSource_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setLotNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setLotNumberPtr
newCallback_LightSource_setLotNumber(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setLotNumberPtr
newCallback_LightSource_setLotNumber(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setLotNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_getSerialNumber : public Callback_LightSource_getSerialNumber_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_LightSource_getSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getSerialNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightSource_getSerialNumberPtr
newCallback_LightSource_getSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_getSerialNumberPtr
newCallback_LightSource_getSerialNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_getSerialNumber : public Callback_LightSource_getSerialNumber_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_LightSource_getSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getSerialNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightSource_getSerialNumberPtr
newCallback_LightSource_getSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_getSerialNumberPtr
newCallback_LightSource_getSerialNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_setSerialNumber : public Callback_LightSource_setSerialNumber_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightSource_setSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightSource_setSerialNumberPtr
newCallback_LightSource_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setSerialNumberPtr
newCallback_LightSource_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setSerialNumber<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightSource_setSerialNumberPtr
newCallback_LightSource_setSerialNumber(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setSerialNumberPtr
newCallback_LightSource_setSerialNumber(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setSerialNumber<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_setSerialNumber : public Callback_LightSource_setSerialNumber_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightSource_setSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightSource_setSerialNumberPtr
newCallback_LightSource_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setSerialNumberPtr
newCallback_LightSource_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setSerialNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setSerialNumberPtr
newCallback_LightSource_setSerialNumber(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setSerialNumberPtr
newCallback_LightSource_setSerialNumber(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setSerialNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_getInstrument : public Callback_LightSource_getInstrument_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&);

    CallbackNC_LightSource_getInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_getInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightSource_getInstrumentPtr
newCallback_LightSource_getInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_getInstrumentPtr
newCallback_LightSource_getInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_getInstrument<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_getInstrument : public Callback_LightSource_getInstrument_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&, const CT&);

    Callback_LightSource_getInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightSourcePrx __proxy = ::omero::model::LightSourcePrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_getInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightSource_getInstrumentPtr
newCallback_LightSource_getInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_getInstrumentPtr
newCallback_LightSource_getInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_getInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightSource_setInstrument : public Callback_LightSource_setInstrument_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightSource_setInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightSource_setInstrumentPtr
newCallback_LightSource_setInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setInstrumentPtr
newCallback_LightSource_setInstrument(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setInstrument<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightSource_setInstrumentPtr
newCallback_LightSource_setInstrument(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightSource_setInstrumentPtr
newCallback_LightSource_setInstrument(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightSource_setInstrument<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightSource_setInstrument : public Callback_LightSource_setInstrument_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightSource_setInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightSource_setInstrumentPtr
newCallback_LightSource_setInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setInstrumentPtr
newCallback_LightSource_setInstrument(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setInstrument<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setInstrumentPtr
newCallback_LightSource_setInstrument(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightSource_setInstrumentPtr
newCallback_LightSource_setInstrument(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightSource_setInstrument<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
