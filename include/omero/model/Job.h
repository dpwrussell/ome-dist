// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Job.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Job_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Job_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class JobStatus;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::JobStatus>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::JobStatus*);

class JobOriginalFileLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::JobOriginalFileLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::JobOriginalFileLink*);

class OriginalFile;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OriginalFile>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::OriginalFile*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class Job;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Job>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Job*);

}

}

}

namespace omero
{

namespace model
{

class JobStatus;
bool operator==(const JobStatus&, const JobStatus&);
bool operator<(const JobStatus&, const JobStatus&);
::Ice::Object* upCast(::omero::model::JobStatus*);
typedef ::IceInternal::Handle< ::omero::model::JobStatus> JobStatusPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::JobStatus> JobStatusPrx;
void __patch(JobStatusPtr&, const ::Ice::ObjectPtr&);

class JobOriginalFileLink;
bool operator==(const JobOriginalFileLink&, const JobOriginalFileLink&);
bool operator<(const JobOriginalFileLink&, const JobOriginalFileLink&);
::Ice::Object* upCast(::omero::model::JobOriginalFileLink*);
typedef ::IceInternal::Handle< ::omero::model::JobOriginalFileLink> JobOriginalFileLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::JobOriginalFileLink> JobOriginalFileLinkPrx;
void __patch(JobOriginalFileLinkPtr&, const ::Ice::ObjectPtr&);

class OriginalFile;
bool operator==(const OriginalFile&, const OriginalFile&);
bool operator<(const OriginalFile&, const OriginalFile&);
::Ice::Object* upCast(::omero::model::OriginalFile*);
typedef ::IceInternal::Handle< ::omero::model::OriginalFile> OriginalFilePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OriginalFile> OriginalFilePrx;
void __patch(OriginalFilePtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class Job;
bool operator==(const Job&, const Job&);
bool operator<(const Job&, const Job&);
::Ice::Object* upCast(::omero::model::Job*);
typedef ::IceInternal::Handle< ::omero::model::Job> JobPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Job> JobPrx;
void __patch(JobPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::JobOriginalFileLinkPtr> JobOriginalFileLinksSeq;

typedef ::std::vector< ::omero::model::OriginalFilePtr> JobLinkedOriginalFileSeq;

}

}

namespace omero
{

namespace model
{

class Callback_Job_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_getVersion_Base> Callback_Job_getVersionPtr;

class Callback_Job_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_setVersion_Base> Callback_Job_setVersionPtr;

class Callback_Job_getUsername_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_getUsername_Base> Callback_Job_getUsernamePtr;

class Callback_Job_setUsername_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_setUsername_Base> Callback_Job_setUsernamePtr;

class Callback_Job_getGroupname_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_getGroupname_Base> Callback_Job_getGroupnamePtr;

class Callback_Job_setGroupname_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_setGroupname_Base> Callback_Job_setGroupnamePtr;

class Callback_Job_getType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_getType_Base> Callback_Job_getTypePtr;

class Callback_Job_setType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_setType_Base> Callback_Job_setTypePtr;

class Callback_Job_getMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_getMessage_Base> Callback_Job_getMessagePtr;

class Callback_Job_setMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_setMessage_Base> Callback_Job_setMessagePtr;

class Callback_Job_getStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_getStatus_Base> Callback_Job_getStatusPtr;

class Callback_Job_setStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_setStatus_Base> Callback_Job_setStatusPtr;

class Callback_Job_getSubmitted_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_getSubmitted_Base> Callback_Job_getSubmittedPtr;

class Callback_Job_setSubmitted_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_setSubmitted_Base> Callback_Job_setSubmittedPtr;

class Callback_Job_getScheduledFor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_getScheduledFor_Base> Callback_Job_getScheduledForPtr;

class Callback_Job_setScheduledFor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_setScheduledFor_Base> Callback_Job_setScheduledForPtr;

class Callback_Job_getStarted_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_getStarted_Base> Callback_Job_getStartedPtr;

class Callback_Job_setStarted_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_setStarted_Base> Callback_Job_setStartedPtr;

class Callback_Job_getFinished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_getFinished_Base> Callback_Job_getFinishedPtr;

class Callback_Job_setFinished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_setFinished_Base> Callback_Job_setFinishedPtr;

class Callback_Job_unloadOriginalFileLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_unloadOriginalFileLinks_Base> Callback_Job_unloadOriginalFileLinksPtr;

class Callback_Job_sizeOfOriginalFileLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_sizeOfOriginalFileLinks_Base> Callback_Job_sizeOfOriginalFileLinksPtr;

class Callback_Job_copyOriginalFileLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_copyOriginalFileLinks_Base> Callback_Job_copyOriginalFileLinksPtr;

class Callback_Job_addJobOriginalFileLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_addJobOriginalFileLink_Base> Callback_Job_addJobOriginalFileLinkPtr;

class Callback_Job_addAllJobOriginalFileLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_addAllJobOriginalFileLinkSet_Base> Callback_Job_addAllJobOriginalFileLinkSetPtr;

class Callback_Job_removeJobOriginalFileLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_removeJobOriginalFileLink_Base> Callback_Job_removeJobOriginalFileLinkPtr;

class Callback_Job_removeAllJobOriginalFileLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_removeAllJobOriginalFileLinkSet_Base> Callback_Job_removeAllJobOriginalFileLinkSetPtr;

class Callback_Job_clearOriginalFileLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_clearOriginalFileLinks_Base> Callback_Job_clearOriginalFileLinksPtr;

class Callback_Job_reloadOriginalFileLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_reloadOriginalFileLinks_Base> Callback_Job_reloadOriginalFileLinksPtr;

class Callback_Job_getOriginalFileLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_getOriginalFileLinksCountPerOwner_Base> Callback_Job_getOriginalFileLinksCountPerOwnerPtr;

class Callback_Job_linkOriginalFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_linkOriginalFile_Base> Callback_Job_linkOriginalFilePtr;

class Callback_Job_addJobOriginalFileLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_addJobOriginalFileLinkToBoth_Base> Callback_Job_addJobOriginalFileLinkToBothPtr;

class Callback_Job_findJobOriginalFileLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_findJobOriginalFileLink_Base> Callback_Job_findJobOriginalFileLinkPtr;

class Callback_Job_unlinkOriginalFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_unlinkOriginalFile_Base> Callback_Job_unlinkOriginalFilePtr;

class Callback_Job_removeJobOriginalFileLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_removeJobOriginalFileLinkFromBoth_Base> Callback_Job_removeJobOriginalFileLinkFromBothPtr;

class Callback_Job_linkedOriginalFileList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Job_linkedOriginalFileList_Base> Callback_Job_linkedOriginalFileListPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Job : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Job_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Job_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getUsername()
    {
        return getUsername(0);
    }
    ::omero::RStringPtr getUsername(const ::Ice::Context& __ctx)
    {
        return getUsername(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getUsername(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUsername(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUsername(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUsername(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getUsername(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUsername(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUsername(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUsername(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getUsername(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getUsername(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getUsername(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getUsername()
    {
        return begin_getUsername(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUsername(const ::Ice::Context& __ctx)
    {
        return begin_getUsername(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUsername(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUsername(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsername(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUsername(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsername(const ::omero::model::Callback_Job_getUsernamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUsername(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsername(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_getUsernamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUsername(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getUsername(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getUsername(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getUsername(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setUsername(const ::omero::RStringPtr& theUsername)
    {
        setUsername(theUsername, 0);
    }
    void setUsername(const ::omero::RStringPtr& theUsername, const ::Ice::Context& __ctx)
    {
        setUsername(theUsername, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setUsername(const ::omero::RStringPtr& theUsername, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUsername(theUsername, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setUsername(const ::omero::RStringPtr& theUsername, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUsername(theUsername, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUsername(const ::omero::RStringPtr& theUsername, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUsername(theUsername, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUsername(const ::omero::RStringPtr& theUsername, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUsername(theUsername, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setUsername(const ::omero::RStringPtr& theUsername)
    {
        return begin_setUsername(theUsername, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUsername(const ::omero::RStringPtr& theUsername, const ::Ice::Context& __ctx)
    {
        return begin_setUsername(theUsername, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUsername(const ::omero::RStringPtr& theUsername, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUsername(theUsername, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUsername(const ::omero::RStringPtr& theUsername, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUsername(theUsername, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUsername(const ::omero::RStringPtr& theUsername, const ::omero::model::Callback_Job_setUsernamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUsername(theUsername, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUsername(const ::omero::RStringPtr& theUsername, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_setUsernamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUsername(theUsername, &__ctx, __del, __cookie);
    }

    void end_setUsername(const ::Ice::AsyncResultPtr&);
    
private:

    void setUsername(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setUsername(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getGroupname()
    {
        return getGroupname(0);
    }
    ::omero::RStringPtr getGroupname(const ::Ice::Context& __ctx)
    {
        return getGroupname(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getGroupname(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGroupname(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGroupname(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGroupname(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getGroupname(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGroupname(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGroupname(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGroupname(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getGroupname(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getGroupname(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getGroupname(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getGroupname()
    {
        return begin_getGroupname(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGroupname(const ::Ice::Context& __ctx)
    {
        return begin_getGroupname(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGroupname(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroupname(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupname(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroupname(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupname(const ::omero::model::Callback_Job_getGroupnamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroupname(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupname(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_getGroupnamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroupname(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getGroupname(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getGroupname(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getGroupname(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setGroupname(const ::omero::RStringPtr& theGroupname)
    {
        setGroupname(theGroupname, 0);
    }
    void setGroupname(const ::omero::RStringPtr& theGroupname, const ::Ice::Context& __ctx)
    {
        setGroupname(theGroupname, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setGroupname(const ::omero::RStringPtr& theGroupname, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroupname(theGroupname, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setGroupname(const ::omero::RStringPtr& theGroupname, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroupname(theGroupname, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroupname(const ::omero::RStringPtr& theGroupname, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroupname(theGroupname, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroupname(const ::omero::RStringPtr& theGroupname, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroupname(theGroupname, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setGroupname(const ::omero::RStringPtr& theGroupname)
    {
        return begin_setGroupname(theGroupname, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroupname(const ::omero::RStringPtr& theGroupname, const ::Ice::Context& __ctx)
    {
        return begin_setGroupname(theGroupname, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroupname(const ::omero::RStringPtr& theGroupname, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupname(theGroupname, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupname(const ::omero::RStringPtr& theGroupname, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupname(theGroupname, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupname(const ::omero::RStringPtr& theGroupname, const ::omero::model::Callback_Job_setGroupnamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupname(theGroupname, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupname(const ::omero::RStringPtr& theGroupname, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_setGroupnamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupname(theGroupname, &__ctx, __del, __cookie);
    }

    void end_setGroupname(const ::Ice::AsyncResultPtr&);
    
private:

    void setGroupname(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setGroupname(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getType()
    {
        return getType(0);
    }
    ::omero::RStringPtr getType(const ::Ice::Context& __ctx)
    {
        return getType(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getType(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getType(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getType(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getType(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getType(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getType(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getType(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getType(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getType()
    {
        return begin_getType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx)
    {
        return begin_getType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::omero::model::Callback_Job_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getType(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setType(const ::omero::RStringPtr& theType)
    {
        setType(theType, 0);
    }
    void setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx)
    {
        setType(theType, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::RStringPtr& theType, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setType(theType, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::RStringPtr& theType, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setType(theType, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setType(theType, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setType(theType, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType)
    {
        return begin_setType(theType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx)
    {
        return begin_setType(theType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::omero::model::Callback_Job_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    void end_setType(const ::Ice::AsyncResultPtr&);
    
private:

    void setType(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getMessage()
    {
        return getMessage(0);
    }
    ::omero::RStringPtr getMessage(const ::Ice::Context& __ctx)
    {
        return getMessage(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMessage(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMessage(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMessage(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMessage(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMessage(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMessage(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMessage(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMessage(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMessage(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getMessage(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getMessage(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMessage()
    {
        return begin_getMessage(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMessage(const ::Ice::Context& __ctx)
    {
        return begin_getMessage(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMessage(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMessage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMessage(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMessage(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMessage(const ::omero::model::Callback_Job_getMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMessage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMessage(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_getMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMessage(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getMessage(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getMessage(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMessage(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setMessage(const ::omero::RStringPtr& theMessage)
    {
        setMessage(theMessage, 0);
    }
    void setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::Context& __ctx)
    {
        setMessage(theMessage, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setMessage(const ::omero::RStringPtr& theMessage, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setMessage(theMessage, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setMessage(const ::omero::RStringPtr& theMessage, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMessage(theMessage, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setMessage(theMessage, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMessage(theMessage, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage)
    {
        return begin_setMessage(theMessage, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::Context& __ctx)
    {
        return begin_setMessage(theMessage, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(theMessage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(theMessage, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage, const ::omero::model::Callback_Job_setMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(theMessage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_setMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(theMessage, &__ctx, __del, __cookie);
    }

    void end_setMessage(const ::Ice::AsyncResultPtr&);
    
private:

    void setMessage(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::JobStatusPtr getStatus()
    {
        return getStatus(0);
    }
    ::omero::model::JobStatusPtr getStatus(const ::Ice::Context& __ctx)
    {
        return getStatus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::IceInternal::Function<void (const ::omero::model::JobStatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatus(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::JobStatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatus(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::JobStatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::JobStatusPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::model::JobStatusPtr __ret;
                try
                {
                    __ret = __proxy->end_getStatus(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::JobStatusPtr&)> _response;
        };
        return begin_getStatus(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStatus()
    {
        return begin_getStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx)
    {
        return begin_getStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::omero::model::Callback_Job_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::omero::model::JobStatusPtr end_getStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::JobStatusPtr getStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setStatus(const ::omero::model::JobStatusPtr& theStatus)
    {
        setStatus(theStatus, 0);
    }
    void setStatus(const ::omero::model::JobStatusPtr& theStatus, const ::Ice::Context& __ctx)
    {
        setStatus(theStatus, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::model::JobStatusPtr& theStatus, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStatus(theStatus, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::model::JobStatusPtr& theStatus, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStatus(theStatus, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::model::JobStatusPtr& theStatus, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStatus(theStatus, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::model::JobStatusPtr& theStatus, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStatus(theStatus, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::model::JobStatusPtr& theStatus)
    {
        return begin_setStatus(theStatus, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::model::JobStatusPtr& theStatus, const ::Ice::Context& __ctx)
    {
        return begin_setStatus(theStatus, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::model::JobStatusPtr& theStatus, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::model::JobStatusPtr& theStatus, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::model::JobStatusPtr& theStatus, const ::omero::model::Callback_Job_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::model::JobStatusPtr& theStatus, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, &__ctx, __del, __cookie);
    }

    void end_setStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void setStatus(const ::omero::model::JobStatusPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::model::JobStatusPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getSubmitted()
    {
        return getSubmitted(0);
    }
    ::omero::RTimePtr getSubmitted(const ::Ice::Context& __ctx)
    {
        return getSubmitted(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSubmitted(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSubmitted(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSubmitted(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSubmitted(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSubmitted(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSubmitted(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSubmitted(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSubmitted(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSubmitted(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getSubmitted(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getSubmitted(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSubmitted()
    {
        return begin_getSubmitted(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSubmitted(const ::Ice::Context& __ctx)
    {
        return begin_getSubmitted(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSubmitted(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSubmitted(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSubmitted(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSubmitted(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSubmitted(const ::omero::model::Callback_Job_getSubmittedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSubmitted(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSubmitted(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_getSubmittedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSubmitted(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getSubmitted(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getSubmitted(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSubmitted(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSubmitted(const ::omero::RTimePtr& theSubmitted)
    {
        setSubmitted(theSubmitted, 0);
    }
    void setSubmitted(const ::omero::RTimePtr& theSubmitted, const ::Ice::Context& __ctx)
    {
        setSubmitted(theSubmitted, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSubmitted(const ::omero::RTimePtr& theSubmitted, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSubmitted(theSubmitted, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setSubmitted(const ::omero::RTimePtr& theSubmitted, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSubmitted(theSubmitted, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSubmitted(const ::omero::RTimePtr& theSubmitted, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSubmitted(theSubmitted, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSubmitted(const ::omero::RTimePtr& theSubmitted, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSubmitted(theSubmitted, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setSubmitted(const ::omero::RTimePtr& theSubmitted)
    {
        return begin_setSubmitted(theSubmitted, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSubmitted(const ::omero::RTimePtr& theSubmitted, const ::Ice::Context& __ctx)
    {
        return begin_setSubmitted(theSubmitted, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSubmitted(const ::omero::RTimePtr& theSubmitted, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSubmitted(theSubmitted, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSubmitted(const ::omero::RTimePtr& theSubmitted, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSubmitted(theSubmitted, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSubmitted(const ::omero::RTimePtr& theSubmitted, const ::omero::model::Callback_Job_setSubmittedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSubmitted(theSubmitted, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSubmitted(const ::omero::RTimePtr& theSubmitted, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_setSubmittedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSubmitted(theSubmitted, &__ctx, __del, __cookie);
    }

    void end_setSubmitted(const ::Ice::AsyncResultPtr&);
    
private:

    void setSubmitted(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSubmitted(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getScheduledFor()
    {
        return getScheduledFor(0);
    }
    ::omero::RTimePtr getScheduledFor(const ::Ice::Context& __ctx)
    {
        return getScheduledFor(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getScheduledFor(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScheduledFor(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScheduledFor(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScheduledFor(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getScheduledFor(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScheduledFor(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScheduledFor(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScheduledFor(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getScheduledFor(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getScheduledFor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getScheduledFor(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getScheduledFor()
    {
        return begin_getScheduledFor(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScheduledFor(const ::Ice::Context& __ctx)
    {
        return begin_getScheduledFor(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScheduledFor(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScheduledFor(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScheduledFor(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScheduledFor(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScheduledFor(const ::omero::model::Callback_Job_getScheduledForPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScheduledFor(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScheduledFor(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_getScheduledForPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScheduledFor(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getScheduledFor(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getScheduledFor(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getScheduledFor(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setScheduledFor(const ::omero::RTimePtr& theScheduledFor)
    {
        setScheduledFor(theScheduledFor, 0);
    }
    void setScheduledFor(const ::omero::RTimePtr& theScheduledFor, const ::Ice::Context& __ctx)
    {
        setScheduledFor(theScheduledFor, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setScheduledFor(const ::omero::RTimePtr& theScheduledFor, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setScheduledFor(theScheduledFor, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setScheduledFor(const ::omero::RTimePtr& theScheduledFor, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setScheduledFor(theScheduledFor, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setScheduledFor(const ::omero::RTimePtr& theScheduledFor, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setScheduledFor(theScheduledFor, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setScheduledFor(const ::omero::RTimePtr& theScheduledFor, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setScheduledFor(theScheduledFor, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setScheduledFor(const ::omero::RTimePtr& theScheduledFor)
    {
        return begin_setScheduledFor(theScheduledFor, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setScheduledFor(const ::omero::RTimePtr& theScheduledFor, const ::Ice::Context& __ctx)
    {
        return begin_setScheduledFor(theScheduledFor, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setScheduledFor(const ::omero::RTimePtr& theScheduledFor, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScheduledFor(theScheduledFor, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScheduledFor(const ::omero::RTimePtr& theScheduledFor, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScheduledFor(theScheduledFor, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScheduledFor(const ::omero::RTimePtr& theScheduledFor, const ::omero::model::Callback_Job_setScheduledForPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScheduledFor(theScheduledFor, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScheduledFor(const ::omero::RTimePtr& theScheduledFor, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_setScheduledForPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScheduledFor(theScheduledFor, &__ctx, __del, __cookie);
    }

    void end_setScheduledFor(const ::Ice::AsyncResultPtr&);
    
private:

    void setScheduledFor(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setScheduledFor(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getStarted()
    {
        return getStarted(0);
    }
    ::omero::RTimePtr getStarted(const ::Ice::Context& __ctx)
    {
        return getStarted(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStarted(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStarted(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStarted(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStarted(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStarted(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStarted(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStarted(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStarted(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStarted(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getStarted(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getStarted(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStarted()
    {
        return begin_getStarted(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStarted(const ::Ice::Context& __ctx)
    {
        return begin_getStarted(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStarted(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStarted(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStarted(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStarted(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStarted(const ::omero::model::Callback_Job_getStartedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStarted(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStarted(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_getStartedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStarted(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getStarted(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getStarted(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStarted(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setStarted(const ::omero::RTimePtr& theStarted)
    {
        setStarted(theStarted, 0);
    }
    void setStarted(const ::omero::RTimePtr& theStarted, const ::Ice::Context& __ctx)
    {
        setStarted(theStarted, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setStarted(const ::omero::RTimePtr& theStarted, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStarted(theStarted, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setStarted(const ::omero::RTimePtr& theStarted, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStarted(theStarted, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStarted(const ::omero::RTimePtr& theStarted, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStarted(theStarted, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStarted(const ::omero::RTimePtr& theStarted, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStarted(theStarted, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setStarted(const ::omero::RTimePtr& theStarted)
    {
        return begin_setStarted(theStarted, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStarted(const ::omero::RTimePtr& theStarted, const ::Ice::Context& __ctx)
    {
        return begin_setStarted(theStarted, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStarted(const ::omero::RTimePtr& theStarted, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStarted(theStarted, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStarted(const ::omero::RTimePtr& theStarted, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStarted(theStarted, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStarted(const ::omero::RTimePtr& theStarted, const ::omero::model::Callback_Job_setStartedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStarted(theStarted, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStarted(const ::omero::RTimePtr& theStarted, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_setStartedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStarted(theStarted, &__ctx, __del, __cookie);
    }

    void end_setStarted(const ::Ice::AsyncResultPtr&);
    
private:

    void setStarted(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStarted(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getFinished()
    {
        return getFinished(0);
    }
    ::omero::RTimePtr getFinished(const ::Ice::Context& __ctx)
    {
        return getFinished(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFinished(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFinished(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFinished(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFinished(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFinished(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFinished(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFinished(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFinished(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFinished(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getFinished(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getFinished(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFinished()
    {
        return begin_getFinished(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFinished(const ::Ice::Context& __ctx)
    {
        return begin_getFinished(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFinished(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFinished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFinished(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFinished(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFinished(const ::omero::model::Callback_Job_getFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFinished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFinished(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_getFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFinished(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getFinished(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getFinished(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFinished(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setFinished(const ::omero::RTimePtr& theFinished)
    {
        setFinished(theFinished, 0);
    }
    void setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::Context& __ctx)
    {
        setFinished(theFinished, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setFinished(const ::omero::RTimePtr& theFinished, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFinished(theFinished, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setFinished(const ::omero::RTimePtr& theFinished, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFinished(theFinished, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFinished(theFinished, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFinished(theFinished, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished)
    {
        return begin_setFinished(theFinished, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::Context& __ctx)
    {
        return begin_setFinished(theFinished, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFinished(theFinished, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFinished(theFinished, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished, const ::omero::model::Callback_Job_setFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFinished(theFinished, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_setFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFinished(theFinished, &__ctx, __del, __cookie);
    }

    void end_setFinished(const ::Ice::AsyncResultPtr&);
    
private:

    void setFinished(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadOriginalFileLinks()
    {
        unloadOriginalFileLinks(0);
    }
    void unloadOriginalFileLinks(const ::Ice::Context& __ctx)
    {
        unloadOriginalFileLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadOriginalFileLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadOriginalFileLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadOriginalFileLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadOriginalFileLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadOriginalFileLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadOriginalFileLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadOriginalFileLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadOriginalFileLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadOriginalFileLinks()
    {
        return begin_unloadOriginalFileLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadOriginalFileLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadOriginalFileLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadOriginalFileLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadOriginalFileLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadOriginalFileLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadOriginalFileLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadOriginalFileLinks(const ::omero::model::Callback_Job_unloadOriginalFileLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadOriginalFileLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadOriginalFileLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_unloadOriginalFileLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadOriginalFileLinks(&__ctx, __del, __cookie);
    }

    void end_unloadOriginalFileLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadOriginalFileLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadOriginalFileLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfOriginalFileLinks()
    {
        return sizeOfOriginalFileLinks(0);
    }
    ::Ice::Int sizeOfOriginalFileLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfOriginalFileLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfOriginalFileLinks(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfOriginalFileLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfOriginalFileLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfOriginalFileLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfOriginalFileLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfOriginalFileLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfOriginalFileLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfOriginalFileLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfOriginalFileLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfOriginalFileLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfOriginalFileLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfOriginalFileLinks()
    {
        return begin_sizeOfOriginalFileLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfOriginalFileLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfOriginalFileLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfOriginalFileLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfOriginalFileLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfOriginalFileLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfOriginalFileLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfOriginalFileLinks(const ::omero::model::Callback_Job_sizeOfOriginalFileLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfOriginalFileLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfOriginalFileLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_sizeOfOriginalFileLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfOriginalFileLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfOriginalFileLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfOriginalFileLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfOriginalFileLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::JobOriginalFileLinksSeq copyOriginalFileLinks()
    {
        return copyOriginalFileLinks(0);
    }
    ::omero::model::JobOriginalFileLinksSeq copyOriginalFileLinks(const ::Ice::Context& __ctx)
    {
        return copyOriginalFileLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyOriginalFileLinks(const ::IceInternal::Function<void (const ::omero::model::JobOriginalFileLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyOriginalFileLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyOriginalFileLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyOriginalFileLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyOriginalFileLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::JobOriginalFileLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyOriginalFileLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyOriginalFileLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyOriginalFileLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyOriginalFileLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::JobOriginalFileLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::JobOriginalFileLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::model::JobOriginalFileLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_copyOriginalFileLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::JobOriginalFileLinksSeq&)> _response;
        };
        return begin_copyOriginalFileLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyOriginalFileLinks()
    {
        return begin_copyOriginalFileLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyOriginalFileLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyOriginalFileLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyOriginalFileLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyOriginalFileLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyOriginalFileLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyOriginalFileLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyOriginalFileLinks(const ::omero::model::Callback_Job_copyOriginalFileLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyOriginalFileLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyOriginalFileLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_copyOriginalFileLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyOriginalFileLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::JobOriginalFileLinksSeq end_copyOriginalFileLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::JobOriginalFileLinksSeq copyOriginalFileLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyOriginalFileLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target)
    {
        addJobOriginalFileLink(target, 0);
    }
    void addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addJobOriginalFileLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addJobOriginalFileLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addJobOriginalFileLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addJobOriginalFileLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addJobOriginalFileLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target)
    {
        return begin_addJobOriginalFileLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addJobOriginalFileLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJobOriginalFileLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJobOriginalFileLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target, const ::omero::model::Callback_Job_addJobOriginalFileLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJobOriginalFileLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_addJobOriginalFileLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJobOriginalFileLink(target, &__ctx, __del, __cookie);
    }

    void end_addJobOriginalFileLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets)
    {
        addAllJobOriginalFileLinkSet(targets, 0);
    }
    void addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllJobOriginalFileLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllJobOriginalFileLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllJobOriginalFileLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllJobOriginalFileLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllJobOriginalFileLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets)
    {
        return begin_addAllJobOriginalFileLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllJobOriginalFileLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllJobOriginalFileLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllJobOriginalFileLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::omero::model::Callback_Job_addAllJobOriginalFileLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllJobOriginalFileLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_addAllJobOriginalFileLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllJobOriginalFileLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllJobOriginalFileLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget)
    {
        removeJobOriginalFileLink(theTarget, 0);
    }
    void removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeJobOriginalFileLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeJobOriginalFileLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeJobOriginalFileLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeJobOriginalFileLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeJobOriginalFileLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget)
    {
        return begin_removeJobOriginalFileLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeJobOriginalFileLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeJobOriginalFileLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeJobOriginalFileLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget, const ::omero::model::Callback_Job_removeJobOriginalFileLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeJobOriginalFileLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_removeJobOriginalFileLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeJobOriginalFileLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeJobOriginalFileLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets)
    {
        removeAllJobOriginalFileLinkSet(targets, 0);
    }
    void removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllJobOriginalFileLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllJobOriginalFileLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllJobOriginalFileLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllJobOriginalFileLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllJobOriginalFileLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets)
    {
        return begin_removeAllJobOriginalFileLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllJobOriginalFileLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllJobOriginalFileLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllJobOriginalFileLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::omero::model::Callback_Job_removeAllJobOriginalFileLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllJobOriginalFileLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_removeAllJobOriginalFileLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllJobOriginalFileLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllJobOriginalFileLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearOriginalFileLinks()
    {
        clearOriginalFileLinks(0);
    }
    void clearOriginalFileLinks(const ::Ice::Context& __ctx)
    {
        clearOriginalFileLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearOriginalFileLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearOriginalFileLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearOriginalFileLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearOriginalFileLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearOriginalFileLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearOriginalFileLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearOriginalFileLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearOriginalFileLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearOriginalFileLinks()
    {
        return begin_clearOriginalFileLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearOriginalFileLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearOriginalFileLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearOriginalFileLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearOriginalFileLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearOriginalFileLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearOriginalFileLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearOriginalFileLinks(const ::omero::model::Callback_Job_clearOriginalFileLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearOriginalFileLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearOriginalFileLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_clearOriginalFileLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearOriginalFileLinks(&__ctx, __del, __cookie);
    }

    void end_clearOriginalFileLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearOriginalFileLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearOriginalFileLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy)
    {
        reloadOriginalFileLinks(toCopy, 0);
    }
    void reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadOriginalFileLinks(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadOriginalFileLinks(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadOriginalFileLinks(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadOriginalFileLinks(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadOriginalFileLinks(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy)
    {
        return begin_reloadOriginalFileLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadOriginalFileLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadOriginalFileLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadOriginalFileLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy, const ::omero::model::Callback_Job_reloadOriginalFileLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadOriginalFileLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadOriginalFileLinks(const ::omero::model::JobPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_reloadOriginalFileLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadOriginalFileLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadOriginalFileLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadOriginalFileLinks(const ::omero::model::JobPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadOriginalFileLinks(const ::omero::model::JobPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getOriginalFileLinksCountPerOwner()
    {
        return getOriginalFileLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getOriginalFileLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getOriginalFileLinksCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOriginalFileLinksCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOriginalFileLinksCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOriginalFileLinksCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOriginalFileLinksCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOriginalFileLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOriginalFileLinksCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOriginalFileLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOriginalFileLinksCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOriginalFileLinksCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getOriginalFileLinksCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getOriginalFileLinksCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOriginalFileLinksCountPerOwner()
    {
        return begin_getOriginalFileLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOriginalFileLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getOriginalFileLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOriginalFileLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOriginalFileLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOriginalFileLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOriginalFileLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOriginalFileLinksCountPerOwner(const ::omero::model::Callback_Job_getOriginalFileLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOriginalFileLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOriginalFileLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_getOriginalFileLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOriginalFileLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getOriginalFileLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getOriginalFileLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOriginalFileLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::JobOriginalFileLinkPtr linkOriginalFile(const ::omero::model::OriginalFilePtr& addition)
    {
        return linkOriginalFile(addition, 0);
    }
    ::omero::model::JobOriginalFileLinkPtr linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::Context& __ctx)
    {
        return linkOriginalFile(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::IceInternal::Function<void (const ::omero::model::JobOriginalFileLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkOriginalFile(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkOriginalFile(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::JobOriginalFileLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkOriginalFile(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkOriginalFile(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::JobOriginalFileLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::JobOriginalFileLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::model::JobOriginalFileLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkOriginalFile(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::JobOriginalFileLinkPtr&)> _response;
        };
        return begin_linkOriginalFile(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition)
    {
        return begin_linkOriginalFile(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkOriginalFile(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkOriginalFile(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkOriginalFile(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::omero::model::Callback_Job_linkOriginalFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkOriginalFile(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_linkOriginalFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkOriginalFile(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::JobOriginalFileLinkPtr end_linkOriginalFile(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::JobOriginalFileLinkPtr linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides)
    {
        addJobOriginalFileLinkToBoth(link, bothSides, 0);
    }
    void addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addJobOriginalFileLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addJobOriginalFileLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addJobOriginalFileLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addJobOriginalFileLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addJobOriginalFileLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides)
    {
        return begin_addJobOriginalFileLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addJobOriginalFileLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJobOriginalFileLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJobOriginalFileLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::omero::model::Callback_Job_addJobOriginalFileLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJobOriginalFileLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_addJobOriginalFileLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJobOriginalFileLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addJobOriginalFileLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::JobOriginalFileLinksSeq findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal)
    {
        return findJobOriginalFileLink(removal, 0);
    }
    ::omero::model::JobOriginalFileLinksSeq findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx)
    {
        return findJobOriginalFileLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal, const ::IceInternal::Function<void (const ::omero::model::JobOriginalFileLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findJobOriginalFileLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findJobOriginalFileLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::JobOriginalFileLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findJobOriginalFileLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findJobOriginalFileLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::JobOriginalFileLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::JobOriginalFileLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::model::JobOriginalFileLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_findJobOriginalFileLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::JobOriginalFileLinksSeq&)> _response;
        };
        return begin_findJobOriginalFileLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal)
    {
        return begin_findJobOriginalFileLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findJobOriginalFileLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findJobOriginalFileLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findJobOriginalFileLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal, const ::omero::model::Callback_Job_findJobOriginalFileLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findJobOriginalFileLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_findJobOriginalFileLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findJobOriginalFileLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::JobOriginalFileLinksSeq end_findJobOriginalFileLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::JobOriginalFileLinksSeq findJobOriginalFileLink(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findJobOriginalFileLink(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal)
    {
        unlinkOriginalFile(removal, 0);
    }
    void unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkOriginalFile(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkOriginalFile(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkOriginalFile(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkOriginalFile(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkOriginalFile(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal)
    {
        return begin_unlinkOriginalFile(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkOriginalFile(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkOriginalFile(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkOriginalFile(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::omero::model::Callback_Job_unlinkOriginalFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkOriginalFile(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_unlinkOriginalFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkOriginalFile(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkOriginalFile(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides)
    {
        removeJobOriginalFileLinkFromBoth(link, bothSides, 0);
    }
    void removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeJobOriginalFileLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeJobOriginalFileLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeJobOriginalFileLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeJobOriginalFileLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeJobOriginalFileLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides)
    {
        return begin_removeJobOriginalFileLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeJobOriginalFileLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeJobOriginalFileLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeJobOriginalFileLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::omero::model::Callback_Job_removeJobOriginalFileLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeJobOriginalFileLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_removeJobOriginalFileLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeJobOriginalFileLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeJobOriginalFileLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::JobLinkedOriginalFileSeq linkedOriginalFileList()
    {
        return linkedOriginalFileList(0);
    }
    ::omero::model::JobLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Context& __ctx)
    {
        return linkedOriginalFileList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedOriginalFileList(const ::IceInternal::Function<void (const ::omero::model::JobLinkedOriginalFileSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedOriginalFileList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedOriginalFileList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedOriginalFileList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedOriginalFileList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::JobLinkedOriginalFileSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedOriginalFileList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedOriginalFileList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedOriginalFileList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedOriginalFileList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::JobLinkedOriginalFileSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::JobLinkedOriginalFileSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
                ::omero::model::JobLinkedOriginalFileSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedOriginalFileList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::JobLinkedOriginalFileSeq&)> _response;
        };
        return begin_linkedOriginalFileList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList()
    {
        return begin_linkedOriginalFileList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::Ice::Context& __ctx)
    {
        return begin_linkedOriginalFileList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedOriginalFileList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedOriginalFileList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::omero::model::Callback_Job_linkedOriginalFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedOriginalFileList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Job_linkedOriginalFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedOriginalFileList(&__ctx, __del, __cookie);
    }

    ::omero::model::JobLinkedOriginalFileSeq end_linkedOriginalFileList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::JobLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Job> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_secure(bool __secure) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_twoway() const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_oneway() const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_batchOneway() const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_datagram() const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_batchDatagram() const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_compress(bool __compress) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Job> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Job*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Job : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getUsername(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setUsername(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getGroupname(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setGroupname(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getMessage(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setMessage(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::JobStatusPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setStatus(const ::omero::model::JobStatusPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getSubmitted(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setSubmitted(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getScheduledFor(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setScheduledFor(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getStarted(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setStarted(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getFinished(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setFinished(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::JobOriginalFileLinksSeq copyOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadOriginalFileLinks(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getOriginalFileLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::JobOriginalFileLinkPtr linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::JobOriginalFileLinksSeq findJobOriginalFileLink(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::JobLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Job : virtual public ::IceDelegate::omero::model::Job,
            virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getUsername(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUsername(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getGroupname(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroupname(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getMessage(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setMessage(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobStatusPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStatus(const ::omero::model::JobStatusPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getSubmitted(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSubmitted(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getScheduledFor(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setScheduledFor(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getStarted(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStarted(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getFinished(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFinished(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobOriginalFileLinksSeq copyOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadOriginalFileLinks(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getOriginalFileLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobOriginalFileLinkPtr linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobOriginalFileLinksSeq findJobOriginalFileLink(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Job : virtual public ::IceDelegate::omero::model::Job,
            virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getUsername(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUsername(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getGroupname(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroupname(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getMessage(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setMessage(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobStatusPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStatus(const ::omero::model::JobStatusPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getSubmitted(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSubmitted(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getScheduledFor(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setScheduledFor(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getStarted(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStarted(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getFinished(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFinished(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobOriginalFileLinksSeq copyOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearOriginalFileLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadOriginalFileLinks(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getOriginalFileLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobOriginalFileLinkPtr linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobOriginalFileLinksSeq findJobOriginalFileLink(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class Job : public ::omero::model::IObject
{
public:

    typedef JobPrx ProxyType;
    typedef JobPtr PointerType;

    Job()
    {
    }

    Job(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::RStringPtr& __ice_username, const ::omero::RStringPtr& __ice_groupname, const ::omero::RStringPtr& __ice_type, const ::omero::RStringPtr& __ice_message, const ::omero::model::JobStatusPtr& __ice_status, const ::omero::RTimePtr& __ice_submitted, const ::omero::RTimePtr& __ice_scheduledFor, const ::omero::RTimePtr& __ice_started, const ::omero::RTimePtr& __ice_finished, const ::omero::model::JobOriginalFileLinksSeq& __ice_originalFileLinksSeq, bool __ice_originalFileLinksLoaded, const ::omero::sys::CountMap& __ice_originalFileLinksCountPerOwner) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        username(__ice_username),
        groupname(__ice_groupname),
        type(__ice_type),
        message(__ice_message),
        status(__ice_status),
        submitted(__ice_submitted),
        scheduledFor(__ice_scheduledFor),
        started(__ice_started),
        finished(__ice_finished),
        originalFileLinksSeq(__ice_originalFileLinksSeq),
        originalFileLinksLoaded(__ice_originalFileLinksLoaded),
        originalFileLinksCountPerOwner(__ice_originalFileLinksCountPerOwner)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getUsername(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getUsername(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setUsername(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setUsername(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getGroupname(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getGroupname(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setGroupname(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setGroupname(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getMessage(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setMessage(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::JobStatusPtr getStatus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStatus(const ::omero::model::JobStatusPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getSubmitted(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSubmitted(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSubmitted(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSubmitted(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getScheduledFor(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getScheduledFor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setScheduledFor(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setScheduledFor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getStarted(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStarted(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStarted(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStarted(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getFinished(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFinished(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setFinished(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setFinished(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadOriginalFileLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadOriginalFileLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfOriginalFileLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfOriginalFileLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::JobOriginalFileLinksSeq copyOriginalFileLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyOriginalFileLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addJobOriginalFileLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllJobOriginalFileLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeJobOriginalFileLink(const ::omero::model::JobOriginalFileLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeJobOriginalFileLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllJobOriginalFileLinkSet(const ::omero::model::JobOriginalFileLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllJobOriginalFileLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearOriginalFileLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearOriginalFileLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadOriginalFileLinks(const ::omero::model::JobPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadOriginalFileLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getOriginalFileLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOriginalFileLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::JobOriginalFileLinkPtr linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkOriginalFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addJobOriginalFileLinkToBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addJobOriginalFileLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::JobOriginalFileLinksSeq findJobOriginalFileLink(const ::omero::model::OriginalFilePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findJobOriginalFileLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkOriginalFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeJobOriginalFileLinkFromBoth(const ::omero::model::JobOriginalFileLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeJobOriginalFileLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::JobLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedOriginalFileList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::RStringPtr username;

    ::omero::RStringPtr groupname;

    ::omero::RStringPtr type;

    ::omero::RStringPtr message;

    ::omero::model::JobStatusPtr status;

    ::omero::RTimePtr submitted;

    ::omero::RTimePtr scheduledFor;

    ::omero::RTimePtr started;

    ::omero::RTimePtr finished;

    ::omero::model::JobOriginalFileLinksSeq originalFileLinksSeq;

    bool originalFileLinksLoaded;

    ::omero::sys::CountMap originalFileLinksCountPerOwner;
};

inline bool operator==(const Job& l, const Job& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Job& l, const Job& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Job_getVersion : public Callback_Job_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Job_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_getVersionPtr
newCallback_Job_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_getVersionPtr
newCallback_Job_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_getVersion : public Callback_Job_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Job_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_getVersionPtr
newCallback_Job_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_getVersionPtr
newCallback_Job_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_setVersion : public Callback_Job_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_setVersionPtr
newCallback_Job_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setVersionPtr
newCallback_Job_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_setVersionPtr
newCallback_Job_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setVersionPtr
newCallback_Job_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_setVersion : public Callback_Job_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_setVersionPtr
newCallback_Job_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setVersionPtr
newCallback_Job_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setVersionPtr
newCallback_Job_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setVersionPtr
newCallback_Job_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_getUsername : public Callback_Job_getUsername_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Job_getUsername(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getUsername(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_getUsernamePtr
newCallback_Job_getUsername(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getUsername<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_getUsernamePtr
newCallback_Job_getUsername(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getUsername<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_getUsername : public Callback_Job_getUsername_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Job_getUsername(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getUsername(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_getUsernamePtr
newCallback_Job_getUsername(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getUsername<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_getUsernamePtr
newCallback_Job_getUsername(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getUsername<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_setUsername : public Callback_Job_setUsername_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_setUsername(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_setUsernamePtr
newCallback_Job_setUsername(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setUsername<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setUsernamePtr
newCallback_Job_setUsername(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setUsername<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_setUsernamePtr
newCallback_Job_setUsername(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setUsername<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setUsernamePtr
newCallback_Job_setUsername(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setUsername<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_setUsername : public Callback_Job_setUsername_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_setUsername(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_setUsernamePtr
newCallback_Job_setUsername(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setUsername<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setUsernamePtr
newCallback_Job_setUsername(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setUsername<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setUsernamePtr
newCallback_Job_setUsername(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setUsername<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setUsernamePtr
newCallback_Job_setUsername(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setUsername<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_getGroupname : public Callback_Job_getGroupname_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Job_getGroupname(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getGroupname(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_getGroupnamePtr
newCallback_Job_getGroupname(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getGroupname<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_getGroupnamePtr
newCallback_Job_getGroupname(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getGroupname<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_getGroupname : public Callback_Job_getGroupname_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Job_getGroupname(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getGroupname(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_getGroupnamePtr
newCallback_Job_getGroupname(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getGroupname<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_getGroupnamePtr
newCallback_Job_getGroupname(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getGroupname<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_setGroupname : public Callback_Job_setGroupname_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_setGroupname(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_setGroupnamePtr
newCallback_Job_setGroupname(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setGroupname<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setGroupnamePtr
newCallback_Job_setGroupname(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setGroupname<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_setGroupnamePtr
newCallback_Job_setGroupname(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setGroupname<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setGroupnamePtr
newCallback_Job_setGroupname(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setGroupname<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_setGroupname : public Callback_Job_setGroupname_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_setGroupname(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_setGroupnamePtr
newCallback_Job_setGroupname(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setGroupname<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setGroupnamePtr
newCallback_Job_setGroupname(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setGroupname<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setGroupnamePtr
newCallback_Job_setGroupname(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setGroupname<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setGroupnamePtr
newCallback_Job_setGroupname(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setGroupname<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_getType : public Callback_Job_getType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Job_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_getTypePtr
newCallback_Job_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_getTypePtr
newCallback_Job_getType(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_getType : public Callback_Job_getType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Job_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_getTypePtr
newCallback_Job_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_getTypePtr
newCallback_Job_getType(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_setType : public Callback_Job_setType_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_setTypePtr
newCallback_Job_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setTypePtr
newCallback_Job_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_setTypePtr
newCallback_Job_setType(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setTypePtr
newCallback_Job_setType(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_setType : public Callback_Job_setType_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_setTypePtr
newCallback_Job_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setTypePtr
newCallback_Job_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setTypePtr
newCallback_Job_setType(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setTypePtr
newCallback_Job_setType(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_getMessage : public Callback_Job_getMessage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Job_getMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_getMessagePtr
newCallback_Job_getMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_getMessagePtr
newCallback_Job_getMessage(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getMessage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_getMessage : public Callback_Job_getMessage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Job_getMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_getMessagePtr
newCallback_Job_getMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_getMessagePtr
newCallback_Job_getMessage(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_setMessage : public Callback_Job_setMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_setMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_setMessagePtr
newCallback_Job_setMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setMessagePtr
newCallback_Job_setMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setMessage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_setMessagePtr
newCallback_Job_setMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setMessagePtr
newCallback_Job_setMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setMessage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_setMessage : public Callback_Job_setMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_setMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_setMessagePtr
newCallback_Job_setMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setMessagePtr
newCallback_Job_setMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setMessagePtr
newCallback_Job_setMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setMessagePtr
newCallback_Job_setMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_getStatus : public Callback_Job_getStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::JobStatusPtr&);

    CallbackNC_Job_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobStatusPtr __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_getStatusPtr
newCallback_Job_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobStatusPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_getStatusPtr
newCallback_Job_getStatus(T* instance, void (T::*cb)(const ::omero::model::JobStatusPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_getStatus : public Callback_Job_getStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::JobStatusPtr&, const CT&);

    Callback_Job_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobStatusPtr __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_getStatusPtr
newCallback_Job_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobStatusPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_getStatusPtr
newCallback_Job_getStatus(T* instance, void (T::*cb)(const ::omero::model::JobStatusPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_setStatus : public Callback_Job_setStatus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_setStatusPtr
newCallback_Job_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setStatusPtr
newCallback_Job_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_setStatusPtr
newCallback_Job_setStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setStatusPtr
newCallback_Job_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_setStatus : public Callback_Job_setStatus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_setStatusPtr
newCallback_Job_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setStatusPtr
newCallback_Job_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setStatusPtr
newCallback_Job_setStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setStatusPtr
newCallback_Job_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_getSubmitted : public Callback_Job_getSubmitted_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_Job_getSubmitted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getSubmitted(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_getSubmittedPtr
newCallback_Job_getSubmitted(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getSubmitted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_getSubmittedPtr
newCallback_Job_getSubmitted(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getSubmitted<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_getSubmitted : public Callback_Job_getSubmitted_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_Job_getSubmitted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getSubmitted(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_getSubmittedPtr
newCallback_Job_getSubmitted(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getSubmitted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_getSubmittedPtr
newCallback_Job_getSubmitted(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getSubmitted<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_setSubmitted : public Callback_Job_setSubmitted_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_setSubmitted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_setSubmittedPtr
newCallback_Job_setSubmitted(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setSubmitted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setSubmittedPtr
newCallback_Job_setSubmitted(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setSubmitted<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_setSubmittedPtr
newCallback_Job_setSubmitted(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setSubmitted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setSubmittedPtr
newCallback_Job_setSubmitted(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setSubmitted<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_setSubmitted : public Callback_Job_setSubmitted_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_setSubmitted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_setSubmittedPtr
newCallback_Job_setSubmitted(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setSubmitted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setSubmittedPtr
newCallback_Job_setSubmitted(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setSubmitted<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setSubmittedPtr
newCallback_Job_setSubmitted(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setSubmitted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setSubmittedPtr
newCallback_Job_setSubmitted(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setSubmitted<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_getScheduledFor : public Callback_Job_getScheduledFor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_Job_getScheduledFor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getScheduledFor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_getScheduledForPtr
newCallback_Job_getScheduledFor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getScheduledFor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_getScheduledForPtr
newCallback_Job_getScheduledFor(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getScheduledFor<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_getScheduledFor : public Callback_Job_getScheduledFor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_Job_getScheduledFor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getScheduledFor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_getScheduledForPtr
newCallback_Job_getScheduledFor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getScheduledFor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_getScheduledForPtr
newCallback_Job_getScheduledFor(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getScheduledFor<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_setScheduledFor : public Callback_Job_setScheduledFor_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_setScheduledFor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_setScheduledForPtr
newCallback_Job_setScheduledFor(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setScheduledFor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setScheduledForPtr
newCallback_Job_setScheduledFor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setScheduledFor<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_setScheduledForPtr
newCallback_Job_setScheduledFor(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setScheduledFor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setScheduledForPtr
newCallback_Job_setScheduledFor(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setScheduledFor<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_setScheduledFor : public Callback_Job_setScheduledFor_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_setScheduledFor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_setScheduledForPtr
newCallback_Job_setScheduledFor(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setScheduledFor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setScheduledForPtr
newCallback_Job_setScheduledFor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setScheduledFor<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setScheduledForPtr
newCallback_Job_setScheduledFor(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setScheduledFor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setScheduledForPtr
newCallback_Job_setScheduledFor(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setScheduledFor<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_getStarted : public Callback_Job_getStarted_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_Job_getStarted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getStarted(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_getStartedPtr
newCallback_Job_getStarted(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getStarted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_getStartedPtr
newCallback_Job_getStarted(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getStarted<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_getStarted : public Callback_Job_getStarted_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_Job_getStarted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getStarted(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_getStartedPtr
newCallback_Job_getStarted(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getStarted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_getStartedPtr
newCallback_Job_getStarted(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getStarted<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_setStarted : public Callback_Job_setStarted_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_setStarted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_setStartedPtr
newCallback_Job_setStarted(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setStarted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setStartedPtr
newCallback_Job_setStarted(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setStarted<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_setStartedPtr
newCallback_Job_setStarted(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setStarted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setStartedPtr
newCallback_Job_setStarted(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setStarted<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_setStarted : public Callback_Job_setStarted_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_setStarted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_setStartedPtr
newCallback_Job_setStarted(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setStarted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setStartedPtr
newCallback_Job_setStarted(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setStarted<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setStartedPtr
newCallback_Job_setStarted(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setStarted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setStartedPtr
newCallback_Job_setStarted(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setStarted<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_getFinished : public Callback_Job_getFinished_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_Job_getFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getFinished(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_getFinishedPtr
newCallback_Job_getFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_getFinishedPtr
newCallback_Job_getFinished(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getFinished<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_getFinished : public Callback_Job_getFinished_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_Job_getFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getFinished(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_getFinishedPtr
newCallback_Job_getFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_getFinishedPtr
newCallback_Job_getFinished(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_setFinished : public Callback_Job_setFinished_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_setFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_setFinishedPtr
newCallback_Job_setFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setFinishedPtr
newCallback_Job_setFinished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setFinished<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_setFinishedPtr
newCallback_Job_setFinished(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_setFinishedPtr
newCallback_Job_setFinished(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_setFinished<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_setFinished : public Callback_Job_setFinished_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_setFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_setFinishedPtr
newCallback_Job_setFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setFinishedPtr
newCallback_Job_setFinished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setFinished<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setFinishedPtr
newCallback_Job_setFinished(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_setFinishedPtr
newCallback_Job_setFinished(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_setFinished<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_unloadOriginalFileLinks : public Callback_Job_unloadOriginalFileLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_unloadOriginalFileLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_unloadOriginalFileLinksPtr
newCallback_Job_unloadOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_unloadOriginalFileLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_unloadOriginalFileLinksPtr
newCallback_Job_unloadOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_unloadOriginalFileLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_unloadOriginalFileLinksPtr
newCallback_Job_unloadOriginalFileLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_unloadOriginalFileLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_unloadOriginalFileLinksPtr
newCallback_Job_unloadOriginalFileLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_unloadOriginalFileLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_unloadOriginalFileLinks : public Callback_Job_unloadOriginalFileLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_unloadOriginalFileLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_unloadOriginalFileLinksPtr
newCallback_Job_unloadOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_unloadOriginalFileLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_unloadOriginalFileLinksPtr
newCallback_Job_unloadOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_unloadOriginalFileLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_unloadOriginalFileLinksPtr
newCallback_Job_unloadOriginalFileLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_unloadOriginalFileLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_unloadOriginalFileLinksPtr
newCallback_Job_unloadOriginalFileLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_unloadOriginalFileLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_sizeOfOriginalFileLinks : public Callback_Job_sizeOfOriginalFileLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Job_sizeOfOriginalFileLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfOriginalFileLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_sizeOfOriginalFileLinksPtr
newCallback_Job_sizeOfOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_sizeOfOriginalFileLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_sizeOfOriginalFileLinksPtr
newCallback_Job_sizeOfOriginalFileLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_sizeOfOriginalFileLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_sizeOfOriginalFileLinks : public Callback_Job_sizeOfOriginalFileLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Job_sizeOfOriginalFileLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfOriginalFileLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_sizeOfOriginalFileLinksPtr
newCallback_Job_sizeOfOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_sizeOfOriginalFileLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_sizeOfOriginalFileLinksPtr
newCallback_Job_sizeOfOriginalFileLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_sizeOfOriginalFileLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_copyOriginalFileLinks : public Callback_Job_copyOriginalFileLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::JobOriginalFileLinksSeq&);

    CallbackNC_Job_copyOriginalFileLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobOriginalFileLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyOriginalFileLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_copyOriginalFileLinksPtr
newCallback_Job_copyOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_copyOriginalFileLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_copyOriginalFileLinksPtr
newCallback_Job_copyOriginalFileLinks(T* instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_copyOriginalFileLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_copyOriginalFileLinks : public Callback_Job_copyOriginalFileLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::JobOriginalFileLinksSeq&, const CT&);

    Callback_Job_copyOriginalFileLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobOriginalFileLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyOriginalFileLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_copyOriginalFileLinksPtr
newCallback_Job_copyOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_copyOriginalFileLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_copyOriginalFileLinksPtr
newCallback_Job_copyOriginalFileLinks(T* instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_copyOriginalFileLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_addJobOriginalFileLink : public Callback_Job_addJobOriginalFileLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_addJobOriginalFileLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_addJobOriginalFileLinkPtr
newCallback_Job_addJobOriginalFileLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addJobOriginalFileLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_addJobOriginalFileLinkPtr
newCallback_Job_addJobOriginalFileLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addJobOriginalFileLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_addJobOriginalFileLinkPtr
newCallback_Job_addJobOriginalFileLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addJobOriginalFileLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_addJobOriginalFileLinkPtr
newCallback_Job_addJobOriginalFileLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addJobOriginalFileLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_addJobOriginalFileLink : public Callback_Job_addJobOriginalFileLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_addJobOriginalFileLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_addJobOriginalFileLinkPtr
newCallback_Job_addJobOriginalFileLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addJobOriginalFileLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_addJobOriginalFileLinkPtr
newCallback_Job_addJobOriginalFileLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addJobOriginalFileLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_addJobOriginalFileLinkPtr
newCallback_Job_addJobOriginalFileLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addJobOriginalFileLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_addJobOriginalFileLinkPtr
newCallback_Job_addJobOriginalFileLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addJobOriginalFileLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_addAllJobOriginalFileLinkSet : public Callback_Job_addAllJobOriginalFileLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_addAllJobOriginalFileLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_addAllJobOriginalFileLinkSetPtr
newCallback_Job_addAllJobOriginalFileLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addAllJobOriginalFileLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_addAllJobOriginalFileLinkSetPtr
newCallback_Job_addAllJobOriginalFileLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addAllJobOriginalFileLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_addAllJobOriginalFileLinkSetPtr
newCallback_Job_addAllJobOriginalFileLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addAllJobOriginalFileLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_addAllJobOriginalFileLinkSetPtr
newCallback_Job_addAllJobOriginalFileLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addAllJobOriginalFileLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_addAllJobOriginalFileLinkSet : public Callback_Job_addAllJobOriginalFileLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_addAllJobOriginalFileLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_addAllJobOriginalFileLinkSetPtr
newCallback_Job_addAllJobOriginalFileLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addAllJobOriginalFileLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_addAllJobOriginalFileLinkSetPtr
newCallback_Job_addAllJobOriginalFileLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addAllJobOriginalFileLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_addAllJobOriginalFileLinkSetPtr
newCallback_Job_addAllJobOriginalFileLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addAllJobOriginalFileLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_addAllJobOriginalFileLinkSetPtr
newCallback_Job_addAllJobOriginalFileLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addAllJobOriginalFileLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_removeJobOriginalFileLink : public Callback_Job_removeJobOriginalFileLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_removeJobOriginalFileLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_removeJobOriginalFileLinkPtr
newCallback_Job_removeJobOriginalFileLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeJobOriginalFileLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_removeJobOriginalFileLinkPtr
newCallback_Job_removeJobOriginalFileLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeJobOriginalFileLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_removeJobOriginalFileLinkPtr
newCallback_Job_removeJobOriginalFileLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeJobOriginalFileLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_removeJobOriginalFileLinkPtr
newCallback_Job_removeJobOriginalFileLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeJobOriginalFileLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_removeJobOriginalFileLink : public Callback_Job_removeJobOriginalFileLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_removeJobOriginalFileLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_removeJobOriginalFileLinkPtr
newCallback_Job_removeJobOriginalFileLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeJobOriginalFileLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_removeJobOriginalFileLinkPtr
newCallback_Job_removeJobOriginalFileLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeJobOriginalFileLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_removeJobOriginalFileLinkPtr
newCallback_Job_removeJobOriginalFileLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeJobOriginalFileLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_removeJobOriginalFileLinkPtr
newCallback_Job_removeJobOriginalFileLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeJobOriginalFileLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_removeAllJobOriginalFileLinkSet : public Callback_Job_removeAllJobOriginalFileLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_removeAllJobOriginalFileLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_removeAllJobOriginalFileLinkSetPtr
newCallback_Job_removeAllJobOriginalFileLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeAllJobOriginalFileLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_removeAllJobOriginalFileLinkSetPtr
newCallback_Job_removeAllJobOriginalFileLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeAllJobOriginalFileLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_removeAllJobOriginalFileLinkSetPtr
newCallback_Job_removeAllJobOriginalFileLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeAllJobOriginalFileLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_removeAllJobOriginalFileLinkSetPtr
newCallback_Job_removeAllJobOriginalFileLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeAllJobOriginalFileLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_removeAllJobOriginalFileLinkSet : public Callback_Job_removeAllJobOriginalFileLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_removeAllJobOriginalFileLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_removeAllJobOriginalFileLinkSetPtr
newCallback_Job_removeAllJobOriginalFileLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeAllJobOriginalFileLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_removeAllJobOriginalFileLinkSetPtr
newCallback_Job_removeAllJobOriginalFileLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeAllJobOriginalFileLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_removeAllJobOriginalFileLinkSetPtr
newCallback_Job_removeAllJobOriginalFileLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeAllJobOriginalFileLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_removeAllJobOriginalFileLinkSetPtr
newCallback_Job_removeAllJobOriginalFileLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeAllJobOriginalFileLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_clearOriginalFileLinks : public Callback_Job_clearOriginalFileLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_clearOriginalFileLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_clearOriginalFileLinksPtr
newCallback_Job_clearOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_clearOriginalFileLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_clearOriginalFileLinksPtr
newCallback_Job_clearOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_clearOriginalFileLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_clearOriginalFileLinksPtr
newCallback_Job_clearOriginalFileLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_clearOriginalFileLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_clearOriginalFileLinksPtr
newCallback_Job_clearOriginalFileLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_clearOriginalFileLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_clearOriginalFileLinks : public Callback_Job_clearOriginalFileLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_clearOriginalFileLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_clearOriginalFileLinksPtr
newCallback_Job_clearOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_clearOriginalFileLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_clearOriginalFileLinksPtr
newCallback_Job_clearOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_clearOriginalFileLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_clearOriginalFileLinksPtr
newCallback_Job_clearOriginalFileLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_clearOriginalFileLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_clearOriginalFileLinksPtr
newCallback_Job_clearOriginalFileLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_clearOriginalFileLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_reloadOriginalFileLinks : public Callback_Job_reloadOriginalFileLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_reloadOriginalFileLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_reloadOriginalFileLinksPtr
newCallback_Job_reloadOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_reloadOriginalFileLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_reloadOriginalFileLinksPtr
newCallback_Job_reloadOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_reloadOriginalFileLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_reloadOriginalFileLinksPtr
newCallback_Job_reloadOriginalFileLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_reloadOriginalFileLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_reloadOriginalFileLinksPtr
newCallback_Job_reloadOriginalFileLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_reloadOriginalFileLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_reloadOriginalFileLinks : public Callback_Job_reloadOriginalFileLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_reloadOriginalFileLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_reloadOriginalFileLinksPtr
newCallback_Job_reloadOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_reloadOriginalFileLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_reloadOriginalFileLinksPtr
newCallback_Job_reloadOriginalFileLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_reloadOriginalFileLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_reloadOriginalFileLinksPtr
newCallback_Job_reloadOriginalFileLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_reloadOriginalFileLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_reloadOriginalFileLinksPtr
newCallback_Job_reloadOriginalFileLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_reloadOriginalFileLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_getOriginalFileLinksCountPerOwner : public Callback_Job_getOriginalFileLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Job_getOriginalFileLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getOriginalFileLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_getOriginalFileLinksCountPerOwnerPtr
newCallback_Job_getOriginalFileLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getOriginalFileLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_getOriginalFileLinksCountPerOwnerPtr
newCallback_Job_getOriginalFileLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_getOriginalFileLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_getOriginalFileLinksCountPerOwner : public Callback_Job_getOriginalFileLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Job_getOriginalFileLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getOriginalFileLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_getOriginalFileLinksCountPerOwnerPtr
newCallback_Job_getOriginalFileLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getOriginalFileLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_getOriginalFileLinksCountPerOwnerPtr
newCallback_Job_getOriginalFileLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_getOriginalFileLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_linkOriginalFile : public Callback_Job_linkOriginalFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::JobOriginalFileLinkPtr&);

    CallbackNC_Job_linkOriginalFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobOriginalFileLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkOriginalFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_linkOriginalFilePtr
newCallback_Job_linkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_linkOriginalFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_linkOriginalFilePtr
newCallback_Job_linkOriginalFile(T* instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_linkOriginalFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_linkOriginalFile : public Callback_Job_linkOriginalFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::JobOriginalFileLinkPtr&, const CT&);

    Callback_Job_linkOriginalFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobOriginalFileLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkOriginalFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_linkOriginalFilePtr
newCallback_Job_linkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_linkOriginalFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_linkOriginalFilePtr
newCallback_Job_linkOriginalFile(T* instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_linkOriginalFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_addJobOriginalFileLinkToBoth : public Callback_Job_addJobOriginalFileLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_addJobOriginalFileLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_addJobOriginalFileLinkToBothPtr
newCallback_Job_addJobOriginalFileLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addJobOriginalFileLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_addJobOriginalFileLinkToBothPtr
newCallback_Job_addJobOriginalFileLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addJobOriginalFileLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_addJobOriginalFileLinkToBothPtr
newCallback_Job_addJobOriginalFileLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addJobOriginalFileLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_addJobOriginalFileLinkToBothPtr
newCallback_Job_addJobOriginalFileLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_addJobOriginalFileLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_addJobOriginalFileLinkToBoth : public Callback_Job_addJobOriginalFileLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_addJobOriginalFileLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_addJobOriginalFileLinkToBothPtr
newCallback_Job_addJobOriginalFileLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addJobOriginalFileLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_addJobOriginalFileLinkToBothPtr
newCallback_Job_addJobOriginalFileLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addJobOriginalFileLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_addJobOriginalFileLinkToBothPtr
newCallback_Job_addJobOriginalFileLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addJobOriginalFileLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_addJobOriginalFileLinkToBothPtr
newCallback_Job_addJobOriginalFileLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_addJobOriginalFileLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_findJobOriginalFileLink : public Callback_Job_findJobOriginalFileLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::JobOriginalFileLinksSeq&);

    CallbackNC_Job_findJobOriginalFileLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobOriginalFileLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findJobOriginalFileLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_findJobOriginalFileLinkPtr
newCallback_Job_findJobOriginalFileLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_findJobOriginalFileLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_findJobOriginalFileLinkPtr
newCallback_Job_findJobOriginalFileLink(T* instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_findJobOriginalFileLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_findJobOriginalFileLink : public Callback_Job_findJobOriginalFileLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::JobOriginalFileLinksSeq&, const CT&);

    Callback_Job_findJobOriginalFileLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobOriginalFileLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findJobOriginalFileLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_findJobOriginalFileLinkPtr
newCallback_Job_findJobOriginalFileLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_findJobOriginalFileLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_findJobOriginalFileLinkPtr
newCallback_Job_findJobOriginalFileLink(T* instance, void (T::*cb)(const ::omero::model::JobOriginalFileLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_findJobOriginalFileLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Job_unlinkOriginalFile : public Callback_Job_unlinkOriginalFile_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_unlinkOriginalFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_unlinkOriginalFilePtr
newCallback_Job_unlinkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_unlinkOriginalFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_unlinkOriginalFilePtr
newCallback_Job_unlinkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_unlinkOriginalFile<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_unlinkOriginalFilePtr
newCallback_Job_unlinkOriginalFile(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_unlinkOriginalFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_unlinkOriginalFilePtr
newCallback_Job_unlinkOriginalFile(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_unlinkOriginalFile<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_unlinkOriginalFile : public Callback_Job_unlinkOriginalFile_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_unlinkOriginalFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_unlinkOriginalFilePtr
newCallback_Job_unlinkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_unlinkOriginalFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_unlinkOriginalFilePtr
newCallback_Job_unlinkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_unlinkOriginalFile<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_unlinkOriginalFilePtr
newCallback_Job_unlinkOriginalFile(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_unlinkOriginalFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_unlinkOriginalFilePtr
newCallback_Job_unlinkOriginalFile(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_unlinkOriginalFile<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_removeJobOriginalFileLinkFromBoth : public Callback_Job_removeJobOriginalFileLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Job_removeJobOriginalFileLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Job_removeJobOriginalFileLinkFromBothPtr
newCallback_Job_removeJobOriginalFileLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeJobOriginalFileLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_removeJobOriginalFileLinkFromBothPtr
newCallback_Job_removeJobOriginalFileLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeJobOriginalFileLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Job_removeJobOriginalFileLinkFromBothPtr
newCallback_Job_removeJobOriginalFileLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeJobOriginalFileLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_removeJobOriginalFileLinkFromBothPtr
newCallback_Job_removeJobOriginalFileLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_removeJobOriginalFileLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_removeJobOriginalFileLinkFromBoth : public Callback_Job_removeJobOriginalFileLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Job_removeJobOriginalFileLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Job_removeJobOriginalFileLinkFromBothPtr
newCallback_Job_removeJobOriginalFileLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeJobOriginalFileLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_removeJobOriginalFileLinkFromBothPtr
newCallback_Job_removeJobOriginalFileLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeJobOriginalFileLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Job_removeJobOriginalFileLinkFromBothPtr
newCallback_Job_removeJobOriginalFileLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeJobOriginalFileLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_removeJobOriginalFileLinkFromBothPtr
newCallback_Job_removeJobOriginalFileLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_removeJobOriginalFileLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Job_linkedOriginalFileList : public Callback_Job_linkedOriginalFileList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::JobLinkedOriginalFileSeq&);

    CallbackNC_Job_linkedOriginalFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobLinkedOriginalFileSeq __ret;
        try
        {
            __ret = __proxy->end_linkedOriginalFileList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Job_linkedOriginalFileListPtr
newCallback_Job_linkedOriginalFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobLinkedOriginalFileSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_linkedOriginalFileList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Job_linkedOriginalFileListPtr
newCallback_Job_linkedOriginalFileList(T* instance, void (T::*cb)(const ::omero::model::JobLinkedOriginalFileSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Job_linkedOriginalFileList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Job_linkedOriginalFileList : public Callback_Job_linkedOriginalFileList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::JobLinkedOriginalFileSeq&, const CT&);

    Callback_Job_linkedOriginalFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::JobPrx __proxy = ::omero::model::JobPrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobLinkedOriginalFileSeq __ret;
        try
        {
            __ret = __proxy->end_linkedOriginalFileList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Job_linkedOriginalFileListPtr
newCallback_Job_linkedOriginalFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobLinkedOriginalFileSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_linkedOriginalFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Job_linkedOriginalFileListPtr
newCallback_Job_linkedOriginalFileList(T* instance, void (T::*cb)(const ::omero::model::JobLinkedOriginalFileSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Job_linkedOriginalFileList<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
