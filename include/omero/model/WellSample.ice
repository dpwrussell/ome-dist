   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.ice for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef WELLSAMPLE_ICE
#define WELLSAMPLE_ICE
#include <omero/model/IObject.ice>
#include <omero/RTypes.ice>
#include <omero/System.ice>
#include <omero/Collections.ice>
module omero {
  module model {
    class PlateAcquisition;
    class Well;
    class Image;
    class WellSampleAnnotationLink;
    class Annotation;
    class Details;
    ["java:type:java.util.ArrayList"] sequence<omero::model::WellSampleAnnotationLink> WellSampleAnnotationLinksSeq;
    ["java:type:java.util.ArrayList"] sequence<omero::model::Annotation> WellSampleLinkedAnnotationSeq;
    ["protected"] class WellSample
    extends omero::model::IObject
    {
      omero::RInt version;
      omero::RInt getVersion();
      void setVersion(omero::RInt theVersion);
      omero::RDouble posX;
      omero::RDouble getPosX();
      void setPosX(omero::RDouble thePosX);
      omero::RDouble posY;
      omero::RDouble getPosY();
      void setPosY(omero::RDouble thePosY);
      omero::RTime timepoint;
      omero::RTime getTimepoint();
      void setTimepoint(omero::RTime theTimepoint);
      omero::model::PlateAcquisition plateAcquisition;
      omero::model::PlateAcquisition getPlateAcquisition();
      void setPlateAcquisition(omero::model::PlateAcquisition thePlateAcquisition);
      omero::model::Well well;
      omero::model::Well getWell();
      void setWell(omero::model::Well theWell);
      omero::model::Image image;
      omero::model::Image getImage();
      void setImage(omero::model::Image theImage);
      WellSampleAnnotationLinksSeq annotationLinksSeq;
      bool annotationLinksLoaded;
      omero::sys::CountMap annotationLinksCountPerOwner;
      /*
       * Unloads the annotationLinks collection. Any access to this
       * collection will throw an omero.UnloadedCollectionException.
       *
       * See sizeOfAnnotationLinks() on how to test for unloaded collections.
       * See reloadAnnotationLinks() on how to reset the value.
       *
       */
      void unloadAnnotationLinks();
      int sizeOfAnnotationLinks();
      WellSampleAnnotationLinksSeq copyAnnotationLinks();
      // See language-specific iterator methods
      void addWellSampleAnnotationLink(WellSampleAnnotationLink target);
      /*
       * Adds all the members of the WellSampleAnnotationLinksSeq sequence to
       * the annotationLinksSeq field.
       */
      void addAllWellSampleAnnotationLinkSet(WellSampleAnnotationLinksSeq targets);
      void removeWellSampleAnnotationLink(WellSampleAnnotationLink theTarget);
      /*
       * Removes all the members of the WellSampleAnnotationLinksSeq sequence from
       * the annotationLinksSeq field.
       */
      void removeAllWellSampleAnnotationLinkSet(WellSampleAnnotationLinksSeq targets);
      void clearAnnotationLinks();

      /*
       * Allows reloading the protected annotationLinks collection
       * from another instance of WellSample. The argument's collection
       * will be unloaded and all member entities will have their
       * inverse property altered.
       *
       * The argument's id must match and it's update id must be present and
       * greater than or equal to that of the current object.
       */
      void reloadAnnotationLinks(WellSample toCopy);
      omero::sys::CountMap getAnnotationLinksCountPerOwner();
      WellSampleAnnotationLink linkAnnotation(Annotation addition);

      /*
       * Add the link to the current instance and if bothSides is true AND
       * the other side of the link is loaded, add the current instance to
       * it as well.
       */
      void addWellSampleAnnotationLinkToBoth(omero::model::WellSampleAnnotationLink link, bool bothSides);
      WellSampleAnnotationLinksSeq findWellSampleAnnotationLink(Annotation removal);
      void unlinkAnnotation(Annotation removal);

      /*
       * Remove the link from the current instance and if bothSides is true AND
       * the other side of the link is loaded, remove the current instance from
       * it as well.
       */
      void removeWellSampleAnnotationLinkFromBoth(omero::model::WellSampleAnnotationLink link, bool bothSides);
      WellSampleLinkedAnnotationSeq linkedAnnotationList();
    };
  };
};
#endif // WELLSAMPLE_ICE
