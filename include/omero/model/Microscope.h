// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Microscope.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Microscope_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Microscope_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class MicroscopeType;

class Details;

class Microscope;

}

}

}

namespace omero
{

namespace model
{

class MicroscopeType;
bool operator==(const MicroscopeType&, const MicroscopeType&);
bool operator<(const MicroscopeType&, const MicroscopeType&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class Microscope;
bool operator==(const Microscope&, const Microscope&);
bool operator<(const Microscope&, const Microscope&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::MicroscopeType*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::MicroscopeType*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::Microscope*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Microscope*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::MicroscopeType> MicroscopeTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::MicroscopeType> MicroscopeTypePrx;

void __read(::IceInternal::BasicStream*, MicroscopeTypePrx&);
void __patch__MicroscopeTypePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Microscope> MicroscopePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Microscope> MicroscopePrx;

void __read(::IceInternal::BasicStream*, MicroscopePrx&);
void __patch__MicroscopePtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_Microscope_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_getVersion_Base> Callback_Microscope_getVersionPtr;

class Callback_Microscope_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_setVersion_Base> Callback_Microscope_setVersionPtr;

class Callback_Microscope_getManufacturer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_getManufacturer_Base> Callback_Microscope_getManufacturerPtr;

class Callback_Microscope_setManufacturer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_setManufacturer_Base> Callback_Microscope_setManufacturerPtr;

class Callback_Microscope_getModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_getModel_Base> Callback_Microscope_getModelPtr;

class Callback_Microscope_setModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_setModel_Base> Callback_Microscope_setModelPtr;

class Callback_Microscope_getLotNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_getLotNumber_Base> Callback_Microscope_getLotNumberPtr;

class Callback_Microscope_setLotNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_setLotNumber_Base> Callback_Microscope_setLotNumberPtr;

class Callback_Microscope_getSerialNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_getSerialNumber_Base> Callback_Microscope_getSerialNumberPtr;

class Callback_Microscope_setSerialNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_setSerialNumber_Base> Callback_Microscope_setSerialNumberPtr;

class Callback_Microscope_getType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_getType_Base> Callback_Microscope_getTypePtr;

class Callback_Microscope_setType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Microscope_setType_Base> Callback_Microscope_setTypePtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Microscope : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Microscope_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Microscope_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getManufacturer()
    {
        return getManufacturer(0);
    }
    ::omero::RStringPtr getManufacturer(const ::Ice::Context& __ctx)
    {
        return getManufacturer(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer()
    {
        return begin_getManufacturer(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx)
    {
        return begin_getManufacturer(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::omero::model::Callback_Microscope_getManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_getManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getManufacturer(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getManufacturer(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setManufacturer(const ::omero::RStringPtr& theManufacturer)
    {
        setManufacturer(theManufacturer, 0);
    }
    void setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx)
    {
        setManufacturer(theManufacturer, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer)
    {
        return begin_setManufacturer(theManufacturer, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::omero::model::Callback_Microscope_setManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_setManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, __del, __cookie);
    }

    void end_setManufacturer(const ::Ice::AsyncResultPtr&);
    
private:

    void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getModel()
    {
        return getModel(0);
    }
    ::omero::RStringPtr getModel(const ::Ice::Context& __ctx)
    {
        return getModel(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getModel()
    {
        return begin_getModel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx)
    {
        return begin_getModel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::omero::model::Callback_Microscope_getModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_getModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getModel(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getModel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setModel(const ::omero::RStringPtr& theModel)
    {
        setModel(theModel, 0);
    }
    void setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx)
    {
        setModel(theModel, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel)
    {
        return begin_setModel(theModel, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx)
    {
        return begin_setModel(theModel, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::omero::model::Callback_Microscope_setModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_setModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, &__ctx, __del, __cookie);
    }

    void end_setModel(const ::Ice::AsyncResultPtr&);
    
private:

    void setModel(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getLotNumber()
    {
        return getLotNumber(0);
    }
    ::omero::RStringPtr getLotNumber(const ::Ice::Context& __ctx)
    {
        return getLotNumber(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber()
    {
        return begin_getLotNumber(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx)
    {
        return begin_getLotNumber(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::omero::model::Callback_Microscope_getLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_getLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getLotNumber(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getLotNumber(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setLotNumber(const ::omero::RStringPtr& theLotNumber)
    {
        setLotNumber(theLotNumber, 0);
    }
    void setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx)
    {
        setLotNumber(theLotNumber, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber)
    {
        return begin_setLotNumber(theLotNumber, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::omero::model::Callback_Microscope_setLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_setLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, __del, __cookie);
    }

    void end_setLotNumber(const ::Ice::AsyncResultPtr&);
    
private:

    void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getSerialNumber()
    {
        return getSerialNumber(0);
    }
    ::omero::RStringPtr getSerialNumber(const ::Ice::Context& __ctx)
    {
        return getSerialNumber(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber()
    {
        return begin_getSerialNumber(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx)
    {
        return begin_getSerialNumber(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::omero::model::Callback_Microscope_getSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_getSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getSerialNumber(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getSerialNumber(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSerialNumber(const ::omero::RStringPtr& theSerialNumber)
    {
        setSerialNumber(theSerialNumber, 0);
    }
    void setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx)
    {
        setSerialNumber(theSerialNumber, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber)
    {
        return begin_setSerialNumber(theSerialNumber, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::omero::model::Callback_Microscope_setSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_setSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, __del, __cookie);
    }

    void end_setSerialNumber(const ::Ice::AsyncResultPtr&);
    
private:

    void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::MicroscopeTypePtr getType()
    {
        return getType(0);
    }
    ::omero::model::MicroscopeTypePtr getType(const ::Ice::Context& __ctx)
    {
        return getType(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getType()
    {
        return begin_getType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx)
    {
        return begin_getType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::omero::model::Callback_Microscope_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::omero::model::MicroscopeTypePtr end_getType(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::MicroscopeTypePtr getType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setType(const ::omero::model::MicroscopeTypePtr& theType)
    {
        setType(theType, 0);
    }
    void setType(const ::omero::model::MicroscopeTypePtr& theType, const ::Ice::Context& __ctx)
    {
        setType(theType, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicroscopeTypePtr& theType)
    {
        return begin_setType(theType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicroscopeTypePtr& theType, const ::Ice::Context& __ctx)
    {
        return begin_setType(theType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicroscopeTypePtr& theType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicroscopeTypePtr& theType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicroscopeTypePtr& theType, const ::omero::model::Callback_Microscope_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicroscopeTypePtr& theType, const ::Ice::Context& __ctx, const ::omero::model::Callback_Microscope_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    void end_setType(const ::Ice::AsyncResultPtr&);
    
private:

    void setType(const ::omero::model::MicroscopeTypePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicroscopeTypePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Microscope> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Microscope> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Microscope*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Microscope*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Microscope : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*) = 0;

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*) = 0;

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*) = 0;

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*) = 0;

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::MicroscopeTypePtr getType(const ::Ice::Context*) = 0;

    virtual void setType(const ::omero::model::MicroscopeTypePtr&, const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Microscope : virtual public ::IceDelegate::omero::model::Microscope,
                   virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::model::MicroscopeTypePtr getType(const ::Ice::Context*);

    virtual void setType(const ::omero::model::MicroscopeTypePtr&, const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Microscope : virtual public ::IceDelegate::omero::model::Microscope,
                   virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::model::MicroscopeTypePtr getType(const ::Ice::Context*);

    virtual void setType(const ::omero::model::MicroscopeTypePtr&, const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class Microscope : public ::omero::model::IObject
{
public:

    typedef MicroscopePrx ProxyType;
    typedef MicroscopePtr PointerType;
    
    Microscope() {}
    Microscope(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::model::MicroscopeTypePtr&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getManufacturer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setManufacturer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getModel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLotNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setLotNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSerialNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSerialNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::MicroscopeTypePtr getType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setType(const ::omero::model::MicroscopeTypePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::RStringPtr manufacturer;

    ::omero::RStringPtr model;

    ::omero::RStringPtr lotNumber;

    ::omero::RStringPtr serialNumber;

    ::omero::model::MicroscopeTypePtr type;
};

inline bool operator==(const Microscope& l, const Microscope& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Microscope& l, const Microscope& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Microscope_getVersion : public Callback_Microscope_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Microscope_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Microscope_getVersionPtr
newCallback_Microscope_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_getVersionPtr
newCallback_Microscope_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_getVersion : public Callback_Microscope_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Microscope_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Microscope_getVersionPtr
newCallback_Microscope_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_getVersionPtr
newCallback_Microscope_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Microscope_setVersion : public Callback_Microscope_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Microscope_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Microscope_setVersionPtr
newCallback_Microscope_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setVersionPtr
newCallback_Microscope_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Microscope_setVersionPtr
newCallback_Microscope_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setVersionPtr
newCallback_Microscope_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_setVersion : public Callback_Microscope_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Microscope_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Microscope_setVersionPtr
newCallback_Microscope_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setVersionPtr
newCallback_Microscope_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setVersionPtr
newCallback_Microscope_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setVersionPtr
newCallback_Microscope_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Microscope_getManufacturer : public Callback_Microscope_getManufacturer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Microscope_getManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getManufacturer(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Microscope_getManufacturerPtr
newCallback_Microscope_getManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_getManufacturerPtr
newCallback_Microscope_getManufacturer(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_getManufacturer : public Callback_Microscope_getManufacturer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Microscope_getManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getManufacturer(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Microscope_getManufacturerPtr
newCallback_Microscope_getManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_getManufacturerPtr
newCallback_Microscope_getManufacturer(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Microscope_setManufacturer : public Callback_Microscope_setManufacturer_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Microscope_setManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Microscope_setManufacturerPtr
newCallback_Microscope_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setManufacturerPtr
newCallback_Microscope_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setManufacturer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Microscope_setManufacturerPtr
newCallback_Microscope_setManufacturer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setManufacturerPtr
newCallback_Microscope_setManufacturer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setManufacturer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_setManufacturer : public Callback_Microscope_setManufacturer_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Microscope_setManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Microscope_setManufacturerPtr
newCallback_Microscope_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setManufacturerPtr
newCallback_Microscope_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setManufacturer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setManufacturerPtr
newCallback_Microscope_setManufacturer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setManufacturerPtr
newCallback_Microscope_setManufacturer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setManufacturer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Microscope_getModel : public Callback_Microscope_getModel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Microscope_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getModel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Microscope_getModelPtr
newCallback_Microscope_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_getModelPtr
newCallback_Microscope_getModel(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getModel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_getModel : public Callback_Microscope_getModel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Microscope_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getModel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Microscope_getModelPtr
newCallback_Microscope_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_getModelPtr
newCallback_Microscope_getModel(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Microscope_setModel : public Callback_Microscope_setModel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Microscope_setModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Microscope_setModelPtr
newCallback_Microscope_setModel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setModelPtr
newCallback_Microscope_setModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setModel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Microscope_setModelPtr
newCallback_Microscope_setModel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setModelPtr
newCallback_Microscope_setModel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setModel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_setModel : public Callback_Microscope_setModel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Microscope_setModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Microscope_setModelPtr
newCallback_Microscope_setModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setModelPtr
newCallback_Microscope_setModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setModelPtr
newCallback_Microscope_setModel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setModelPtr
newCallback_Microscope_setModel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Microscope_getLotNumber : public Callback_Microscope_getLotNumber_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Microscope_getLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getLotNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Microscope_getLotNumberPtr
newCallback_Microscope_getLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_getLotNumberPtr
newCallback_Microscope_getLotNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_getLotNumber : public Callback_Microscope_getLotNumber_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Microscope_getLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getLotNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Microscope_getLotNumberPtr
newCallback_Microscope_getLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_getLotNumberPtr
newCallback_Microscope_getLotNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Microscope_setLotNumber : public Callback_Microscope_setLotNumber_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Microscope_setLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Microscope_setLotNumberPtr
newCallback_Microscope_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setLotNumberPtr
newCallback_Microscope_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setLotNumber<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Microscope_setLotNumberPtr
newCallback_Microscope_setLotNumber(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setLotNumberPtr
newCallback_Microscope_setLotNumber(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setLotNumber<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_setLotNumber : public Callback_Microscope_setLotNumber_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Microscope_setLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Microscope_setLotNumberPtr
newCallback_Microscope_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setLotNumberPtr
newCallback_Microscope_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setLotNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setLotNumberPtr
newCallback_Microscope_setLotNumber(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setLotNumberPtr
newCallback_Microscope_setLotNumber(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setLotNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Microscope_getSerialNumber : public Callback_Microscope_getSerialNumber_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Microscope_getSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getSerialNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Microscope_getSerialNumberPtr
newCallback_Microscope_getSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_getSerialNumberPtr
newCallback_Microscope_getSerialNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_getSerialNumber : public Callback_Microscope_getSerialNumber_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Microscope_getSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getSerialNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Microscope_getSerialNumberPtr
newCallback_Microscope_getSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_getSerialNumberPtr
newCallback_Microscope_getSerialNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Microscope_setSerialNumber : public Callback_Microscope_setSerialNumber_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Microscope_setSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Microscope_setSerialNumberPtr
newCallback_Microscope_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setSerialNumberPtr
newCallback_Microscope_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setSerialNumber<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Microscope_setSerialNumberPtr
newCallback_Microscope_setSerialNumber(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setSerialNumberPtr
newCallback_Microscope_setSerialNumber(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setSerialNumber<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_setSerialNumber : public Callback_Microscope_setSerialNumber_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Microscope_setSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Microscope_setSerialNumberPtr
newCallback_Microscope_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setSerialNumberPtr
newCallback_Microscope_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setSerialNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setSerialNumberPtr
newCallback_Microscope_setSerialNumber(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setSerialNumberPtr
newCallback_Microscope_setSerialNumber(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setSerialNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Microscope_getType : public Callback_Microscope_getType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::MicroscopeTypePtr&);

    CallbackNC_Microscope_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::model::MicroscopeTypePtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Microscope_getTypePtr
newCallback_Microscope_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::MicroscopeTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_getTypePtr
newCallback_Microscope_getType(T* instance, void (T::*cb)(const ::omero::model::MicroscopeTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_getType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_getType : public Callback_Microscope_getType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::MicroscopeTypePtr&, const CT&);

    Callback_Microscope_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicroscopePrx __proxy = ::omero::model::MicroscopePrx::uncheckedCast(__result->getProxy());
        ::omero::model::MicroscopeTypePtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Microscope_getTypePtr
newCallback_Microscope_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::MicroscopeTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_getTypePtr
newCallback_Microscope_getType(T* instance, void (T::*cb)(const ::omero::model::MicroscopeTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Microscope_setType : public Callback_Microscope_setType_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Microscope_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Microscope_setTypePtr
newCallback_Microscope_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setTypePtr
newCallback_Microscope_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Microscope_setTypePtr
newCallback_Microscope_setType(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Microscope_setTypePtr
newCallback_Microscope_setType(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Microscope_setType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Microscope_setType : public Callback_Microscope_setType_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Microscope_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Microscope_setTypePtr
newCallback_Microscope_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setTypePtr
newCallback_Microscope_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setTypePtr
newCallback_Microscope_setType(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Microscope_setTypePtr
newCallback_Microscope_setType(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Microscope_setType<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
