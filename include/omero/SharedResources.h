// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SharedResources.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_SharedResources_h__
#define __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_SharedResources_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/Repositories.h>
#include <omero/Scripts.h>
#include <omero/Tables.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace grid
{

class SharedResources;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::SharedResources>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::grid::SharedResources*);

}

}

}

namespace omero
{

namespace grid
{

class SharedResources;
bool operator==(const SharedResources&, const SharedResources&);
bool operator<(const SharedResources&, const SharedResources&);
::Ice::Object* upCast(::omero::grid::SharedResources*);
typedef ::IceInternal::Handle< ::omero::grid::SharedResources> SharedResourcesPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::SharedResources> SharedResourcesPrx;
void __patch(SharedResourcesPtr&, const ::Ice::ObjectPtr&);

}

}

namespace IceAsync
{

}

namespace omero
{

namespace grid
{

class Callback_SharedResources_acquireProcessor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SharedResources_acquireProcessor_Base> Callback_SharedResources_acquireProcessorPtr;

class Callback_SharedResources_addProcessor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SharedResources_addProcessor_Base> Callback_SharedResources_addProcessorPtr;

class Callback_SharedResources_removeProcessor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SharedResources_removeProcessor_Base> Callback_SharedResources_removeProcessorPtr;

class Callback_SharedResources_repositories_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SharedResources_repositories_Base> Callback_SharedResources_repositoriesPtr;

class Callback_SharedResources_getScriptRepository_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SharedResources_getScriptRepository_Base> Callback_SharedResources_getScriptRepositoryPtr;

class Callback_SharedResources_areTablesEnabled_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SharedResources_areTablesEnabled_Base> Callback_SharedResources_areTablesEnabledPtr;

class Callback_SharedResources_newTable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SharedResources_newTable_Base> Callback_SharedResources_newTablePtr;

class Callback_SharedResources_openTable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SharedResources_openTable_Base> Callback_SharedResources_openTablePtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace grid
{

class SharedResources : virtual public ::IceProxy::Ice::Object
{
public:

    ::omero::grid::InteractiveProcessorPrx acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds)
    {
        return acquireProcessor(job, seconds, 0);
    }
    ::omero::grid::InteractiveProcessorPrx acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds, const ::Ice::Context& __ctx)
    {
        return acquireProcessor(job, seconds, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds, const ::IceInternal::Function<void (const ::omero::grid::InteractiveProcessorPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_acquireProcessor(job, seconds, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_acquireProcessor(job, seconds, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::grid::InteractiveProcessorPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_acquireProcessor(job, seconds, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_acquireProcessor(job, seconds, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::grid::InteractiveProcessorPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::grid::InteractiveProcessorPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
                ::omero::grid::InteractiveProcessorPrx __ret;
                try
                {
                    __ret = __proxy->end_acquireProcessor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::grid::InteractiveProcessorPrx&)> _response;
        };
        return begin_acquireProcessor(job, seconds, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds)
    {
        return begin_acquireProcessor(job, seconds, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds, const ::Ice::Context& __ctx)
    {
        return begin_acquireProcessor(job, seconds, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acquireProcessor(job, seconds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acquireProcessor(job, seconds, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds, const ::omero::grid::Callback_SharedResources_acquireProcessorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acquireProcessor(job, seconds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acquireProcessor(const ::omero::model::JobPtr& job, ::Ice::Int seconds, const ::Ice::Context& __ctx, const ::omero::grid::Callback_SharedResources_acquireProcessorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acquireProcessor(job, seconds, &__ctx, __del, __cookie);
    }

    ::omero::grid::InteractiveProcessorPrx end_acquireProcessor(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::grid::InteractiveProcessorPrx acquireProcessor(const ::omero::model::JobPtr&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_acquireProcessor(const ::omero::model::JobPtr&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addProcessor(const ::omero::grid::ProcessorPrx& proc)
    {
        addProcessor(proc, 0);
    }
    void addProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx)
    {
        addProcessor(proc, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addProcessor(const ::omero::grid::ProcessorPrx& proc, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addProcessor(proc, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addProcessor(const ::omero::grid::ProcessorPrx& proc, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addProcessor(proc, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addProcessor(proc, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addProcessor(proc, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_addProcessor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_addProcessor(proc, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addProcessor(const ::omero::grid::ProcessorPrx& proc)
    {
        return begin_addProcessor(proc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx)
    {
        return begin_addProcessor(proc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addProcessor(proc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addProcessor(proc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addProcessor(const ::omero::grid::ProcessorPrx& proc, const ::omero::grid::Callback_SharedResources_addProcessorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addProcessor(proc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx, const ::omero::grid::Callback_SharedResources_addProcessorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addProcessor(proc, &__ctx, __del, __cookie);
    }

    void end_addProcessor(const ::Ice::AsyncResultPtr&);
    
private:

    void addProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeProcessor(const ::omero::grid::ProcessorPrx& proc)
    {
        removeProcessor(proc, 0);
    }
    void removeProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx)
    {
        removeProcessor(proc, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeProcessor(const ::omero::grid::ProcessorPrx& proc, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeProcessor(proc, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeProcessor(const ::omero::grid::ProcessorPrx& proc, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeProcessor(proc, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeProcessor(proc, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeProcessor(proc, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_removeProcessor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_removeProcessor(proc, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeProcessor(const ::omero::grid::ProcessorPrx& proc)
    {
        return begin_removeProcessor(proc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx)
    {
        return begin_removeProcessor(proc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeProcessor(proc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeProcessor(proc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeProcessor(const ::omero::grid::ProcessorPrx& proc, const ::omero::grid::Callback_SharedResources_removeProcessorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeProcessor(proc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeProcessor(const ::omero::grid::ProcessorPrx& proc, const ::Ice::Context& __ctx, const ::omero::grid::Callback_SharedResources_removeProcessorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeProcessor(proc, &__ctx, __del, __cookie);
    }

    void end_removeProcessor(const ::Ice::AsyncResultPtr&);
    
private:

    void removeProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::grid::RepositoryMap repositories()
    {
        return repositories(0);
    }
    ::omero::grid::RepositoryMap repositories(const ::Ice::Context& __ctx)
    {
        return repositories(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_repositories(const ::IceInternal::Function<void (const ::omero::grid::RepositoryMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_repositories(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_repositories(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_repositories(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_repositories(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::grid::RepositoryMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_repositories(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_repositories(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_repositories(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_repositories(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::grid::RepositoryMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::grid::RepositoryMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
                ::omero::grid::RepositoryMap __ret;
                try
                {
                    __ret = __proxy->end_repositories(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::grid::RepositoryMap&)> _response;
        };
        return begin_repositories(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_repositories()
    {
        return begin_repositories(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_repositories(const ::Ice::Context& __ctx)
    {
        return begin_repositories(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_repositories(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_repositories(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_repositories(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_repositories(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_repositories(const ::omero::grid::Callback_SharedResources_repositoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_repositories(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_repositories(const ::Ice::Context& __ctx, const ::omero::grid::Callback_SharedResources_repositoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_repositories(&__ctx, __del, __cookie);
    }

    ::omero::grid::RepositoryMap end_repositories(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::grid::RepositoryMap repositories(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_repositories(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::grid::RepositoryPrx getScriptRepository()
    {
        return getScriptRepository(0);
    }
    ::omero::grid::RepositoryPrx getScriptRepository(const ::Ice::Context& __ctx)
    {
        return getScriptRepository(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getScriptRepository(const ::IceInternal::Function<void (const ::omero::grid::RepositoryPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScriptRepository(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptRepository(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScriptRepository(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptRepository(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::grid::RepositoryPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScriptRepository(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptRepository(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScriptRepository(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getScriptRepository(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::grid::RepositoryPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::grid::RepositoryPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
                ::omero::grid::RepositoryPrx __ret;
                try
                {
                    __ret = __proxy->end_getScriptRepository(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::grid::RepositoryPrx&)> _response;
        };
        return begin_getScriptRepository(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getScriptRepository()
    {
        return begin_getScriptRepository(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScriptRepository(const ::Ice::Context& __ctx)
    {
        return begin_getScriptRepository(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScriptRepository(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptRepository(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptRepository(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptRepository(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptRepository(const ::omero::grid::Callback_SharedResources_getScriptRepositoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptRepository(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptRepository(const ::Ice::Context& __ctx, const ::omero::grid::Callback_SharedResources_getScriptRepositoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptRepository(&__ctx, __del, __cookie);
    }

    ::omero::grid::RepositoryPrx end_getScriptRepository(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::grid::RepositoryPrx getScriptRepository(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getScriptRepository(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool areTablesEnabled()
    {
        return areTablesEnabled(0);
    }
    bool areTablesEnabled(const ::Ice::Context& __ctx)
    {
        return areTablesEnabled(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_areTablesEnabled(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_areTablesEnabled(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_areTablesEnabled(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_areTablesEnabled(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_areTablesEnabled(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_areTablesEnabled(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_areTablesEnabled(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_areTablesEnabled(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_areTablesEnabled(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_areTablesEnabled(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_areTablesEnabled(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_areTablesEnabled()
    {
        return begin_areTablesEnabled(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_areTablesEnabled(const ::Ice::Context& __ctx)
    {
        return begin_areTablesEnabled(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_areTablesEnabled(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_areTablesEnabled(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_areTablesEnabled(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_areTablesEnabled(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_areTablesEnabled(const ::omero::grid::Callback_SharedResources_areTablesEnabledPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_areTablesEnabled(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_areTablesEnabled(const ::Ice::Context& __ctx, const ::omero::grid::Callback_SharedResources_areTablesEnabledPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_areTablesEnabled(&__ctx, __del, __cookie);
    }

    bool end_areTablesEnabled(const ::Ice::AsyncResultPtr&);
    
private:

    bool areTablesEnabled(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_areTablesEnabled(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::grid::TablePrx newTable(::Ice::Long repoId, const ::std::string& path)
    {
        return newTable(repoId, path, 0);
    }
    ::omero::grid::TablePrx newTable(::Ice::Long repoId, const ::std::string& path, const ::Ice::Context& __ctx)
    {
        return newTable(repoId, path, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_newTable(::Ice::Long repoId, const ::std::string& path, const ::IceInternal::Function<void (const ::omero::grid::TablePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_newTable(repoId, path, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_newTable(::Ice::Long repoId, const ::std::string& path, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_newTable(repoId, path, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_newTable(::Ice::Long repoId, const ::std::string& path, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::grid::TablePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_newTable(repoId, path, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_newTable(::Ice::Long repoId, const ::std::string& path, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_newTable(repoId, path, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_newTable(::Ice::Long repoId, const ::std::string& path, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::grid::TablePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::grid::TablePrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
                ::omero::grid::TablePrx __ret;
                try
                {
                    __ret = __proxy->end_newTable(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::grid::TablePrx&)> _response;
        };
        return begin_newTable(repoId, path, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_newTable(::Ice::Long repoId, const ::std::string& path)
    {
        return begin_newTable(repoId, path, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newTable(::Ice::Long repoId, const ::std::string& path, const ::Ice::Context& __ctx)
    {
        return begin_newTable(repoId, path, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newTable(::Ice::Long repoId, const ::std::string& path, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newTable(repoId, path, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newTable(::Ice::Long repoId, const ::std::string& path, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newTable(repoId, path, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newTable(::Ice::Long repoId, const ::std::string& path, const ::omero::grid::Callback_SharedResources_newTablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newTable(repoId, path, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newTable(::Ice::Long repoId, const ::std::string& path, const ::Ice::Context& __ctx, const ::omero::grid::Callback_SharedResources_newTablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newTable(repoId, path, &__ctx, __del, __cookie);
    }

    ::omero::grid::TablePrx end_newTable(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::grid::TablePrx newTable(::Ice::Long, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_newTable(::Ice::Long, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::grid::TablePrx openTable(const ::omero::model::OriginalFilePtr& file)
    {
        return openTable(file, 0);
    }
    ::omero::grid::TablePrx openTable(const ::omero::model::OriginalFilePtr& file, const ::Ice::Context& __ctx)
    {
        return openTable(file, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_openTable(const ::omero::model::OriginalFilePtr& file, const ::IceInternal::Function<void (const ::omero::grid::TablePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_openTable(file, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_openTable(const ::omero::model::OriginalFilePtr& file, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_openTable(file, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_openTable(const ::omero::model::OriginalFilePtr& file, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::grid::TablePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_openTable(file, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_openTable(const ::omero::model::OriginalFilePtr& file, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_openTable(file, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_openTable(const ::omero::model::OriginalFilePtr& file, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::grid::TablePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::grid::TablePrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
                ::omero::grid::TablePrx __ret;
                try
                {
                    __ret = __proxy->end_openTable(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::grid::TablePrx&)> _response;
        };
        return begin_openTable(file, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_openTable(const ::omero::model::OriginalFilePtr& file)
    {
        return begin_openTable(file, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openTable(const ::omero::model::OriginalFilePtr& file, const ::Ice::Context& __ctx)
    {
        return begin_openTable(file, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openTable(const ::omero::model::OriginalFilePtr& file, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openTable(file, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openTable(const ::omero::model::OriginalFilePtr& file, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openTable(file, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openTable(const ::omero::model::OriginalFilePtr& file, const ::omero::grid::Callback_SharedResources_openTablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openTable(file, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openTable(const ::omero::model::OriginalFilePtr& file, const ::Ice::Context& __ctx, const ::omero::grid::Callback_SharedResources_openTablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openTable(file, &__ctx, __del, __cookie);
    }

    ::omero::grid::TablePrx end_openTable(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::grid::TablePrx openTable(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_openTable(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SharedResources> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_secure(bool __secure) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_twoway() const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_oneway() const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_batchOneway() const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_datagram() const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_batchDatagram() const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_compress(bool __compress) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SharedResources> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SharedResources*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace grid
{

class SharedResources : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::omero::grid::InteractiveProcessorPrx acquireProcessor(const ::omero::model::JobPtr&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::grid::RepositoryMap repositories(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::grid::RepositoryPrx getScriptRepository(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool areTablesEnabled(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::grid::TablePrx newTable(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::grid::TablePrx openTable(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace grid
{

class SharedResources : virtual public ::IceDelegate::omero::grid::SharedResources,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::omero::grid::InteractiveProcessorPrx acquireProcessor(const ::omero::model::JobPtr&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::RepositoryMap repositories(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::RepositoryPrx getScriptRepository(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool areTablesEnabled(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::TablePrx newTable(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::TablePrx openTable(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace grid
{

class SharedResources : virtual public ::IceDelegate::omero::grid::SharedResources,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::omero::grid::InteractiveProcessorPrx acquireProcessor(const ::omero::model::JobPtr&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::RepositoryMap repositories(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::RepositoryPrx getScriptRepository(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool areTablesEnabled(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::TablePrx newTable(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::TablePrx openTable(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace grid
{

class SharedResources : virtual public ::Ice::Object
{
public:

    typedef SharedResourcesPrx ProxyType;
    typedef SharedResourcesPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::omero::grid::InteractiveProcessorPrx acquireProcessor(const ::omero::model::JobPtr&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___acquireProcessor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addProcessor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeProcessor(const ::omero::grid::ProcessorPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeProcessor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::grid::RepositoryMap repositories(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___repositories(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::grid::RepositoryPrx getScriptRepository(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getScriptRepository(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool areTablesEnabled(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___areTablesEnabled(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::grid::TablePrx newTable(::Ice::Long, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___newTable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::grid::TablePrx openTable(const ::omero::model::OriginalFilePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___openTable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const SharedResources& l, const SharedResources& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SharedResources& l, const SharedResources& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace grid
{

template<class T>
class CallbackNC_SharedResources_acquireProcessor : public Callback_SharedResources_acquireProcessor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::grid::InteractiveProcessorPrx&);

    CallbackNC_SharedResources_acquireProcessor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::InteractiveProcessorPrx __ret;
        try
        {
            __ret = __proxy->end_acquireProcessor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SharedResources_acquireProcessorPtr
newCallback_SharedResources_acquireProcessor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::InteractiveProcessorPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_acquireProcessor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SharedResources_acquireProcessorPtr
newCallback_SharedResources_acquireProcessor(T* instance, void (T::*cb)(const ::omero::grid::InteractiveProcessorPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_acquireProcessor<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SharedResources_acquireProcessor : public Callback_SharedResources_acquireProcessor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::grid::InteractiveProcessorPrx&, const CT&);

    Callback_SharedResources_acquireProcessor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::InteractiveProcessorPrx __ret;
        try
        {
            __ret = __proxy->end_acquireProcessor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SharedResources_acquireProcessorPtr
newCallback_SharedResources_acquireProcessor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::InteractiveProcessorPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_acquireProcessor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_acquireProcessorPtr
newCallback_SharedResources_acquireProcessor(T* instance, void (T::*cb)(const ::omero::grid::InteractiveProcessorPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_acquireProcessor<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SharedResources_addProcessor : public Callback_SharedResources_addProcessor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SharedResources_addProcessor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addProcessor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_SharedResources_addProcessorPtr
newCallback_SharedResources_addProcessor(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_addProcessor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SharedResources_addProcessorPtr
newCallback_SharedResources_addProcessor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_addProcessor<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SharedResources_addProcessorPtr
newCallback_SharedResources_addProcessor(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_addProcessor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SharedResources_addProcessorPtr
newCallback_SharedResources_addProcessor(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_addProcessor<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SharedResources_addProcessor : public Callback_SharedResources_addProcessor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SharedResources_addProcessor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addProcessor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SharedResources_addProcessorPtr
newCallback_SharedResources_addProcessor(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_addProcessor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_addProcessorPtr
newCallback_SharedResources_addProcessor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_addProcessor<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_addProcessorPtr
newCallback_SharedResources_addProcessor(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_addProcessor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_addProcessorPtr
newCallback_SharedResources_addProcessor(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_addProcessor<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SharedResources_removeProcessor : public Callback_SharedResources_removeProcessor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SharedResources_removeProcessor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeProcessor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_SharedResources_removeProcessorPtr
newCallback_SharedResources_removeProcessor(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_removeProcessor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SharedResources_removeProcessorPtr
newCallback_SharedResources_removeProcessor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_removeProcessor<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SharedResources_removeProcessorPtr
newCallback_SharedResources_removeProcessor(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_removeProcessor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SharedResources_removeProcessorPtr
newCallback_SharedResources_removeProcessor(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_removeProcessor<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SharedResources_removeProcessor : public Callback_SharedResources_removeProcessor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SharedResources_removeProcessor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeProcessor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SharedResources_removeProcessorPtr
newCallback_SharedResources_removeProcessor(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_removeProcessor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_removeProcessorPtr
newCallback_SharedResources_removeProcessor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_removeProcessor<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_removeProcessorPtr
newCallback_SharedResources_removeProcessor(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_removeProcessor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_removeProcessorPtr
newCallback_SharedResources_removeProcessor(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_removeProcessor<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SharedResources_repositories : public Callback_SharedResources_repositories_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::grid::RepositoryMap&);

    CallbackNC_SharedResources_repositories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::RepositoryMap __ret;
        try
        {
            __ret = __proxy->end_repositories(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SharedResources_repositoriesPtr
newCallback_SharedResources_repositories(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::RepositoryMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_repositories<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SharedResources_repositoriesPtr
newCallback_SharedResources_repositories(T* instance, void (T::*cb)(const ::omero::grid::RepositoryMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_repositories<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SharedResources_repositories : public Callback_SharedResources_repositories_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::grid::RepositoryMap&, const CT&);

    Callback_SharedResources_repositories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::RepositoryMap __ret;
        try
        {
            __ret = __proxy->end_repositories(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SharedResources_repositoriesPtr
newCallback_SharedResources_repositories(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::RepositoryMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_repositories<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_repositoriesPtr
newCallback_SharedResources_repositories(T* instance, void (T::*cb)(const ::omero::grid::RepositoryMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_repositories<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SharedResources_getScriptRepository : public Callback_SharedResources_getScriptRepository_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::grid::RepositoryPrx&);

    CallbackNC_SharedResources_getScriptRepository(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::RepositoryPrx __ret;
        try
        {
            __ret = __proxy->end_getScriptRepository(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SharedResources_getScriptRepositoryPtr
newCallback_SharedResources_getScriptRepository(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::RepositoryPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_getScriptRepository<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SharedResources_getScriptRepositoryPtr
newCallback_SharedResources_getScriptRepository(T* instance, void (T::*cb)(const ::omero::grid::RepositoryPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_getScriptRepository<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SharedResources_getScriptRepository : public Callback_SharedResources_getScriptRepository_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::grid::RepositoryPrx&, const CT&);

    Callback_SharedResources_getScriptRepository(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::RepositoryPrx __ret;
        try
        {
            __ret = __proxy->end_getScriptRepository(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SharedResources_getScriptRepositoryPtr
newCallback_SharedResources_getScriptRepository(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::RepositoryPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_getScriptRepository<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_getScriptRepositoryPtr
newCallback_SharedResources_getScriptRepository(T* instance, void (T::*cb)(const ::omero::grid::RepositoryPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_getScriptRepository<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SharedResources_areTablesEnabled : public Callback_SharedResources_areTablesEnabled_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_SharedResources_areTablesEnabled(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_areTablesEnabled(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SharedResources_areTablesEnabledPtr
newCallback_SharedResources_areTablesEnabled(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_areTablesEnabled<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SharedResources_areTablesEnabledPtr
newCallback_SharedResources_areTablesEnabled(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_areTablesEnabled<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SharedResources_areTablesEnabled : public Callback_SharedResources_areTablesEnabled_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_SharedResources_areTablesEnabled(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_areTablesEnabled(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SharedResources_areTablesEnabledPtr
newCallback_SharedResources_areTablesEnabled(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_areTablesEnabled<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_areTablesEnabledPtr
newCallback_SharedResources_areTablesEnabled(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_areTablesEnabled<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SharedResources_newTable : public Callback_SharedResources_newTable_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::grid::TablePrx&);

    CallbackNC_SharedResources_newTable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::TablePrx __ret;
        try
        {
            __ret = __proxy->end_newTable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SharedResources_newTablePtr
newCallback_SharedResources_newTable(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::TablePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_newTable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SharedResources_newTablePtr
newCallback_SharedResources_newTable(T* instance, void (T::*cb)(const ::omero::grid::TablePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_newTable<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SharedResources_newTable : public Callback_SharedResources_newTable_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::grid::TablePrx&, const CT&);

    Callback_SharedResources_newTable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::TablePrx __ret;
        try
        {
            __ret = __proxy->end_newTable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SharedResources_newTablePtr
newCallback_SharedResources_newTable(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::TablePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_newTable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_newTablePtr
newCallback_SharedResources_newTable(T* instance, void (T::*cb)(const ::omero::grid::TablePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_newTable<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SharedResources_openTable : public Callback_SharedResources_openTable_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::grid::TablePrx&);

    CallbackNC_SharedResources_openTable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::TablePrx __ret;
        try
        {
            __ret = __proxy->end_openTable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SharedResources_openTablePtr
newCallback_SharedResources_openTable(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::TablePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_openTable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SharedResources_openTablePtr
newCallback_SharedResources_openTable(T* instance, void (T::*cb)(const ::omero::grid::TablePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SharedResources_openTable<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SharedResources_openTable : public Callback_SharedResources_openTable_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::grid::TablePrx&, const CT&);

    Callback_SharedResources_openTable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::SharedResourcesPrx __proxy = ::omero::grid::SharedResourcesPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::TablePrx __ret;
        try
        {
            __ret = __proxy->end_openTable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SharedResources_openTablePtr
newCallback_SharedResources_openTable(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::TablePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_openTable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SharedResources_openTablePtr
newCallback_SharedResources_openTable(T* instance, void (T::*cb)(const ::omero::grid::TablePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SharedResources_openTable<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
