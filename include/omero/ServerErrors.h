// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ServerErrors.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_ServerErrors_h__
#define __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_ServerErrors_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Glacier2/Session.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

}

namespace omero
{

class ServerError : public ::Ice::UserException
{
public:

    ServerError() {}
    ServerError(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~ServerError() throw();

    virtual ::std::string ice_name() const;
    virtual ServerError* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string serverStackTrace;
    ::std::string serverExceptionClass;
    ::std::string message;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static ServerError __ServerError_init;

class SessionException : public ::omero::ServerError
{
public:

    SessionException() {}
    SessionException(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~SessionException() throw();

    virtual ::std::string ice_name() const;
    virtual SessionException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ServerError::__writeImpl;
    using ::omero::ServerError::__readImpl;
    #endif
};

class RemovedSessionException : public ::omero::SessionException
{
public:

    RemovedSessionException() {}
    RemovedSessionException(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~RemovedSessionException() throw();

    virtual ::std::string ice_name() const;
    virtual RemovedSessionException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::SessionException::__writeImpl;
    using ::omero::SessionException::__readImpl;
    #endif
};

class SessionTimeoutException : public ::omero::SessionException
{
public:

    SessionTimeoutException() {}
    SessionTimeoutException(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~SessionTimeoutException() throw();

    virtual ::std::string ice_name() const;
    virtual SessionTimeoutException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::SessionException::__writeImpl;
    using ::omero::SessionException::__readImpl;
    #endif
};

class ShutdownInProgress : public ::omero::SessionException
{
public:

    ShutdownInProgress() {}
    ShutdownInProgress(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~ShutdownInProgress() throw();

    virtual ::std::string ice_name() const;
    virtual ShutdownInProgress* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::SessionException::__writeImpl;
    using ::omero::SessionException::__readImpl;
    #endif
};

class AuthenticationException : public ::Glacier2::CannotCreateSessionException
{
public:

    AuthenticationException() {}
    explicit AuthenticationException(const ::std::string&);
    virtual ~AuthenticationException() throw();

    virtual ::std::string ice_name() const;
    virtual AuthenticationException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Glacier2::CannotCreateSessionException::__writeImpl;
    using ::Glacier2::CannotCreateSessionException::__readImpl;
    #endif
};

class ExpiredCredentialException : public ::Glacier2::CannotCreateSessionException
{
public:

    ExpiredCredentialException() {}
    explicit ExpiredCredentialException(const ::std::string&);
    virtual ~ExpiredCredentialException() throw();

    virtual ::std::string ice_name() const;
    virtual ExpiredCredentialException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Glacier2::CannotCreateSessionException::__writeImpl;
    using ::Glacier2::CannotCreateSessionException::__readImpl;
    #endif
};

class WrappedCreateSessionException : public ::Glacier2::CannotCreateSessionException
{
public:

    WrappedCreateSessionException() {}
    WrappedCreateSessionException(const ::std::string&, bool, ::Ice::Long, const ::std::string&);
    virtual ~WrappedCreateSessionException() throw();

    virtual ::std::string ice_name() const;
    virtual WrappedCreateSessionException* ice_clone() const;
    virtual void ice_throw() const;

    bool concurrency;
    ::Ice::Long backOff;
    ::std::string type;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Glacier2::CannotCreateSessionException::__writeImpl;
    using ::Glacier2::CannotCreateSessionException::__readImpl;
    #endif
};

class InternalException : public ::omero::ServerError
{
public:

    InternalException() {}
    InternalException(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~InternalException() throw();

    virtual ::std::string ice_name() const;
    virtual InternalException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ServerError::__writeImpl;
    using ::omero::ServerError::__readImpl;
    #endif
};

class ResourceError : public ::omero::ServerError
{
public:

    ResourceError() {}
    ResourceError(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~ResourceError() throw();

    virtual ::std::string ice_name() const;
    virtual ResourceError* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ServerError::__writeImpl;
    using ::omero::ServerError::__readImpl;
    #endif
};

class NoProcessorAvailable : public ::omero::ResourceError
{
public:

    NoProcessorAvailable() {}
    NoProcessorAvailable(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int);
    virtual ~NoProcessorAvailable() throw();

    virtual ::std::string ice_name() const;
    virtual NoProcessorAvailable* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Int processorCount;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ResourceError::__writeImpl;
    using ::omero::ResourceError::__readImpl;
    #endif
};

class ConcurrencyException : public ::omero::ServerError
{
public:

    ConcurrencyException() {}
    ConcurrencyException(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long);
    virtual ~ConcurrencyException() throw();

    virtual ::std::string ice_name() const;
    virtual ConcurrencyException* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Long backOff;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ServerError::__writeImpl;
    using ::omero::ServerError::__readImpl;
    #endif
};

class ConcurrentModification : public ::omero::ConcurrencyException
{
public:

    ConcurrentModification() {}
    ConcurrentModification(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long);
    virtual ~ConcurrentModification() throw();

    virtual ::std::string ice_name() const;
    virtual ConcurrentModification* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ConcurrencyException::__writeImpl;
    using ::omero::ConcurrencyException::__readImpl;
    #endif
};

class DatabaseBusyException : public ::omero::ConcurrencyException
{
public:

    DatabaseBusyException() {}
    DatabaseBusyException(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long);
    virtual ~DatabaseBusyException() throw();

    virtual ::std::string ice_name() const;
    virtual DatabaseBusyException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ConcurrencyException::__writeImpl;
    using ::omero::ConcurrencyException::__readImpl;
    #endif
};

class OptimisticLockException : public ::omero::ConcurrencyException
{
public:

    OptimisticLockException() {}
    OptimisticLockException(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long);
    virtual ~OptimisticLockException() throw();

    virtual ::std::string ice_name() const;
    virtual OptimisticLockException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ConcurrencyException::__writeImpl;
    using ::omero::ConcurrencyException::__readImpl;
    #endif
};

class LockTimeout : public ::omero::ConcurrencyException
{
public:

    LockTimeout() {}
    LockTimeout(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int);
    virtual ~LockTimeout() throw();

    virtual ::std::string ice_name() const;
    virtual LockTimeout* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Int seconds;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ConcurrencyException::__writeImpl;
    using ::omero::ConcurrencyException::__readImpl;
    #endif
};

class TryAgain : public ::omero::ConcurrencyException
{
public:

    TryAgain() {}
    TryAgain(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long);
    virtual ~TryAgain() throw();

    virtual ::std::string ice_name() const;
    virtual TryAgain* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ConcurrencyException::__writeImpl;
    using ::omero::ConcurrencyException::__readImpl;
    #endif
};

class MissingPyramidException : public ::omero::ConcurrencyException
{
public:

    MissingPyramidException() {}
    MissingPyramidException(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Long);
    virtual ~MissingPyramidException() throw();

    virtual ::std::string ice_name() const;
    virtual MissingPyramidException* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Long pixelsID;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ConcurrencyException::__writeImpl;
    using ::omero::ConcurrencyException::__readImpl;
    #endif
};

class ApiUsageException : public ::omero::ServerError
{
public:

    ApiUsageException() {}
    ApiUsageException(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~ApiUsageException() throw();

    virtual ::std::string ice_name() const;
    virtual ApiUsageException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ServerError::__writeImpl;
    using ::omero::ServerError::__readImpl;
    #endif
};

class OverUsageException : public ::omero::ApiUsageException
{
public:

    OverUsageException() {}
    OverUsageException(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~OverUsageException() throw();

    virtual ::std::string ice_name() const;
    virtual OverUsageException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ApiUsageException::__writeImpl;
    using ::omero::ApiUsageException::__readImpl;
    #endif
};

class QueryException : public ::omero::ApiUsageException
{
public:

    QueryException() {}
    QueryException(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~QueryException() throw();

    virtual ::std::string ice_name() const;
    virtual QueryException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ApiUsageException::__writeImpl;
    using ::omero::ApiUsageException::__readImpl;
    #endif
};

class ValidationException : public ::omero::ApiUsageException
{
public:

    ValidationException() {}
    ValidationException(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~ValidationException() throw();

    virtual ::std::string ice_name() const;
    virtual ValidationException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ApiUsageException::__writeImpl;
    using ::omero::ApiUsageException::__readImpl;
    #endif
};

class ChecksumValidationException : public ::omero::ValidationException
{
public:

    ChecksumValidationException() {}
    ChecksumValidationException(const ::std::string&, const ::std::string&, const ::std::string&, const ::omero::api::IntStringMap&);
    virtual ~ChecksumValidationException() throw();

    virtual ::std::string ice_name() const;
    virtual ChecksumValidationException* ice_clone() const;
    virtual void ice_throw() const;

    ::omero::api::IntStringMap failingChecksums;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ValidationException::__writeImpl;
    using ::omero::ValidationException::__readImpl;
    #endif
};

class FilePathNamingException : public ::omero::ValidationException
{
public:

    FilePathNamingException() {}
    FilePathNamingException(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::omero::api::IntegerList&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::api::StringSet&);
    virtual ~FilePathNamingException() throw();

    virtual ::std::string ice_name() const;
    virtual FilePathNamingException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string illegalFilePath;
    ::omero::api::IntegerList illegalCodePoints;
    ::omero::api::StringSet illegalPrefixes;
    ::omero::api::StringSet illegalSuffixes;
    ::omero::api::StringSet illegalNames;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ValidationException::__writeImpl;
    using ::omero::ValidationException::__readImpl;
    #endif
};

class SecurityViolation : public ::omero::ServerError
{
public:

    SecurityViolation() {}
    SecurityViolation(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~SecurityViolation() throw();

    virtual ::std::string ice_name() const;
    virtual SecurityViolation* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ServerError::__writeImpl;
    using ::omero::ServerError::__readImpl;
    #endif
};

class GroupSecurityViolation : public ::omero::SecurityViolation
{
public:

    GroupSecurityViolation() {}
    GroupSecurityViolation(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~GroupSecurityViolation() throw();

    virtual ::std::string ice_name() const;
    virtual GroupSecurityViolation* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::SecurityViolation::__writeImpl;
    using ::omero::SecurityViolation::__readImpl;
    #endif
};

class PermissionMismatchGroupSecurityViolation : public ::omero::SecurityViolation
{
public:

    PermissionMismatchGroupSecurityViolation() {}
    PermissionMismatchGroupSecurityViolation(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~PermissionMismatchGroupSecurityViolation() throw();

    virtual ::std::string ice_name() const;
    virtual PermissionMismatchGroupSecurityViolation* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::SecurityViolation::__writeImpl;
    using ::omero::SecurityViolation::__readImpl;
    #endif
};

class ReadOnlyGroupSecurityViolation : public ::omero::SecurityViolation
{
public:

    ReadOnlyGroupSecurityViolation() {}
    ReadOnlyGroupSecurityViolation(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~ReadOnlyGroupSecurityViolation() throw();

    virtual ::std::string ice_name() const;
    virtual ReadOnlyGroupSecurityViolation* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::SecurityViolation::__writeImpl;
    using ::omero::SecurityViolation::__readImpl;
    #endif
};

class OmeroFSError : public ::omero::ServerError
{
public:

    OmeroFSError() {}
    OmeroFSError(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~OmeroFSError() throw();

    virtual ::std::string ice_name() const;
    virtual OmeroFSError* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string reason;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::ServerError::__writeImpl;
    using ::omero::ServerError::__readImpl;
    #endif
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::omero::ServerError>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::SessionException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::RemovedSessionException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::SessionTimeoutException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::ShutdownInProgress>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::AuthenticationException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::ExpiredCredentialException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::WrappedCreateSessionException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::InternalException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::ResourceError>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::NoProcessorAvailable>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::ConcurrencyException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::ConcurrentModification>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::DatabaseBusyException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::OptimisticLockException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::LockTimeout>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::TryAgain>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::MissingPyramidException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::ApiUsageException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::OverUsageException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::QueryException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::ValidationException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::ChecksumValidationException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::FilePathNamingException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::SecurityViolation>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::GroupSecurityViolation>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::PermissionMismatchGroupSecurityViolation>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::ReadOnlyGroupSecurityViolation>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::omero::OmeroFSError>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace IceProxy
{

}

namespace IceDelegate
{

}

namespace IceDelegateM
{

}

namespace IceDelegateD
{

}

#endif
