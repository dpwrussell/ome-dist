// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IScript.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IScript_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IScript_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ServicesF.h>
#include <omero/Scripts.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class IScript;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IScript>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IScript*);

}

}

}

namespace omero
{

namespace api
{

class IScript;
bool operator==(const IScript&, const IScript&);
bool operator<(const IScript&, const IScript&);
::Ice::Object* upCast(::omero::api::IScript*);
typedef ::IceInternal::Handle< ::omero::api::IScript> IScriptPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IScript> IScriptPrx;
void __patch(IScriptPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_IScript_getScripts : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::OriginalFileList&) = 0;

    void __response(const ::omero::api::OriginalFileList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_getScripts> AMI_IScript_getScriptsPtr;

class AMD_IScript_getScripts : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::OriginalFileList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_getScripts> AMD_IScript_getScriptsPtr;

class AMI_IScript_getUserScripts : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::OriginalFileList&) = 0;

    void __response(const ::omero::api::OriginalFileList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_getUserScripts> AMI_IScript_getUserScriptsPtr;

class AMD_IScript_getUserScripts : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::OriginalFileList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_getUserScripts> AMD_IScript_getUserScriptsPtr;

class AMI_IScript_getScriptID : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_getScriptID> AMI_IScript_getScriptIDPtr;

class AMD_IScript_getScriptID : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_getScriptID> AMD_IScript_getScriptIDPtr;

class AMI_IScript_getScriptText : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::string&) = 0;

    void __response(const ::std::string& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_getScriptText> AMI_IScript_getScriptTextPtr;

class AMD_IScript_getScriptText : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::string&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_getScriptText> AMD_IScript_getScriptTextPtr;

class AMI_IScript_uploadScript : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_uploadScript> AMI_IScript_uploadScriptPtr;

class AMD_IScript_uploadScript : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_uploadScript> AMD_IScript_uploadScriptPtr;

class AMI_IScript_uploadOfficialScript : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_uploadOfficialScript> AMI_IScript_uploadOfficialScriptPtr;

class AMD_IScript_uploadOfficialScript : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_uploadOfficialScript> AMD_IScript_uploadOfficialScriptPtr;

class AMI_IScript_editScript : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_editScript> AMI_IScript_editScriptPtr;

class AMD_IScript_editScript : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_editScript> AMD_IScript_editScriptPtr;

class AMI_IScript_getScriptWithDetails : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::RTypeDict&) = 0;

    void __response(const ::omero::RTypeDict& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_getScriptWithDetails> AMI_IScript_getScriptWithDetailsPtr;

class AMD_IScript_getScriptWithDetails : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::RTypeDict&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_getScriptWithDetails> AMD_IScript_getScriptWithDetailsPtr;

class AMI_IScript_getParams : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::grid::JobParamsPtr&) = 0;

    void __response(const ::omero::grid::JobParamsPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_getParams> AMI_IScript_getParamsPtr;

class AMD_IScript_getParams : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::grid::JobParamsPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_getParams> AMD_IScript_getParamsPtr;

class AMI_IScript_deleteScript : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_deleteScript> AMI_IScript_deleteScriptPtr;

class AMD_IScript_deleteScript : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_deleteScript> AMD_IScript_deleteScriptPtr;

class AMI_IScript_runScript : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::grid::ScriptProcessPrx&) = 0;

    void __response(const ::omero::grid::ScriptProcessPrx& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_runScript> AMI_IScript_runScriptPtr;

class AMD_IScript_runScript : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::grid::ScriptProcessPrx&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_runScript> AMD_IScript_runScriptPtr;

class AMI_IScript_canRunScript : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(bool) = 0;

    void __response(bool __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_canRunScript> AMI_IScript_canRunScriptPtr;

class AMD_IScript_canRunScript : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(bool) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_canRunScript> AMD_IScript_canRunScriptPtr;

class AMI_IScript_validateScript : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::OriginalFilePtr&) = 0;

    void __response(const ::omero::model::OriginalFilePtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IScript_validateScript> AMI_IScript_validateScriptPtr;

class AMD_IScript_validateScript : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::OriginalFilePtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IScript_validateScript> AMD_IScript_validateScriptPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_IScript_getScripts : public ::omero::api::AMD_IScript_getScripts, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_getScripts(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::OriginalFileList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_getUserScripts : public ::omero::api::AMD_IScript_getUserScripts, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_getUserScripts(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::OriginalFileList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_getScriptID : public ::omero::api::AMD_IScript_getScriptID, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_getScriptID(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_getScriptText : public ::omero::api::AMD_IScript_getScriptText, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_getScriptText(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_uploadScript : public ::omero::api::AMD_IScript_uploadScript, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_uploadScript(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_uploadOfficialScript : public ::omero::api::AMD_IScript_uploadOfficialScript, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_uploadOfficialScript(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_editScript : public ::omero::api::AMD_IScript_editScript, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_editScript(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_getScriptWithDetails : public ::omero::api::AMD_IScript_getScriptWithDetails, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_getScriptWithDetails(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::RTypeDict&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_getParams : public ::omero::api::AMD_IScript_getParams, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_getParams(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::grid::JobParamsPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_deleteScript : public ::omero::api::AMD_IScript_deleteScript, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_deleteScript(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_runScript : public ::omero::api::AMD_IScript_runScript, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_runScript(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::grid::ScriptProcessPrx&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_canRunScript : public ::omero::api::AMD_IScript_canRunScript, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_canRunScript(::IceInternal::Incoming&);

    virtual void ice_response(bool);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IScript_validateScript : public ::omero::api::AMD_IScript_validateScript, public ::IceInternal::IncomingAsync
{
public:

    AMD_IScript_validateScript(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::OriginalFilePtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_IScript_getScripts_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_getScripts_Base> Callback_IScript_getScriptsPtr;

class Callback_IScript_getUserScripts_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_getUserScripts_Base> Callback_IScript_getUserScriptsPtr;

class Callback_IScript_getScriptID_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_getScriptID_Base> Callback_IScript_getScriptIDPtr;

class Callback_IScript_getScriptText_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_getScriptText_Base> Callback_IScript_getScriptTextPtr;

class Callback_IScript_uploadScript_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_uploadScript_Base> Callback_IScript_uploadScriptPtr;

class Callback_IScript_uploadOfficialScript_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_uploadOfficialScript_Base> Callback_IScript_uploadOfficialScriptPtr;

class Callback_IScript_editScript_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_editScript_Base> Callback_IScript_editScriptPtr;

class Callback_IScript_getScriptWithDetails_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_getScriptWithDetails_Base> Callback_IScript_getScriptWithDetailsPtr;

class Callback_IScript_getParams_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_getParams_Base> Callback_IScript_getParamsPtr;

class Callback_IScript_deleteScript_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_deleteScript_Base> Callback_IScript_deleteScriptPtr;

class Callback_IScript_runScript_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_runScript_Base> Callback_IScript_runScriptPtr;

class Callback_IScript_canRunScript_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_canRunScript_Base> Callback_IScript_canRunScriptPtr;

class Callback_IScript_validateScript_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IScript_validateScript_Base> Callback_IScript_validateScriptPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class IScript : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    ::omero::api::OriginalFileList getScripts()
    {
        return getScripts(0);
    }
    ::omero::api::OriginalFileList getScripts(const ::Ice::Context& __ctx)
    {
        return getScripts(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getScripts(const ::IceInternal::Function<void (const ::omero::api::OriginalFileList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScripts(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScripts(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScripts(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getScripts(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::OriginalFileList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScripts(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScripts(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScripts(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getScripts(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::OriginalFileList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::OriginalFileList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                ::omero::api::OriginalFileList __ret;
                try
                {
                    __ret = __proxy->end_getScripts(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::OriginalFileList&)> _response;
        };
        return begin_getScripts(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getScripts()
    {
        return begin_getScripts(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScripts(const ::Ice::Context& __ctx)
    {
        return begin_getScripts(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScripts(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScripts(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScripts(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScripts(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScripts(const ::omero::api::Callback_IScript_getScriptsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScripts(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScripts(const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_getScriptsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScripts(&__ctx, __del, __cookie);
    }

    ::omero::api::OriginalFileList end_getScripts(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::OriginalFileList getScripts(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getScripts(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getScripts_async(const ::omero::api::AMI_IScript_getScriptsPtr&);
    bool getScripts_async(const ::omero::api::AMI_IScript_getScriptsPtr&, const ::Ice::Context&);

    ::omero::api::OriginalFileList getUserScripts(const ::omero::api::IObjectList& acceptsList)
    {
        return getUserScripts(acceptsList, 0);
    }
    ::omero::api::OriginalFileList getUserScripts(const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx)
    {
        return getUserScripts(acceptsList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getUserScripts(const ::omero::api::IObjectList& acceptsList, const ::IceInternal::Function<void (const ::omero::api::OriginalFileList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUserScripts(acceptsList, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUserScripts(const ::omero::api::IObjectList& acceptsList, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUserScripts(acceptsList, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getUserScripts(const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::OriginalFileList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUserScripts(acceptsList, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUserScripts(const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUserScripts(acceptsList, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getUserScripts(const ::omero::api::IObjectList& acceptsList, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::OriginalFileList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::OriginalFileList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                ::omero::api::OriginalFileList __ret;
                try
                {
                    __ret = __proxy->end_getUserScripts(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::OriginalFileList&)> _response;
        };
        return begin_getUserScripts(acceptsList, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getUserScripts(const ::omero::api::IObjectList& acceptsList)
    {
        return begin_getUserScripts(acceptsList, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUserScripts(const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx)
    {
        return begin_getUserScripts(acceptsList, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUserScripts(const ::omero::api::IObjectList& acceptsList, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUserScripts(acceptsList, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserScripts(const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUserScripts(acceptsList, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserScripts(const ::omero::api::IObjectList& acceptsList, const ::omero::api::Callback_IScript_getUserScriptsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUserScripts(acceptsList, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserScripts(const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_getUserScriptsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUserScripts(acceptsList, &__ctx, __del, __cookie);
    }

    ::omero::api::OriginalFileList end_getUserScripts(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::OriginalFileList getUserScripts(const ::omero::api::IObjectList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getUserScripts(const ::omero::api::IObjectList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getUserScripts_async(const ::omero::api::AMI_IScript_getUserScriptsPtr&, const ::omero::api::IObjectList&);
    bool getUserScripts_async(const ::omero::api::AMI_IScript_getUserScriptsPtr&, const ::omero::api::IObjectList&, const ::Ice::Context&);

    ::Ice::Long getScriptID(const ::std::string& path)
    {
        return getScriptID(path, 0);
    }
    ::Ice::Long getScriptID(const ::std::string& path, const ::Ice::Context& __ctx)
    {
        return getScriptID(path, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getScriptID(const ::std::string& path, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScriptID(path, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptID(const ::std::string& path, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScriptID(path, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptID(const ::std::string& path, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScriptID(path, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptID(const ::std::string& path, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScriptID(path, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getScriptID(const ::std::string& path, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_getScriptID(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_getScriptID(path, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getScriptID(const ::std::string& path)
    {
        return begin_getScriptID(path, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScriptID(const ::std::string& path, const ::Ice::Context& __ctx)
    {
        return begin_getScriptID(path, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScriptID(const ::std::string& path, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptID(path, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptID(const ::std::string& path, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptID(path, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptID(const ::std::string& path, const ::omero::api::Callback_IScript_getScriptIDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptID(path, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptID(const ::std::string& path, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_getScriptIDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptID(path, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_getScriptID(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long getScriptID(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getScriptID(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getScriptID_async(const ::omero::api::AMI_IScript_getScriptIDPtr&, const ::std::string&);
    bool getScriptID_async(const ::omero::api::AMI_IScript_getScriptIDPtr&, const ::std::string&, const ::Ice::Context&);

    ::std::string getScriptText(::Ice::Long scriptID)
    {
        return getScriptText(scriptID, 0);
    }
    ::std::string getScriptText(::Ice::Long scriptID, const ::Ice::Context& __ctx)
    {
        return getScriptText(scriptID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getScriptText(::Ice::Long scriptID, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScriptText(scriptID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptText(::Ice::Long scriptID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScriptText(scriptID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptText(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScriptText(scriptID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptText(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScriptText(scriptID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getScriptText(::Ice::Long scriptID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getScriptText(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getScriptText(scriptID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getScriptText(::Ice::Long scriptID)
    {
        return begin_getScriptText(scriptID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScriptText(::Ice::Long scriptID, const ::Ice::Context& __ctx)
    {
        return begin_getScriptText(scriptID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScriptText(::Ice::Long scriptID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptText(scriptID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptText(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptText(scriptID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptText(::Ice::Long scriptID, const ::omero::api::Callback_IScript_getScriptTextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptText(scriptID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptText(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_getScriptTextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptText(scriptID, &__ctx, __del, __cookie);
    }

    ::std::string end_getScriptText(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getScriptText(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getScriptText(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getScriptText_async(const ::omero::api::AMI_IScript_getScriptTextPtr&, ::Ice::Long);
    bool getScriptText_async(const ::omero::api::AMI_IScript_getScriptTextPtr&, ::Ice::Long, const ::Ice::Context&);

    ::Ice::Long uploadScript(const ::std::string& path, const ::std::string& scriptText)
    {
        return uploadScript(path, scriptText, 0);
    }
    ::Ice::Long uploadScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx)
    {
        return uploadScript(path, scriptText, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_uploadScript(const ::std::string& path, const ::std::string& scriptText, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadScript(path, scriptText, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadScript(const ::std::string& path, const ::std::string& scriptText, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadScript(path, scriptText, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_uploadScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadScript(path, scriptText, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadScript(path, scriptText, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_uploadScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_uploadScript(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_uploadScript(path, scriptText, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_uploadScript(const ::std::string& path, const ::std::string& scriptText)
    {
        return begin_uploadScript(path, scriptText, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx)
    {
        return begin_uploadScript(path, scriptText, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadScript(path, scriptText, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadScript(path, scriptText, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadScript(const ::std::string& path, const ::std::string& scriptText, const ::omero::api::Callback_IScript_uploadScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadScript(path, scriptText, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_uploadScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadScript(path, scriptText, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_uploadScript(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long uploadScript(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_uploadScript(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool uploadScript_async(const ::omero::api::AMI_IScript_uploadScriptPtr&, const ::std::string&, const ::std::string&);
    bool uploadScript_async(const ::omero::api::AMI_IScript_uploadScriptPtr&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    ::Ice::Long uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText)
    {
        return uploadOfficialScript(path, scriptText, 0);
    }
    ::Ice::Long uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx)
    {
        return uploadOfficialScript(path, scriptText, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadOfficialScript(path, scriptText, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadOfficialScript(path, scriptText, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadOfficialScript(path, scriptText, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadOfficialScript(path, scriptText, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_uploadOfficialScript(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_uploadOfficialScript(path, scriptText, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText)
    {
        return begin_uploadOfficialScript(path, scriptText, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx)
    {
        return begin_uploadOfficialScript(path, scriptText, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadOfficialScript(path, scriptText, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadOfficialScript(path, scriptText, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText, const ::omero::api::Callback_IScript_uploadOfficialScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadOfficialScript(path, scriptText, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadOfficialScript(const ::std::string& path, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_uploadOfficialScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadOfficialScript(path, scriptText, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_uploadOfficialScript(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long uploadOfficialScript(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_uploadOfficialScript(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool uploadOfficialScript_async(const ::omero::api::AMI_IScript_uploadOfficialScriptPtr&, const ::std::string&, const ::std::string&);
    bool uploadOfficialScript_async(const ::omero::api::AMI_IScript_uploadOfficialScriptPtr&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    void editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText)
    {
        editScript(fileObject, scriptText, 0);
    }
    void editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText, const ::Ice::Context& __ctx)
    {
        editScript(fileObject, scriptText, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_editScript(fileObject, scriptText, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_editScript(fileObject, scriptText, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_editScript(fileObject, scriptText, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_editScript(fileObject, scriptText, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_editScript(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_editScript(fileObject, scriptText, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText)
    {
        return begin_editScript(fileObject, scriptText, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText, const ::Ice::Context& __ctx)
    {
        return begin_editScript(fileObject, scriptText, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_editScript(fileObject, scriptText, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_editScript(fileObject, scriptText, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText, const ::omero::api::Callback_IScript_editScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_editScript(fileObject, scriptText, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_editScript(const ::omero::model::OriginalFilePtr& fileObject, const ::std::string& scriptText, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_editScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_editScript(fileObject, scriptText, &__ctx, __del, __cookie);
    }

    void end_editScript(const ::Ice::AsyncResultPtr&);
    
private:

    void editScript(const ::omero::model::OriginalFilePtr&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_editScript(const ::omero::model::OriginalFilePtr&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool editScript_async(const ::omero::api::AMI_IScript_editScriptPtr&, const ::omero::model::OriginalFilePtr&, const ::std::string&);
    bool editScript_async(const ::omero::api::AMI_IScript_editScriptPtr&, const ::omero::model::OriginalFilePtr&, const ::std::string&, const ::Ice::Context&);

    ::omero::RTypeDict getScriptWithDetails(::Ice::Long scriptID)
    {
        return getScriptWithDetails(scriptID, 0);
    }
    ::omero::RTypeDict getScriptWithDetails(::Ice::Long scriptID, const ::Ice::Context& __ctx)
    {
        return getScriptWithDetails(scriptID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getScriptWithDetails(::Ice::Long scriptID, const ::IceInternal::Function<void (const ::omero::RTypeDict&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScriptWithDetails(scriptID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptWithDetails(::Ice::Long scriptID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScriptWithDetails(scriptID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptWithDetails(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTypeDict&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScriptWithDetails(scriptID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScriptWithDetails(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScriptWithDetails(scriptID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getScriptWithDetails(::Ice::Long scriptID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTypeDict&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTypeDict&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                ::omero::RTypeDict __ret;
                try
                {
                    __ret = __proxy->end_getScriptWithDetails(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTypeDict&)> _response;
        };
        return begin_getScriptWithDetails(scriptID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getScriptWithDetails(::Ice::Long scriptID)
    {
        return begin_getScriptWithDetails(scriptID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScriptWithDetails(::Ice::Long scriptID, const ::Ice::Context& __ctx)
    {
        return begin_getScriptWithDetails(scriptID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScriptWithDetails(::Ice::Long scriptID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptWithDetails(scriptID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptWithDetails(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptWithDetails(scriptID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptWithDetails(::Ice::Long scriptID, const ::omero::api::Callback_IScript_getScriptWithDetailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptWithDetails(scriptID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScriptWithDetails(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_getScriptWithDetailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScriptWithDetails(scriptID, &__ctx, __del, __cookie);
    }

    ::omero::RTypeDict end_getScriptWithDetails(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTypeDict getScriptWithDetails(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getScriptWithDetails(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getScriptWithDetails_async(const ::omero::api::AMI_IScript_getScriptWithDetailsPtr&, ::Ice::Long);
    bool getScriptWithDetails_async(const ::omero::api::AMI_IScript_getScriptWithDetailsPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::grid::JobParamsPtr getParams(::Ice::Long scriptID)
    {
        return getParams(scriptID, 0);
    }
    ::omero::grid::JobParamsPtr getParams(::Ice::Long scriptID, const ::Ice::Context& __ctx)
    {
        return getParams(scriptID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getParams(::Ice::Long scriptID, const ::IceInternal::Function<void (const ::omero::grid::JobParamsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getParams(scriptID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getParams(::Ice::Long scriptID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getParams(scriptID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getParams(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::grid::JobParamsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getParams(scriptID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getParams(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getParams(scriptID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getParams(::Ice::Long scriptID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::grid::JobParamsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::grid::JobParamsPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                ::omero::grid::JobParamsPtr __ret;
                try
                {
                    __ret = __proxy->end_getParams(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::grid::JobParamsPtr&)> _response;
        };
        return begin_getParams(scriptID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getParams(::Ice::Long scriptID)
    {
        return begin_getParams(scriptID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getParams(::Ice::Long scriptID, const ::Ice::Context& __ctx)
    {
        return begin_getParams(scriptID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getParams(::Ice::Long scriptID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParams(scriptID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParams(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParams(scriptID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParams(::Ice::Long scriptID, const ::omero::api::Callback_IScript_getParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParams(scriptID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParams(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_getParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParams(scriptID, &__ctx, __del, __cookie);
    }

    ::omero::grid::JobParamsPtr end_getParams(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::grid::JobParamsPtr getParams(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getParams(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getParams_async(const ::omero::api::AMI_IScript_getParamsPtr&, ::Ice::Long);
    bool getParams_async(const ::omero::api::AMI_IScript_getParamsPtr&, ::Ice::Long, const ::Ice::Context&);

    void deleteScript(::Ice::Long scriptID)
    {
        deleteScript(scriptID, 0);
    }
    void deleteScript(::Ice::Long scriptID, const ::Ice::Context& __ctx)
    {
        deleteScript(scriptID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteScript(::Ice::Long scriptID, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteScript(scriptID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteScript(::Ice::Long scriptID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteScript(scriptID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteScript(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteScript(scriptID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteScript(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteScript(scriptID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteScript(::Ice::Long scriptID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deleteScript(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deleteScript(scriptID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteScript(::Ice::Long scriptID)
    {
        return begin_deleteScript(scriptID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteScript(::Ice::Long scriptID, const ::Ice::Context& __ctx)
    {
        return begin_deleteScript(scriptID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteScript(::Ice::Long scriptID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteScript(scriptID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteScript(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteScript(scriptID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteScript(::Ice::Long scriptID, const ::omero::api::Callback_IScript_deleteScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteScript(scriptID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteScript(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_deleteScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteScript(scriptID, &__ctx, __del, __cookie);
    }

    void end_deleteScript(const ::Ice::AsyncResultPtr&);
    
private:

    void deleteScript(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteScript(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool deleteScript_async(const ::omero::api::AMI_IScript_deleteScriptPtr&, ::Ice::Long);
    bool deleteScript_async(const ::omero::api::AMI_IScript_deleteScriptPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::grid::ScriptProcessPrx runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs)
    {
        return runScript(scriptID, inputs, waitSecs, 0);
    }
    ::omero::grid::ScriptProcessPrx runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs, const ::Ice::Context& __ctx)
    {
        return runScript(scriptID, inputs, waitSecs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs, const ::IceInternal::Function<void (const ::omero::grid::ScriptProcessPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runScript(scriptID, inputs, waitSecs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runScript(scriptID, inputs, waitSecs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::grid::ScriptProcessPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runScript(scriptID, inputs, waitSecs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runScript(scriptID, inputs, waitSecs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::grid::ScriptProcessPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::grid::ScriptProcessPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                ::omero::grid::ScriptProcessPrx __ret;
                try
                {
                    __ret = __proxy->end_runScript(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::grid::ScriptProcessPrx&)> _response;
        };
        return begin_runScript(scriptID, inputs, waitSecs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs)
    {
        return begin_runScript(scriptID, inputs, waitSecs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs, const ::Ice::Context& __ctx)
    {
        return begin_runScript(scriptID, inputs, waitSecs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runScript(scriptID, inputs, waitSecs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runScript(scriptID, inputs, waitSecs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs, const ::omero::api::Callback_IScript_runScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runScript(scriptID, inputs, waitSecs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runScript(::Ice::Long scriptID, const ::omero::RTypeDict& inputs, const ::omero::RIntPtr& waitSecs, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_runScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runScript(scriptID, inputs, waitSecs, &__ctx, __del, __cookie);
    }

    ::omero::grid::ScriptProcessPrx end_runScript(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::grid::ScriptProcessPrx runScript(::Ice::Long, const ::omero::RTypeDict&, const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_runScript(::Ice::Long, const ::omero::RTypeDict&, const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool runScript_async(const ::omero::api::AMI_IScript_runScriptPtr&, ::Ice::Long, const ::omero::RTypeDict&, const ::omero::RIntPtr&);
    bool runScript_async(const ::omero::api::AMI_IScript_runScriptPtr&, ::Ice::Long, const ::omero::RTypeDict&, const ::omero::RIntPtr&, const ::Ice::Context&);

    bool canRunScript(::Ice::Long scriptID)
    {
        return canRunScript(scriptID, 0);
    }
    bool canRunScript(::Ice::Long scriptID, const ::Ice::Context& __ctx)
    {
        return canRunScript(scriptID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_canRunScript(::Ice::Long scriptID, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canRunScript(scriptID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canRunScript(::Ice::Long scriptID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canRunScript(scriptID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_canRunScript(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canRunScript(scriptID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canRunScript(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canRunScript(scriptID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_canRunScript(::Ice::Long scriptID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_canRunScript(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_canRunScript(scriptID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_canRunScript(::Ice::Long scriptID)
    {
        return begin_canRunScript(scriptID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canRunScript(::Ice::Long scriptID, const ::Ice::Context& __ctx)
    {
        return begin_canRunScript(scriptID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canRunScript(::Ice::Long scriptID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canRunScript(scriptID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canRunScript(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canRunScript(scriptID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canRunScript(::Ice::Long scriptID, const ::omero::api::Callback_IScript_canRunScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canRunScript(scriptID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canRunScript(::Ice::Long scriptID, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_canRunScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canRunScript(scriptID, &__ctx, __del, __cookie);
    }

    bool end_canRunScript(const ::Ice::AsyncResultPtr&);
    
private:

    bool canRunScript(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_canRunScript(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool canRunScript_async(const ::omero::api::AMI_IScript_canRunScriptPtr&, ::Ice::Long);
    bool canRunScript_async(const ::omero::api::AMI_IScript_canRunScriptPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::model::OriginalFilePtr validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList)
    {
        return validateScript(j, acceptsList, 0);
    }
    ::omero::model::OriginalFilePtr validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx)
    {
        return validateScript(j, acceptsList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList, const ::IceInternal::Function<void (const ::omero::model::OriginalFilePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_validateScript(j, acceptsList, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_validateScript(j, acceptsList, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFilePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_validateScript(j, acceptsList, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_validateScript(j, acceptsList, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFilePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::OriginalFilePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
                ::omero::model::OriginalFilePtr __ret;
                try
                {
                    __ret = __proxy->end_validateScript(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::OriginalFilePtr&)> _response;
        };
        return begin_validateScript(j, acceptsList, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList)
    {
        return begin_validateScript(j, acceptsList, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx)
    {
        return begin_validateScript(j, acceptsList, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_validateScript(j, acceptsList, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_validateScript(j, acceptsList, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList, const ::omero::api::Callback_IScript_validateScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_validateScript(j, acceptsList, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_validateScript(const ::omero::model::JobPtr& j, const ::omero::api::IObjectList& acceptsList, const ::Ice::Context& __ctx, const ::omero::api::Callback_IScript_validateScriptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_validateScript(j, acceptsList, &__ctx, __del, __cookie);
    }

    ::omero::model::OriginalFilePtr end_validateScript(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::OriginalFilePtr validateScript(const ::omero::model::JobPtr&, const ::omero::api::IObjectList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_validateScript(const ::omero::model::JobPtr&, const ::omero::api::IObjectList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool validateScript_async(const ::omero::api::AMI_IScript_validateScriptPtr&, const ::omero::model::JobPtr&, const ::omero::api::IObjectList&);
    bool validateScript_async(const ::omero::api::AMI_IScript_validateScriptPtr&, const ::omero::model::JobPtr&, const ::omero::api::IObjectList&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<IScript> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_secure(bool __secure) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_twoway() const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_oneway() const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_batchOneway() const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_datagram() const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_batchDatagram() const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_compress(bool __compress) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_timeout(int __timeout) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IScript> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<IScript*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class IScript : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::OriginalFileList getScripts(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::OriginalFileList getUserScripts(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long getScriptID(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getScriptText(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long uploadScript(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long uploadOfficialScript(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void editScript(const ::omero::model::OriginalFilePtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTypeDict getScriptWithDetails(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::grid::JobParamsPtr getParams(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deleteScript(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::grid::ScriptProcessPrx runScript(::Ice::Long, const ::omero::RTypeDict&, const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool canRunScript(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::OriginalFilePtr validateScript(const ::omero::model::JobPtr&, const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class IScript : virtual public ::IceDelegate::omero::api::IScript,
                virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::OriginalFileList getScripts(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::OriginalFileList getUserScripts(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long getScriptID(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getScriptText(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long uploadScript(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long uploadOfficialScript(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void editScript(const ::omero::model::OriginalFilePtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTypeDict getScriptWithDetails(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::JobParamsPtr getParams(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteScript(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::ScriptProcessPrx runScript(::Ice::Long, const ::omero::RTypeDict&, const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool canRunScript(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFilePtr validateScript(const ::omero::model::JobPtr&, const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class IScript : virtual public ::IceDelegate::omero::api::IScript,
                virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::OriginalFileList getScripts(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::OriginalFileList getUserScripts(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long getScriptID(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getScriptText(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long uploadScript(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long uploadOfficialScript(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void editScript(const ::omero::model::OriginalFilePtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTypeDict getScriptWithDetails(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::JobParamsPtr getParams(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteScript(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::ScriptProcessPrx runScript(::Ice::Long, const ::omero::RTypeDict&, const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool canRunScript(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFilePtr validateScript(const ::omero::model::JobPtr&, const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class IScript : virtual public ::omero::api::ServiceInterface
{
public:

    typedef IScriptPrx ProxyType;
    typedef IScriptPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void getScripts_async(const ::omero::api::AMD_IScript_getScriptsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getScripts(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getUserScripts_async(const ::omero::api::AMD_IScript_getUserScriptsPtr&, const ::omero::api::IObjectList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getUserScripts(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getScriptID_async(const ::omero::api::AMD_IScript_getScriptIDPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getScriptID(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getScriptText_async(const ::omero::api::AMD_IScript_getScriptTextPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getScriptText(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void uploadScript_async(const ::omero::api::AMD_IScript_uploadScriptPtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___uploadScript(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void uploadOfficialScript_async(const ::omero::api::AMD_IScript_uploadOfficialScriptPtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___uploadOfficialScript(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void editScript_async(const ::omero::api::AMD_IScript_editScriptPtr&, const ::omero::model::OriginalFilePtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___editScript(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getScriptWithDetails_async(const ::omero::api::AMD_IScript_getScriptWithDetailsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getScriptWithDetails(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getParams_async(const ::omero::api::AMD_IScript_getParamsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void deleteScript_async(const ::omero::api::AMD_IScript_deleteScriptPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteScript(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void runScript_async(const ::omero::api::AMD_IScript_runScriptPtr&, ::Ice::Long, const ::omero::RTypeDict&, const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___runScript(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void canRunScript_async(const ::omero::api::AMD_IScript_canRunScriptPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___canRunScript(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void validateScript_async(const ::omero::api::AMD_IScript_validateScriptPtr&, const ::omero::model::JobPtr&, const ::omero::api::IObjectList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___validateScript(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const IScript& l, const IScript& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IScript& l, const IScript& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_IScript_getScripts : public Callback_IScript_getScripts_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::OriginalFileList&);

    CallbackNC_IScript_getScripts(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::api::OriginalFileList __ret;
        try
        {
            __ret = __proxy->end_getScripts(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IScript_getScriptsPtr
newCallback_IScript_getScripts(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::OriginalFileList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getScripts<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_getScriptsPtr
newCallback_IScript_getScripts(T* instance, void (T::*cb)(const ::omero::api::OriginalFileList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getScripts<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_getScripts : public Callback_IScript_getScripts_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::OriginalFileList&, const CT&);

    Callback_IScript_getScripts(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::api::OriginalFileList __ret;
        try
        {
            __ret = __proxy->end_getScripts(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_getScriptsPtr
newCallback_IScript_getScripts(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::OriginalFileList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getScripts<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_getScriptsPtr
newCallback_IScript_getScripts(T* instance, void (T::*cb)(const ::omero::api::OriginalFileList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getScripts<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_getUserScripts : public Callback_IScript_getUserScripts_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::OriginalFileList&);

    CallbackNC_IScript_getUserScripts(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::api::OriginalFileList __ret;
        try
        {
            __ret = __proxy->end_getUserScripts(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IScript_getUserScriptsPtr
newCallback_IScript_getUserScripts(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::OriginalFileList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getUserScripts<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_getUserScriptsPtr
newCallback_IScript_getUserScripts(T* instance, void (T::*cb)(const ::omero::api::OriginalFileList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getUserScripts<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_getUserScripts : public Callback_IScript_getUserScripts_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::OriginalFileList&, const CT&);

    Callback_IScript_getUserScripts(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::api::OriginalFileList __ret;
        try
        {
            __ret = __proxy->end_getUserScripts(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_getUserScriptsPtr
newCallback_IScript_getUserScripts(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::OriginalFileList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getUserScripts<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_getUserScriptsPtr
newCallback_IScript_getUserScripts(T* instance, void (T::*cb)(const ::omero::api::OriginalFileList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getUserScripts<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_getScriptID : public Callback_IScript_getScriptID_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_IScript_getScriptID(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getScriptID(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IScript_getScriptIDPtr
newCallback_IScript_getScriptID(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getScriptID<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_getScriptIDPtr
newCallback_IScript_getScriptID(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getScriptID<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_getScriptID : public Callback_IScript_getScriptID_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_IScript_getScriptID(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getScriptID(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_getScriptIDPtr
newCallback_IScript_getScriptID(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getScriptID<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_getScriptIDPtr
newCallback_IScript_getScriptID(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getScriptID<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_getScriptText : public Callback_IScript_getScriptText_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_IScript_getScriptText(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getScriptText(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IScript_getScriptTextPtr
newCallback_IScript_getScriptText(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getScriptText<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_getScriptTextPtr
newCallback_IScript_getScriptText(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getScriptText<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_getScriptText : public Callback_IScript_getScriptText_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_IScript_getScriptText(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getScriptText(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_getScriptTextPtr
newCallback_IScript_getScriptText(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getScriptText<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_getScriptTextPtr
newCallback_IScript_getScriptText(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getScriptText<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_uploadScript : public Callback_IScript_uploadScript_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_IScript_uploadScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_uploadScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IScript_uploadScriptPtr
newCallback_IScript_uploadScript(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_uploadScript<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_uploadScriptPtr
newCallback_IScript_uploadScript(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_uploadScript<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_uploadScript : public Callback_IScript_uploadScript_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_IScript_uploadScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_uploadScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_uploadScriptPtr
newCallback_IScript_uploadScript(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_uploadScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_uploadScriptPtr
newCallback_IScript_uploadScript(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_uploadScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_uploadOfficialScript : public Callback_IScript_uploadOfficialScript_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_IScript_uploadOfficialScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_uploadOfficialScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IScript_uploadOfficialScriptPtr
newCallback_IScript_uploadOfficialScript(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_uploadOfficialScript<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_uploadOfficialScriptPtr
newCallback_IScript_uploadOfficialScript(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_uploadOfficialScript<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_uploadOfficialScript : public Callback_IScript_uploadOfficialScript_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_IScript_uploadOfficialScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_uploadOfficialScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_uploadOfficialScriptPtr
newCallback_IScript_uploadOfficialScript(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_uploadOfficialScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_uploadOfficialScriptPtr
newCallback_IScript_uploadOfficialScript(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_uploadOfficialScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_editScript : public Callback_IScript_editScript_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IScript_editScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_editScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IScript_editScriptPtr
newCallback_IScript_editScript(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_editScript<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_editScriptPtr
newCallback_IScript_editScript(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_editScript<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IScript_editScriptPtr
newCallback_IScript_editScript(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_editScript<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_editScriptPtr
newCallback_IScript_editScript(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_editScript<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_editScript : public Callback_IScript_editScript_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IScript_editScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_editScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_editScriptPtr
newCallback_IScript_editScript(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_editScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_editScriptPtr
newCallback_IScript_editScript(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_editScript<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_editScriptPtr
newCallback_IScript_editScript(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_editScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_editScriptPtr
newCallback_IScript_editScript(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_editScript<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_getScriptWithDetails : public Callback_IScript_getScriptWithDetails_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTypeDict&);

    CallbackNC_IScript_getScriptWithDetails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::RTypeDict __ret;
        try
        {
            __ret = __proxy->end_getScriptWithDetails(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IScript_getScriptWithDetailsPtr
newCallback_IScript_getScriptWithDetails(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTypeDict&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getScriptWithDetails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_getScriptWithDetailsPtr
newCallback_IScript_getScriptWithDetails(T* instance, void (T::*cb)(const ::omero::RTypeDict&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getScriptWithDetails<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_getScriptWithDetails : public Callback_IScript_getScriptWithDetails_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTypeDict&, const CT&);

    Callback_IScript_getScriptWithDetails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::RTypeDict __ret;
        try
        {
            __ret = __proxy->end_getScriptWithDetails(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_getScriptWithDetailsPtr
newCallback_IScript_getScriptWithDetails(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTypeDict&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getScriptWithDetails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_getScriptWithDetailsPtr
newCallback_IScript_getScriptWithDetails(T* instance, void (T::*cb)(const ::omero::RTypeDict&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getScriptWithDetails<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_getParams : public Callback_IScript_getParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::grid::JobParamsPtr&);

    CallbackNC_IScript_getParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::JobParamsPtr __ret;
        try
        {
            __ret = __proxy->end_getParams(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IScript_getParamsPtr
newCallback_IScript_getParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::JobParamsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_getParamsPtr
newCallback_IScript_getParams(T* instance, void (T::*cb)(const ::omero::grid::JobParamsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_getParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_getParams : public Callback_IScript_getParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::grid::JobParamsPtr&, const CT&);

    Callback_IScript_getParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::JobParamsPtr __ret;
        try
        {
            __ret = __proxy->end_getParams(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_getParamsPtr
newCallback_IScript_getParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::JobParamsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_getParamsPtr
newCallback_IScript_getParams(T* instance, void (T::*cb)(const ::omero::grid::JobParamsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_getParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_deleteScript : public Callback_IScript_deleteScript_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IScript_deleteScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IScript_deleteScriptPtr
newCallback_IScript_deleteScript(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_deleteScript<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_deleteScriptPtr
newCallback_IScript_deleteScript(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_deleteScript<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IScript_deleteScriptPtr
newCallback_IScript_deleteScript(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_deleteScript<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_deleteScriptPtr
newCallback_IScript_deleteScript(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_deleteScript<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_deleteScript : public Callback_IScript_deleteScript_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IScript_deleteScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_deleteScriptPtr
newCallback_IScript_deleteScript(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_deleteScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_deleteScriptPtr
newCallback_IScript_deleteScript(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_deleteScript<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_deleteScriptPtr
newCallback_IScript_deleteScript(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_deleteScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_deleteScriptPtr
newCallback_IScript_deleteScript(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_deleteScript<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_runScript : public Callback_IScript_runScript_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::grid::ScriptProcessPrx&);

    CallbackNC_IScript_runScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::ScriptProcessPrx __ret;
        try
        {
            __ret = __proxy->end_runScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IScript_runScriptPtr
newCallback_IScript_runScript(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::ScriptProcessPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_runScript<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_runScriptPtr
newCallback_IScript_runScript(T* instance, void (T::*cb)(const ::omero::grid::ScriptProcessPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_runScript<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_runScript : public Callback_IScript_runScript_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::grid::ScriptProcessPrx&, const CT&);

    Callback_IScript_runScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::ScriptProcessPrx __ret;
        try
        {
            __ret = __proxy->end_runScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_runScriptPtr
newCallback_IScript_runScript(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::ScriptProcessPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_runScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_runScriptPtr
newCallback_IScript_runScript(T* instance, void (T::*cb)(const ::omero::grid::ScriptProcessPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_runScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_canRunScript : public Callback_IScript_canRunScript_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_IScript_canRunScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canRunScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IScript_canRunScriptPtr
newCallback_IScript_canRunScript(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_canRunScript<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_canRunScriptPtr
newCallback_IScript_canRunScript(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_canRunScript<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_canRunScript : public Callback_IScript_canRunScript_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_IScript_canRunScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canRunScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_canRunScriptPtr
newCallback_IScript_canRunScript(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_canRunScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_canRunScriptPtr
newCallback_IScript_canRunScript(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_canRunScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IScript_validateScript : public Callback_IScript_validateScript_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::OriginalFilePtr&);

    CallbackNC_IScript_validateScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFilePtr __ret;
        try
        {
            __ret = __proxy->end_validateScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IScript_validateScriptPtr
newCallback_IScript_validateScript(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFilePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_validateScript<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IScript_validateScriptPtr
newCallback_IScript_validateScript(T* instance, void (T::*cb)(const ::omero::model::OriginalFilePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IScript_validateScript<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IScript_validateScript : public Callback_IScript_validateScript_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::OriginalFilePtr&, const CT&);

    Callback_IScript_validateScript(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IScriptPrx __proxy = ::omero::api::IScriptPrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFilePtr __ret;
        try
        {
            __ret = __proxy->end_validateScript(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IScript_validateScriptPtr
newCallback_IScript_validateScript(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFilePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_validateScript<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IScript_validateScriptPtr
newCallback_IScript_validateScript(T* instance, void (T::*cb)(const ::omero::model::OriginalFilePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IScript_validateScript<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
