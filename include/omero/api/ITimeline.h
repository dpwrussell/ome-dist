// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ITimeline.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_ITimeline_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_ITimeline_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ModelF.h>
#include <omero/ServicesF.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class ITimeline;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ITimeline>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::ITimeline*);

}

}

}

namespace omero
{

namespace api
{

class ITimeline;
bool operator==(const ITimeline&, const ITimeline&);
bool operator<(const ITimeline&, const ITimeline&);
::Ice::Object* upCast(::omero::api::ITimeline*);
typedef ::IceInternal::Handle< ::omero::api::ITimeline> ITimelinePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ITimeline> ITimelinePrx;
void __patch(ITimelinePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_ITimeline_getMostRecentAnnotationLinks : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ITimeline_getMostRecentAnnotationLinks> AMI_ITimeline_getMostRecentAnnotationLinksPtr;

class AMD_ITimeline_getMostRecentAnnotationLinks : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ITimeline_getMostRecentAnnotationLinks> AMD_ITimeline_getMostRecentAnnotationLinksPtr;

class AMI_ITimeline_getMostRecentShareCommentLinks : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ITimeline_getMostRecentShareCommentLinks> AMI_ITimeline_getMostRecentShareCommentLinksPtr;

class AMD_ITimeline_getMostRecentShareCommentLinks : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ITimeline_getMostRecentShareCommentLinks> AMD_ITimeline_getMostRecentShareCommentLinksPtr;

class AMI_ITimeline_getMostRecentObjects : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectListMap&) = 0;

    void __response(const ::omero::api::IObjectListMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ITimeline_getMostRecentObjects> AMI_ITimeline_getMostRecentObjectsPtr;

class AMD_ITimeline_getMostRecentObjects : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectListMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ITimeline_getMostRecentObjects> AMD_ITimeline_getMostRecentObjectsPtr;

class AMI_ITimeline_getByPeriod : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectListMap&) = 0;

    void __response(const ::omero::api::IObjectListMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ITimeline_getByPeriod> AMI_ITimeline_getByPeriodPtr;

class AMD_ITimeline_getByPeriod : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectListMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ITimeline_getByPeriod> AMD_ITimeline_getByPeriodPtr;

class AMI_ITimeline_countByPeriod : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::StringLongMap&) = 0;

    void __response(const ::omero::api::StringLongMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ITimeline_countByPeriod> AMI_ITimeline_countByPeriodPtr;

class AMD_ITimeline_countByPeriod : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::StringLongMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ITimeline_countByPeriod> AMD_ITimeline_countByPeriodPtr;

class AMI_ITimeline_getEventLogsByPeriod : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::EventLogList&) = 0;

    void __response(const ::omero::api::EventLogList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ITimeline_getEventLogsByPeriod> AMI_ITimeline_getEventLogsByPeriodPtr;

class AMD_ITimeline_getEventLogsByPeriod : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::EventLogList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ITimeline_getEventLogsByPeriod> AMD_ITimeline_getEventLogsByPeriodPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_ITimeline_getMostRecentAnnotationLinks : public ::omero::api::AMD_ITimeline_getMostRecentAnnotationLinks, public ::IceInternal::IncomingAsync
{
public:

    AMD_ITimeline_getMostRecentAnnotationLinks(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ITimeline_getMostRecentShareCommentLinks : public ::omero::api::AMD_ITimeline_getMostRecentShareCommentLinks, public ::IceInternal::IncomingAsync
{
public:

    AMD_ITimeline_getMostRecentShareCommentLinks(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ITimeline_getMostRecentObjects : public ::omero::api::AMD_ITimeline_getMostRecentObjects, public ::IceInternal::IncomingAsync
{
public:

    AMD_ITimeline_getMostRecentObjects(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectListMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ITimeline_getByPeriod : public ::omero::api::AMD_ITimeline_getByPeriod, public ::IceInternal::IncomingAsync
{
public:

    AMD_ITimeline_getByPeriod(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectListMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ITimeline_countByPeriod : public ::omero::api::AMD_ITimeline_countByPeriod, public ::IceInternal::IncomingAsync
{
public:

    AMD_ITimeline_countByPeriod(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::StringLongMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ITimeline_getEventLogsByPeriod : public ::omero::api::AMD_ITimeline_getEventLogsByPeriod, public ::IceInternal::IncomingAsync
{
public:

    AMD_ITimeline_getEventLogsByPeriod(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::EventLogList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_ITimeline_getMostRecentAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ITimeline_getMostRecentAnnotationLinks_Base> Callback_ITimeline_getMostRecentAnnotationLinksPtr;

class Callback_ITimeline_getMostRecentShareCommentLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ITimeline_getMostRecentShareCommentLinks_Base> Callback_ITimeline_getMostRecentShareCommentLinksPtr;

class Callback_ITimeline_getMostRecentObjects_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ITimeline_getMostRecentObjects_Base> Callback_ITimeline_getMostRecentObjectsPtr;

class Callback_ITimeline_getByPeriod_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ITimeline_getByPeriod_Base> Callback_ITimeline_getByPeriodPtr;

class Callback_ITimeline_countByPeriod_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ITimeline_countByPeriod_Base> Callback_ITimeline_countByPeriodPtr;

class Callback_ITimeline_getEventLogsByPeriod_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ITimeline_getEventLogsByPeriod_Base> Callback_ITimeline_getEventLogsByPeriodPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class ITimeline : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    ::omero::api::IObjectList getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p)
    {
        return getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, 0);
    }
    ::omero::api::IObjectList getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx)
    {
        return getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_getMostRecentAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p)
    {
        return begin_getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx)
    {
        return begin_getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p, const ::omero::api::Callback_ITimeline_getMostRecentAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet& parentTypes, const ::omero::api::StringSet& childTypes, const ::omero::api::StringSet& namespaces, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::omero::api::Callback_ITimeline_getMostRecentAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentAnnotationLinks(parentTypes, childTypes, namespaces, p, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_getMostRecentAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList getMostRecentAnnotationLinks(const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMostRecentAnnotationLinks(const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getMostRecentAnnotationLinks_async(const ::omero::api::AMI_ITimeline_getMostRecentAnnotationLinksPtr&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&);
    bool getMostRecentAnnotationLinks_async(const ::omero::api::AMI_ITimeline_getMostRecentAnnotationLinksPtr&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::api::IObjectList getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p)
    {
        return getMostRecentShareCommentLinks(p, 0);
    }
    ::omero::api::IObjectList getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx)
    {
        return getMostRecentShareCommentLinks(p, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMostRecentShareCommentLinks(p, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMostRecentShareCommentLinks(p, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMostRecentShareCommentLinks(p, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMostRecentShareCommentLinks(p, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_getMostRecentShareCommentLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_getMostRecentShareCommentLinks(p, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p)
    {
        return begin_getMostRecentShareCommentLinks(p, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx)
    {
        return begin_getMostRecentShareCommentLinks(p, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentShareCommentLinks(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentShareCommentLinks(p, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p, const ::omero::api::Callback_ITimeline_getMostRecentShareCommentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentShareCommentLinks(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::omero::api::Callback_ITimeline_getMostRecentShareCommentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentShareCommentLinks(p, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_getMostRecentShareCommentLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getMostRecentShareCommentLinks_async(const ::omero::api::AMI_ITimeline_getMostRecentShareCommentLinksPtr&, const ::omero::sys::ParametersPtr&);
    bool getMostRecentShareCommentLinks_async(const ::omero::api::AMI_ITimeline_getMostRecentShareCommentLinksPtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::api::IObjectListMap getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge)
    {
        return getMostRecentObjects(types, p, merge, 0);
    }
    ::omero::api::IObjectListMap getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx)
    {
        return getMostRecentObjects(types, p, merge, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge, const ::IceInternal::Function<void (const ::omero::api::IObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMostRecentObjects(types, p, merge, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMostRecentObjects(types, p, merge, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMostRecentObjects(types, p, merge, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMostRecentObjects(types, p, merge, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectListMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectListMap __ret;
                try
                {
                    __ret = __proxy->end_getMostRecentObjects(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectListMap&)> _response;
        };
        return begin_getMostRecentObjects(types, p, merge, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge)
    {
        return begin_getMostRecentObjects(types, p, merge, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx)
    {
        return begin_getMostRecentObjects(types, p, merge, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentObjects(types, p, merge, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentObjects(types, p, merge, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge, const ::omero::api::Callback_ITimeline_getMostRecentObjectsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentObjects(types, p, merge, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMostRecentObjects(const ::omero::api::StringSet& types, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx, const ::omero::api::Callback_ITimeline_getMostRecentObjectsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMostRecentObjects(types, p, merge, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectListMap end_getMostRecentObjects(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectListMap getMostRecentObjects(const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMostRecentObjects(const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getMostRecentObjects_async(const ::omero::api::AMI_ITimeline_getMostRecentObjectsPtr&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, bool);
    bool getMostRecentObjects_async(const ::omero::api::AMI_ITimeline_getMostRecentObjectsPtr&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context&);

    ::omero::api::IObjectListMap getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge)
    {
        return getByPeriod(types, start, end, p, merge, 0);
    }
    ::omero::api::IObjectListMap getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx)
    {
        return getByPeriod(types, start, end, p, merge, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge, const ::IceInternal::Function<void (const ::omero::api::IObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getByPeriod(types, start, end, p, merge, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getByPeriod(types, start, end, p, merge, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getByPeriod(types, start, end, p, merge, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getByPeriod(types, start, end, p, merge, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectListMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectListMap __ret;
                try
                {
                    __ret = __proxy->end_getByPeriod(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectListMap&)> _response;
        };
        return begin_getByPeriod(types, start, end, p, merge, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge)
    {
        return begin_getByPeriod(types, start, end, p, merge, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx)
    {
        return begin_getByPeriod(types, start, end, p, merge, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getByPeriod(types, start, end, p, merge, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getByPeriod(types, start, end, p, merge, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge, const ::omero::api::Callback_ITimeline_getByPeriodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getByPeriod(types, start, end, p, merge, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, bool merge, const ::Ice::Context& __ctx, const ::omero::api::Callback_ITimeline_getByPeriodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getByPeriod(types, start, end, p, merge, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectListMap end_getByPeriod(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectListMap getByPeriod(const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getByPeriod(const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getByPeriod_async(const ::omero::api::AMI_ITimeline_getByPeriodPtr&, const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, bool);
    bool getByPeriod_async(const ::omero::api::AMI_ITimeline_getByPeriodPtr&, const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context&);

    ::omero::api::StringLongMap countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p)
    {
        return countByPeriod(types, start, end, p, 0);
    }
    ::omero::api::StringLongMap countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx)
    {
        return countByPeriod(types, start, end, p, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::IceInternal::Function<void (const ::omero::api::StringLongMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_countByPeriod(types, start, end, p, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_countByPeriod(types, start, end, p, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::StringLongMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_countByPeriod(types, start, end, p, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_countByPeriod(types, start, end, p, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::StringLongMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::StringLongMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
                ::omero::api::StringLongMap __ret;
                try
                {
                    __ret = __proxy->end_countByPeriod(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::StringLongMap&)> _response;
        };
        return begin_countByPeriod(types, start, end, p, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p)
    {
        return begin_countByPeriod(types, start, end, p, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx)
    {
        return begin_countByPeriod(types, start, end, p, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countByPeriod(types, start, end, p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countByPeriod(types, start, end, p, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::omero::api::Callback_ITimeline_countByPeriodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countByPeriod(types, start, end, p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_countByPeriod(const ::omero::api::StringSet& types, const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::omero::api::Callback_ITimeline_countByPeriodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countByPeriod(types, start, end, p, &__ctx, __del, __cookie);
    }

    ::omero::api::StringLongMap end_countByPeriod(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::StringLongMap countByPeriod(const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_countByPeriod(const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool countByPeriod_async(const ::omero::api::AMI_ITimeline_countByPeriodPtr&, const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&);
    bool countByPeriod_async(const ::omero::api::AMI_ITimeline_countByPeriodPtr&, const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::api::EventLogList getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p)
    {
        return getEventLogsByPeriod(start, end, p, 0);
    }
    ::omero::api::EventLogList getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx)
    {
        return getEventLogsByPeriod(start, end, p, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::IceInternal::Function<void (const ::omero::api::EventLogList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEventLogsByPeriod(start, end, p, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEventLogsByPeriod(start, end, p, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::EventLogList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEventLogsByPeriod(start, end, p, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEventLogsByPeriod(start, end, p, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::EventLogList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::EventLogList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
                ::omero::api::EventLogList __ret;
                try
                {
                    __ret = __proxy->end_getEventLogsByPeriod(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::EventLogList&)> _response;
        };
        return begin_getEventLogsByPeriod(start, end, p, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p)
    {
        return begin_getEventLogsByPeriod(start, end, p, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx)
    {
        return begin_getEventLogsByPeriod(start, end, p, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEventLogsByPeriod(start, end, p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEventLogsByPeriod(start, end, p, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::omero::api::Callback_ITimeline_getEventLogsByPeriodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEventLogsByPeriod(start, end, p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEventLogsByPeriod(const ::omero::RTimePtr& start, const ::omero::RTimePtr& end, const ::omero::sys::ParametersPtr& p, const ::Ice::Context& __ctx, const ::omero::api::Callback_ITimeline_getEventLogsByPeriodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEventLogsByPeriod(start, end, p, &__ctx, __del, __cookie);
    }

    ::omero::api::EventLogList end_getEventLogsByPeriod(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::EventLogList getEventLogsByPeriod(const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEventLogsByPeriod(const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getEventLogsByPeriod_async(const ::omero::api::AMI_ITimeline_getEventLogsByPeriodPtr&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&);
    bool getEventLogsByPeriod_async(const ::omero::api::AMI_ITimeline_getEventLogsByPeriodPtr&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<ITimeline> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_secure(bool __secure) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_twoway() const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_oneway() const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_batchOneway() const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_datagram() const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_batchDatagram() const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_compress(bool __compress) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ITimeline> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ITimeline*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class ITimeline : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::IObjectList getMostRecentAnnotationLinks(const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectListMap getMostRecentObjects(const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectListMap getByPeriod(const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::StringLongMap countByPeriod(const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::EventLogList getEventLogsByPeriod(const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class ITimeline : virtual public ::IceDelegate::omero::api::ITimeline,
                  virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::IObjectList getMostRecentAnnotationLinks(const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectListMap getMostRecentObjects(const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectListMap getByPeriod(const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::StringLongMap countByPeriod(const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::EventLogList getEventLogsByPeriod(const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class ITimeline : virtual public ::IceDelegate::omero::api::ITimeline,
                  virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::IObjectList getMostRecentAnnotationLinks(const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList getMostRecentShareCommentLinks(const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectListMap getMostRecentObjects(const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectListMap getByPeriod(const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::StringLongMap countByPeriod(const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::EventLogList getEventLogsByPeriod(const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class ITimeline : virtual public ::omero::api::ServiceInterface
{
public:

    typedef ITimelinePrx ProxyType;
    typedef ITimelinePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void getMostRecentAnnotationLinks_async(const ::omero::api::AMD_ITimeline_getMostRecentAnnotationLinksPtr&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMostRecentAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getMostRecentShareCommentLinks_async(const ::omero::api::AMD_ITimeline_getMostRecentShareCommentLinksPtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMostRecentShareCommentLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getMostRecentObjects_async(const ::omero::api::AMD_ITimeline_getMostRecentObjectsPtr&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMostRecentObjects(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getByPeriod_async(const ::omero::api::AMD_ITimeline_getByPeriodPtr&, const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getByPeriod(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void countByPeriod_async(const ::omero::api::AMD_ITimeline_countByPeriodPtr&, const ::omero::api::StringSet&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___countByPeriod(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getEventLogsByPeriod_async(const ::omero::api::AMD_ITimeline_getEventLogsByPeriodPtr&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEventLogsByPeriod(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ITimeline& l, const ITimeline& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ITimeline& l, const ITimeline& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_ITimeline_getMostRecentAnnotationLinks : public Callback_ITimeline_getMostRecentAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_ITimeline_getMostRecentAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getMostRecentAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ITimeline_getMostRecentAnnotationLinksPtr
newCallback_ITimeline_getMostRecentAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_getMostRecentAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ITimeline_getMostRecentAnnotationLinksPtr
newCallback_ITimeline_getMostRecentAnnotationLinks(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_getMostRecentAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ITimeline_getMostRecentAnnotationLinks : public Callback_ITimeline_getMostRecentAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_ITimeline_getMostRecentAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getMostRecentAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ITimeline_getMostRecentAnnotationLinksPtr
newCallback_ITimeline_getMostRecentAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_getMostRecentAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ITimeline_getMostRecentAnnotationLinksPtr
newCallback_ITimeline_getMostRecentAnnotationLinks(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_getMostRecentAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ITimeline_getMostRecentShareCommentLinks : public Callback_ITimeline_getMostRecentShareCommentLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_ITimeline_getMostRecentShareCommentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getMostRecentShareCommentLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ITimeline_getMostRecentShareCommentLinksPtr
newCallback_ITimeline_getMostRecentShareCommentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_getMostRecentShareCommentLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ITimeline_getMostRecentShareCommentLinksPtr
newCallback_ITimeline_getMostRecentShareCommentLinks(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_getMostRecentShareCommentLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ITimeline_getMostRecentShareCommentLinks : public Callback_ITimeline_getMostRecentShareCommentLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_ITimeline_getMostRecentShareCommentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getMostRecentShareCommentLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ITimeline_getMostRecentShareCommentLinksPtr
newCallback_ITimeline_getMostRecentShareCommentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_getMostRecentShareCommentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ITimeline_getMostRecentShareCommentLinksPtr
newCallback_ITimeline_getMostRecentShareCommentLinks(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_getMostRecentShareCommentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ITimeline_getMostRecentObjects : public Callback_ITimeline_getMostRecentObjects_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectListMap&);

    CallbackNC_ITimeline_getMostRecentObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectListMap __ret;
        try
        {
            __ret = __proxy->end_getMostRecentObjects(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ITimeline_getMostRecentObjectsPtr
newCallback_ITimeline_getMostRecentObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_getMostRecentObjects<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ITimeline_getMostRecentObjectsPtr
newCallback_ITimeline_getMostRecentObjects(T* instance, void (T::*cb)(const ::omero::api::IObjectListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_getMostRecentObjects<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ITimeline_getMostRecentObjects : public Callback_ITimeline_getMostRecentObjects_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectListMap&, const CT&);

    Callback_ITimeline_getMostRecentObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectListMap __ret;
        try
        {
            __ret = __proxy->end_getMostRecentObjects(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ITimeline_getMostRecentObjectsPtr
newCallback_ITimeline_getMostRecentObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_getMostRecentObjects<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ITimeline_getMostRecentObjectsPtr
newCallback_ITimeline_getMostRecentObjects(T* instance, void (T::*cb)(const ::omero::api::IObjectListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_getMostRecentObjects<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ITimeline_getByPeriod : public Callback_ITimeline_getByPeriod_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectListMap&);

    CallbackNC_ITimeline_getByPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectListMap __ret;
        try
        {
            __ret = __proxy->end_getByPeriod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ITimeline_getByPeriodPtr
newCallback_ITimeline_getByPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_getByPeriod<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ITimeline_getByPeriodPtr
newCallback_ITimeline_getByPeriod(T* instance, void (T::*cb)(const ::omero::api::IObjectListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_getByPeriod<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ITimeline_getByPeriod : public Callback_ITimeline_getByPeriod_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectListMap&, const CT&);

    Callback_ITimeline_getByPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectListMap __ret;
        try
        {
            __ret = __proxy->end_getByPeriod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ITimeline_getByPeriodPtr
newCallback_ITimeline_getByPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_getByPeriod<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ITimeline_getByPeriodPtr
newCallback_ITimeline_getByPeriod(T* instance, void (T::*cb)(const ::omero::api::IObjectListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_getByPeriod<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ITimeline_countByPeriod : public Callback_ITimeline_countByPeriod_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::StringLongMap&);

    CallbackNC_ITimeline_countByPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::StringLongMap __ret;
        try
        {
            __ret = __proxy->end_countByPeriod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ITimeline_countByPeriodPtr
newCallback_ITimeline_countByPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::StringLongMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_countByPeriod<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ITimeline_countByPeriodPtr
newCallback_ITimeline_countByPeriod(T* instance, void (T::*cb)(const ::omero::api::StringLongMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_countByPeriod<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ITimeline_countByPeriod : public Callback_ITimeline_countByPeriod_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::StringLongMap&, const CT&);

    Callback_ITimeline_countByPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::StringLongMap __ret;
        try
        {
            __ret = __proxy->end_countByPeriod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ITimeline_countByPeriodPtr
newCallback_ITimeline_countByPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::StringLongMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_countByPeriod<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ITimeline_countByPeriodPtr
newCallback_ITimeline_countByPeriod(T* instance, void (T::*cb)(const ::omero::api::StringLongMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_countByPeriod<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ITimeline_getEventLogsByPeriod : public Callback_ITimeline_getEventLogsByPeriod_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::EventLogList&);

    CallbackNC_ITimeline_getEventLogsByPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::EventLogList __ret;
        try
        {
            __ret = __proxy->end_getEventLogsByPeriod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ITimeline_getEventLogsByPeriodPtr
newCallback_ITimeline_getEventLogsByPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::EventLogList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_getEventLogsByPeriod<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ITimeline_getEventLogsByPeriodPtr
newCallback_ITimeline_getEventLogsByPeriod(T* instance, void (T::*cb)(const ::omero::api::EventLogList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ITimeline_getEventLogsByPeriod<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ITimeline_getEventLogsByPeriod : public Callback_ITimeline_getEventLogsByPeriod_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::EventLogList&, const CT&);

    Callback_ITimeline_getEventLogsByPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ITimelinePrx __proxy = ::omero::api::ITimelinePrx::uncheckedCast(__result->getProxy());
        ::omero::api::EventLogList __ret;
        try
        {
            __ret = __proxy->end_getEventLogsByPeriod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ITimeline_getEventLogsByPeriodPtr
newCallback_ITimeline_getEventLogsByPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::EventLogList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_getEventLogsByPeriod<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ITimeline_getEventLogsByPeriodPtr
newCallback_ITimeline_getEventLogsByPeriod(T* instance, void (T::*cb)(const ::omero::api::EventLogList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ITimeline_getEventLogsByPeriod<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
