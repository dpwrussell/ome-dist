// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IAdmin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IAdmin_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IAdmin_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ServicesF.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class IAdmin;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IAdmin>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IAdmin*);

}

}

}

namespace omero
{

namespace api
{

class IAdmin;
bool operator==(const IAdmin&, const IAdmin&);
bool operator<(const IAdmin&, const IAdmin&);
::Ice::Object* upCast(::omero::api::IAdmin*);
typedef ::IceInternal::Handle< ::omero::api::IAdmin> IAdminPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IAdmin> IAdminPrx;
void __patch(IAdminPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_IAdmin_canUpdate : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(bool) = 0;

    void __response(bool __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_canUpdate> AMI_IAdmin_canUpdatePtr;

class AMD_IAdmin_canUpdate : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(bool) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_canUpdate> AMD_IAdmin_canUpdatePtr;

class AMI_IAdmin_getExperimenter : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterPtr&) = 0;

    void __response(const ::omero::model::ExperimenterPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_getExperimenter> AMI_IAdmin_getExperimenterPtr;

class AMD_IAdmin_getExperimenter : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_getExperimenter> AMD_IAdmin_getExperimenterPtr;

class AMI_IAdmin_lookupExperimenter : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterPtr&) = 0;

    void __response(const ::omero::model::ExperimenterPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_lookupExperimenter> AMI_IAdmin_lookupExperimenterPtr;

class AMD_IAdmin_lookupExperimenter : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_lookupExperimenter> AMD_IAdmin_lookupExperimenterPtr;

class AMI_IAdmin_lookupExperimenters : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;

    void __response(const ::omero::api::ExperimenterList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_lookupExperimenters> AMI_IAdmin_lookupExperimentersPtr;

class AMD_IAdmin_lookupExperimenters : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_lookupExperimenters> AMD_IAdmin_lookupExperimentersPtr;

class AMI_IAdmin_getGroup : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterGroupPtr&) = 0;

    void __response(const ::omero::model::ExperimenterGroupPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_getGroup> AMI_IAdmin_getGroupPtr;

class AMD_IAdmin_getGroup : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterGroupPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_getGroup> AMD_IAdmin_getGroupPtr;

class AMI_IAdmin_lookupGroup : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterGroupPtr&) = 0;

    void __response(const ::omero::model::ExperimenterGroupPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_lookupGroup> AMI_IAdmin_lookupGroupPtr;

class AMD_IAdmin_lookupGroup : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterGroupPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_lookupGroup> AMD_IAdmin_lookupGroupPtr;

class AMI_IAdmin_lookupGroups : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterGroupList&) = 0;

    void __response(const ::omero::api::ExperimenterGroupList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_lookupGroups> AMI_IAdmin_lookupGroupsPtr;

class AMD_IAdmin_lookupGroups : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterGroupList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_lookupGroups> AMD_IAdmin_lookupGroupsPtr;

class AMI_IAdmin_containedExperimenters : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;

    void __response(const ::omero::api::ExperimenterList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_containedExperimenters> AMI_IAdmin_containedExperimentersPtr;

class AMD_IAdmin_containedExperimenters : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_containedExperimenters> AMD_IAdmin_containedExperimentersPtr;

class AMI_IAdmin_containedGroups : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterGroupList&) = 0;

    void __response(const ::omero::api::ExperimenterGroupList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_containedGroups> AMI_IAdmin_containedGroupsPtr;

class AMD_IAdmin_containedGroups : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterGroupList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_containedGroups> AMD_IAdmin_containedGroupsPtr;

class AMI_IAdmin_getDefaultGroup : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterGroupPtr&) = 0;

    void __response(const ::omero::model::ExperimenterGroupPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_getDefaultGroup> AMI_IAdmin_getDefaultGroupPtr;

class AMD_IAdmin_getDefaultGroup : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterGroupPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_getDefaultGroup> AMD_IAdmin_getDefaultGroupPtr;

class AMI_IAdmin_lookupLdapAuthExperimenter : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::string&) = 0;

    void __response(const ::std::string& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_lookupLdapAuthExperimenter> AMI_IAdmin_lookupLdapAuthExperimenterPtr;

class AMD_IAdmin_lookupLdapAuthExperimenter : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::string&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_lookupLdapAuthExperimenter> AMD_IAdmin_lookupLdapAuthExperimenterPtr;

class AMI_IAdmin_lookupLdapAuthExperimenters : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::RListPtr&) = 0;

    void __response(const ::omero::RListPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_lookupLdapAuthExperimenters> AMI_IAdmin_lookupLdapAuthExperimentersPtr;

class AMD_IAdmin_lookupLdapAuthExperimenters : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::RListPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_lookupLdapAuthExperimenters> AMD_IAdmin_lookupLdapAuthExperimentersPtr;

class AMI_IAdmin_getMemberOfGroupIds : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::LongList&) = 0;

    void __response(const ::omero::api::LongList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_getMemberOfGroupIds> AMI_IAdmin_getMemberOfGroupIdsPtr;

class AMD_IAdmin_getMemberOfGroupIds : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::LongList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_getMemberOfGroupIds> AMD_IAdmin_getMemberOfGroupIdsPtr;

class AMI_IAdmin_getLeaderOfGroupIds : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::LongList&) = 0;

    void __response(const ::omero::api::LongList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_getLeaderOfGroupIds> AMI_IAdmin_getLeaderOfGroupIdsPtr;

class AMD_IAdmin_getLeaderOfGroupIds : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::LongList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_getLeaderOfGroupIds> AMD_IAdmin_getLeaderOfGroupIdsPtr;

class AMI_IAdmin_updateSelf : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_updateSelf> AMI_IAdmin_updateSelfPtr;

class AMD_IAdmin_updateSelf : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_updateSelf> AMD_IAdmin_updateSelfPtr;

class AMI_IAdmin_uploadMyUserPhoto : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_uploadMyUserPhoto> AMI_IAdmin_uploadMyUserPhotoPtr;

class AMD_IAdmin_uploadMyUserPhoto : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_uploadMyUserPhoto> AMD_IAdmin_uploadMyUserPhotoPtr;

class AMI_IAdmin_getMyUserPhotos : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::OriginalFileList&) = 0;

    void __response(const ::omero::api::OriginalFileList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_getMyUserPhotos> AMI_IAdmin_getMyUserPhotosPtr;

class AMD_IAdmin_getMyUserPhotos : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::OriginalFileList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_getMyUserPhotos> AMD_IAdmin_getMyUserPhotosPtr;

class AMI_IAdmin_updateExperimenter : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_updateExperimenter> AMI_IAdmin_updateExperimenterPtr;

class AMD_IAdmin_updateExperimenter : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_updateExperimenter> AMD_IAdmin_updateExperimenterPtr;

class AMI_IAdmin_updateExperimenterWithPassword : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_updateExperimenterWithPassword> AMI_IAdmin_updateExperimenterWithPasswordPtr;

class AMD_IAdmin_updateExperimenterWithPassword : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_updateExperimenterWithPassword> AMD_IAdmin_updateExperimenterWithPasswordPtr;

class AMI_IAdmin_updateGroup : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_updateGroup> AMI_IAdmin_updateGroupPtr;

class AMD_IAdmin_updateGroup : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_updateGroup> AMD_IAdmin_updateGroupPtr;

class AMI_IAdmin_createUser : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_createUser> AMI_IAdmin_createUserPtr;

class AMD_IAdmin_createUser : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_createUser> AMD_IAdmin_createUserPtr;

class AMI_IAdmin_createSystemUser : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_createSystemUser> AMI_IAdmin_createSystemUserPtr;

class AMD_IAdmin_createSystemUser : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_createSystemUser> AMD_IAdmin_createSystemUserPtr;

class AMI_IAdmin_createExperimenter : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_createExperimenter> AMI_IAdmin_createExperimenterPtr;

class AMD_IAdmin_createExperimenter : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_createExperimenter> AMD_IAdmin_createExperimenterPtr;

class AMI_IAdmin_createExperimenterWithPassword : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_createExperimenterWithPassword> AMI_IAdmin_createExperimenterWithPasswordPtr;

class AMD_IAdmin_createExperimenterWithPassword : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_createExperimenterWithPassword> AMD_IAdmin_createExperimenterWithPasswordPtr;

class AMI_IAdmin_createGroup : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_createGroup> AMI_IAdmin_createGroupPtr;

class AMD_IAdmin_createGroup : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_createGroup> AMD_IAdmin_createGroupPtr;

class AMI_IAdmin_addGroups : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_addGroups> AMI_IAdmin_addGroupsPtr;

class AMD_IAdmin_addGroups : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_addGroups> AMD_IAdmin_addGroupsPtr;

class AMI_IAdmin_removeGroups : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_removeGroups> AMI_IAdmin_removeGroupsPtr;

class AMD_IAdmin_removeGroups : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_removeGroups> AMD_IAdmin_removeGroupsPtr;

class AMI_IAdmin_setDefaultGroup : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_setDefaultGroup> AMI_IAdmin_setDefaultGroupPtr;

class AMD_IAdmin_setDefaultGroup : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_setDefaultGroup> AMD_IAdmin_setDefaultGroupPtr;

class AMI_IAdmin_setGroupOwner : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_setGroupOwner> AMI_IAdmin_setGroupOwnerPtr;

class AMD_IAdmin_setGroupOwner : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_setGroupOwner> AMD_IAdmin_setGroupOwnerPtr;

class AMI_IAdmin_unsetGroupOwner : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_unsetGroupOwner> AMI_IAdmin_unsetGroupOwnerPtr;

class AMD_IAdmin_unsetGroupOwner : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_unsetGroupOwner> AMD_IAdmin_unsetGroupOwnerPtr;

class AMI_IAdmin_addGroupOwners : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_addGroupOwners> AMI_IAdmin_addGroupOwnersPtr;

class AMD_IAdmin_addGroupOwners : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_addGroupOwners> AMD_IAdmin_addGroupOwnersPtr;

class AMI_IAdmin_removeGroupOwners : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_removeGroupOwners> AMI_IAdmin_removeGroupOwnersPtr;

class AMD_IAdmin_removeGroupOwners : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_removeGroupOwners> AMD_IAdmin_removeGroupOwnersPtr;

class AMI_IAdmin_deleteExperimenter : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_deleteExperimenter> AMI_IAdmin_deleteExperimenterPtr;

class AMD_IAdmin_deleteExperimenter : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_deleteExperimenter> AMD_IAdmin_deleteExperimenterPtr;

class AMI_IAdmin_deleteGroup : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_deleteGroup> AMI_IAdmin_deleteGroupPtr;

class AMD_IAdmin_deleteGroup : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_deleteGroup> AMD_IAdmin_deleteGroupPtr;

class AMI_IAdmin_changeOwner : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_changeOwner> AMI_IAdmin_changeOwnerPtr;

class AMD_IAdmin_changeOwner : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_changeOwner> AMD_IAdmin_changeOwnerPtr;

class AMI_IAdmin_changeGroup : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_changeGroup> AMI_IAdmin_changeGroupPtr;

class AMD_IAdmin_changeGroup : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_changeGroup> AMD_IAdmin_changeGroupPtr;

class AMI_IAdmin_changePermissions : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_changePermissions> AMI_IAdmin_changePermissionsPtr;

class AMD_IAdmin_changePermissions : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_changePermissions> AMD_IAdmin_changePermissionsPtr;

class AMI_IAdmin_moveToCommonSpace : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_moveToCommonSpace> AMI_IAdmin_moveToCommonSpacePtr;

class AMD_IAdmin_moveToCommonSpace : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_moveToCommonSpace> AMD_IAdmin_moveToCommonSpacePtr;

class AMI_IAdmin_changePassword : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_changePassword> AMI_IAdmin_changePasswordPtr;

class AMD_IAdmin_changePassword : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_changePassword> AMD_IAdmin_changePasswordPtr;

class AMI_IAdmin_changePasswordWithOldPassword : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_changePasswordWithOldPassword> AMI_IAdmin_changePasswordWithOldPasswordPtr;

class AMD_IAdmin_changePasswordWithOldPassword : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_changePasswordWithOldPassword> AMD_IAdmin_changePasswordWithOldPasswordPtr;

class AMI_IAdmin_changeUserPassword : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_changeUserPassword> AMI_IAdmin_changeUserPasswordPtr;

class AMD_IAdmin_changeUserPassword : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_changeUserPassword> AMD_IAdmin_changeUserPasswordPtr;

class AMI_IAdmin_synchronizeLoginCache : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_synchronizeLoginCache> AMI_IAdmin_synchronizeLoginCachePtr;

class AMD_IAdmin_synchronizeLoginCache : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_synchronizeLoginCache> AMD_IAdmin_synchronizeLoginCachePtr;

class AMI_IAdmin_changeExpiredCredentials : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_changeExpiredCredentials> AMI_IAdmin_changeExpiredCredentialsPtr;

class AMD_IAdmin_changeExpiredCredentials : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_changeExpiredCredentials> AMD_IAdmin_changeExpiredCredentialsPtr;

class AMI_IAdmin_reportForgottenPassword : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_reportForgottenPassword> AMI_IAdmin_reportForgottenPasswordPtr;

class AMD_IAdmin_reportForgottenPassword : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_reportForgottenPassword> AMD_IAdmin_reportForgottenPasswordPtr;

class AMI_IAdmin_getSecurityRoles : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::sys::RolesPtr&) = 0;

    void __response(const ::omero::sys::RolesPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_getSecurityRoles> AMI_IAdmin_getSecurityRolesPtr;

class AMD_IAdmin_getSecurityRoles : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::sys::RolesPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_getSecurityRoles> AMD_IAdmin_getSecurityRolesPtr;

class AMI_IAdmin_getEventContext : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::sys::EventContextPtr&) = 0;

    void __response(const ::omero::sys::EventContextPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IAdmin_getEventContext> AMI_IAdmin_getEventContextPtr;

class AMD_IAdmin_getEventContext : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::sys::EventContextPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IAdmin_getEventContext> AMD_IAdmin_getEventContextPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_IAdmin_canUpdate : public ::omero::api::AMD_IAdmin_canUpdate, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_canUpdate(::IceInternal::Incoming&);

    virtual void ice_response(bool);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_getExperimenter : public ::omero::api::AMD_IAdmin_getExperimenter, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_getExperimenter(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::ExperimenterPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_lookupExperimenter : public ::omero::api::AMD_IAdmin_lookupExperimenter, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_lookupExperimenter(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::ExperimenterPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_lookupExperimenters : public ::omero::api::AMD_IAdmin_lookupExperimenters, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_lookupExperimenters(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::ExperimenterList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_getGroup : public ::omero::api::AMD_IAdmin_getGroup, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_getGroup(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::ExperimenterGroupPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_lookupGroup : public ::omero::api::AMD_IAdmin_lookupGroup, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_lookupGroup(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::ExperimenterGroupPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_lookupGroups : public ::omero::api::AMD_IAdmin_lookupGroups, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_lookupGroups(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::ExperimenterGroupList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_containedExperimenters : public ::omero::api::AMD_IAdmin_containedExperimenters, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_containedExperimenters(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::ExperimenterList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_containedGroups : public ::omero::api::AMD_IAdmin_containedGroups, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_containedGroups(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::ExperimenterGroupList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_getDefaultGroup : public ::omero::api::AMD_IAdmin_getDefaultGroup, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_getDefaultGroup(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::ExperimenterGroupPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_lookupLdapAuthExperimenter : public ::omero::api::AMD_IAdmin_lookupLdapAuthExperimenter, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_lookupLdapAuthExperimenter(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_lookupLdapAuthExperimenters : public ::omero::api::AMD_IAdmin_lookupLdapAuthExperimenters, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_lookupLdapAuthExperimenters(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::RListPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_getMemberOfGroupIds : public ::omero::api::AMD_IAdmin_getMemberOfGroupIds, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_getMemberOfGroupIds(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::LongList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_getLeaderOfGroupIds : public ::omero::api::AMD_IAdmin_getLeaderOfGroupIds, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_getLeaderOfGroupIds(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::LongList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_updateSelf : public ::omero::api::AMD_IAdmin_updateSelf, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_updateSelf(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_uploadMyUserPhoto : public ::omero::api::AMD_IAdmin_uploadMyUserPhoto, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_uploadMyUserPhoto(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_getMyUserPhotos : public ::omero::api::AMD_IAdmin_getMyUserPhotos, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_getMyUserPhotos(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::OriginalFileList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_updateExperimenter : public ::omero::api::AMD_IAdmin_updateExperimenter, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_updateExperimenter(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_updateExperimenterWithPassword : public ::omero::api::AMD_IAdmin_updateExperimenterWithPassword, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_updateExperimenterWithPassword(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_updateGroup : public ::omero::api::AMD_IAdmin_updateGroup, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_updateGroup(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_createUser : public ::omero::api::AMD_IAdmin_createUser, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_createUser(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_createSystemUser : public ::omero::api::AMD_IAdmin_createSystemUser, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_createSystemUser(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_createExperimenter : public ::omero::api::AMD_IAdmin_createExperimenter, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_createExperimenter(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_createExperimenterWithPassword : public ::omero::api::AMD_IAdmin_createExperimenterWithPassword, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_createExperimenterWithPassword(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_createGroup : public ::omero::api::AMD_IAdmin_createGroup, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_createGroup(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_addGroups : public ::omero::api::AMD_IAdmin_addGroups, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_addGroups(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_removeGroups : public ::omero::api::AMD_IAdmin_removeGroups, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_removeGroups(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_setDefaultGroup : public ::omero::api::AMD_IAdmin_setDefaultGroup, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_setDefaultGroup(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_setGroupOwner : public ::omero::api::AMD_IAdmin_setGroupOwner, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_setGroupOwner(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_unsetGroupOwner : public ::omero::api::AMD_IAdmin_unsetGroupOwner, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_unsetGroupOwner(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_addGroupOwners : public ::omero::api::AMD_IAdmin_addGroupOwners, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_addGroupOwners(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_removeGroupOwners : public ::omero::api::AMD_IAdmin_removeGroupOwners, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_removeGroupOwners(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_deleteExperimenter : public ::omero::api::AMD_IAdmin_deleteExperimenter, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_deleteExperimenter(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_deleteGroup : public ::omero::api::AMD_IAdmin_deleteGroup, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_deleteGroup(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_changeOwner : public ::omero::api::AMD_IAdmin_changeOwner, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_changeOwner(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_changeGroup : public ::omero::api::AMD_IAdmin_changeGroup, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_changeGroup(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_changePermissions : public ::omero::api::AMD_IAdmin_changePermissions, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_changePermissions(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_moveToCommonSpace : public ::omero::api::AMD_IAdmin_moveToCommonSpace, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_moveToCommonSpace(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_changePassword : public ::omero::api::AMD_IAdmin_changePassword, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_changePassword(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_changePasswordWithOldPassword : public ::omero::api::AMD_IAdmin_changePasswordWithOldPassword, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_changePasswordWithOldPassword(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_changeUserPassword : public ::omero::api::AMD_IAdmin_changeUserPassword, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_changeUserPassword(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_synchronizeLoginCache : public ::omero::api::AMD_IAdmin_synchronizeLoginCache, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_synchronizeLoginCache(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_changeExpiredCredentials : public ::omero::api::AMD_IAdmin_changeExpiredCredentials, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_changeExpiredCredentials(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_reportForgottenPassword : public ::omero::api::AMD_IAdmin_reportForgottenPassword, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_reportForgottenPassword(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_getSecurityRoles : public ::omero::api::AMD_IAdmin_getSecurityRoles, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_getSecurityRoles(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::sys::RolesPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IAdmin_getEventContext : public ::omero::api::AMD_IAdmin_getEventContext, public ::IceInternal::IncomingAsync
{
public:

    AMD_IAdmin_getEventContext(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::sys::EventContextPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_IAdmin_canUpdate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_canUpdate_Base> Callback_IAdmin_canUpdatePtr;

class Callback_IAdmin_getExperimenter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_getExperimenter_Base> Callback_IAdmin_getExperimenterPtr;

class Callback_IAdmin_lookupExperimenter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_lookupExperimenter_Base> Callback_IAdmin_lookupExperimenterPtr;

class Callback_IAdmin_lookupExperimenters_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_lookupExperimenters_Base> Callback_IAdmin_lookupExperimentersPtr;

class Callback_IAdmin_getGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_getGroup_Base> Callback_IAdmin_getGroupPtr;

class Callback_IAdmin_lookupGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_lookupGroup_Base> Callback_IAdmin_lookupGroupPtr;

class Callback_IAdmin_lookupGroups_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_lookupGroups_Base> Callback_IAdmin_lookupGroupsPtr;

class Callback_IAdmin_containedExperimenters_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_containedExperimenters_Base> Callback_IAdmin_containedExperimentersPtr;

class Callback_IAdmin_containedGroups_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_containedGroups_Base> Callback_IAdmin_containedGroupsPtr;

class Callback_IAdmin_getDefaultGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_getDefaultGroup_Base> Callback_IAdmin_getDefaultGroupPtr;

class Callback_IAdmin_lookupLdapAuthExperimenter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_lookupLdapAuthExperimenter_Base> Callback_IAdmin_lookupLdapAuthExperimenterPtr;

class Callback_IAdmin_lookupLdapAuthExperimenters_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_lookupLdapAuthExperimenters_Base> Callback_IAdmin_lookupLdapAuthExperimentersPtr;

class Callback_IAdmin_getMemberOfGroupIds_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_getMemberOfGroupIds_Base> Callback_IAdmin_getMemberOfGroupIdsPtr;

class Callback_IAdmin_getLeaderOfGroupIds_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_getLeaderOfGroupIds_Base> Callback_IAdmin_getLeaderOfGroupIdsPtr;

class Callback_IAdmin_updateSelf_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_updateSelf_Base> Callback_IAdmin_updateSelfPtr;

class Callback_IAdmin_uploadMyUserPhoto_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_uploadMyUserPhoto_Base> Callback_IAdmin_uploadMyUserPhotoPtr;

class Callback_IAdmin_getMyUserPhotos_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_getMyUserPhotos_Base> Callback_IAdmin_getMyUserPhotosPtr;

class Callback_IAdmin_updateExperimenter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_updateExperimenter_Base> Callback_IAdmin_updateExperimenterPtr;

class Callback_IAdmin_updateExperimenterWithPassword_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_updateExperimenterWithPassword_Base> Callback_IAdmin_updateExperimenterWithPasswordPtr;

class Callback_IAdmin_updateGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_updateGroup_Base> Callback_IAdmin_updateGroupPtr;

class Callback_IAdmin_createUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_createUser_Base> Callback_IAdmin_createUserPtr;

class Callback_IAdmin_createSystemUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_createSystemUser_Base> Callback_IAdmin_createSystemUserPtr;

class Callback_IAdmin_createExperimenter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_createExperimenter_Base> Callback_IAdmin_createExperimenterPtr;

class Callback_IAdmin_createExperimenterWithPassword_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_createExperimenterWithPassword_Base> Callback_IAdmin_createExperimenterWithPasswordPtr;

class Callback_IAdmin_createGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_createGroup_Base> Callback_IAdmin_createGroupPtr;

class Callback_IAdmin_addGroups_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_addGroups_Base> Callback_IAdmin_addGroupsPtr;

class Callback_IAdmin_removeGroups_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_removeGroups_Base> Callback_IAdmin_removeGroupsPtr;

class Callback_IAdmin_setDefaultGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_setDefaultGroup_Base> Callback_IAdmin_setDefaultGroupPtr;

class Callback_IAdmin_setGroupOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_setGroupOwner_Base> Callback_IAdmin_setGroupOwnerPtr;

class Callback_IAdmin_unsetGroupOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_unsetGroupOwner_Base> Callback_IAdmin_unsetGroupOwnerPtr;

class Callback_IAdmin_addGroupOwners_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_addGroupOwners_Base> Callback_IAdmin_addGroupOwnersPtr;

class Callback_IAdmin_removeGroupOwners_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_removeGroupOwners_Base> Callback_IAdmin_removeGroupOwnersPtr;

class Callback_IAdmin_deleteExperimenter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_deleteExperimenter_Base> Callback_IAdmin_deleteExperimenterPtr;

class Callback_IAdmin_deleteGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_deleteGroup_Base> Callback_IAdmin_deleteGroupPtr;

class Callback_IAdmin_changeOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_changeOwner_Base> Callback_IAdmin_changeOwnerPtr;

class Callback_IAdmin_changeGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_changeGroup_Base> Callback_IAdmin_changeGroupPtr;

class Callback_IAdmin_changePermissions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_changePermissions_Base> Callback_IAdmin_changePermissionsPtr;

class Callback_IAdmin_moveToCommonSpace_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_moveToCommonSpace_Base> Callback_IAdmin_moveToCommonSpacePtr;

class Callback_IAdmin_changePassword_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_changePassword_Base> Callback_IAdmin_changePasswordPtr;

class Callback_IAdmin_changePasswordWithOldPassword_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_changePasswordWithOldPassword_Base> Callback_IAdmin_changePasswordWithOldPasswordPtr;

class Callback_IAdmin_changeUserPassword_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_changeUserPassword_Base> Callback_IAdmin_changeUserPasswordPtr;

class Callback_IAdmin_synchronizeLoginCache_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_synchronizeLoginCache_Base> Callback_IAdmin_synchronizeLoginCachePtr;

class Callback_IAdmin_changeExpiredCredentials_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_changeExpiredCredentials_Base> Callback_IAdmin_changeExpiredCredentialsPtr;

class Callback_IAdmin_reportForgottenPassword_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_reportForgottenPassword_Base> Callback_IAdmin_reportForgottenPasswordPtr;

class Callback_IAdmin_getSecurityRoles_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_getSecurityRoles_Base> Callback_IAdmin_getSecurityRolesPtr;

class Callback_IAdmin_getEventContext_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAdmin_getEventContext_Base> Callback_IAdmin_getEventContextPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class IAdmin : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    bool canUpdate(const ::omero::model::IObjectPtr& obj)
    {
        return canUpdate(obj, 0);
    }
    bool canUpdate(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx)
    {
        return canUpdate(obj, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_canUpdate(const ::omero::model::IObjectPtr& obj, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canUpdate(obj, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canUpdate(const ::omero::model::IObjectPtr& obj, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canUpdate(obj, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_canUpdate(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canUpdate(obj, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canUpdate(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canUpdate(obj, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_canUpdate(const ::omero::model::IObjectPtr& obj, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_canUpdate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_canUpdate(obj, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_canUpdate(const ::omero::model::IObjectPtr& obj)
    {
        return begin_canUpdate(obj, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canUpdate(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx)
    {
        return begin_canUpdate(obj, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canUpdate(const ::omero::model::IObjectPtr& obj, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canUpdate(obj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canUpdate(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canUpdate(obj, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canUpdate(const ::omero::model::IObjectPtr& obj, const ::omero::api::Callback_IAdmin_canUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canUpdate(obj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canUpdate(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_canUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canUpdate(obj, &__ctx, __del, __cookie);
    }

    bool end_canUpdate(const ::Ice::AsyncResultPtr&);
    
private:

    bool canUpdate(const ::omero::model::IObjectPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_canUpdate(const ::omero::model::IObjectPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool canUpdate_async(const ::omero::api::AMI_IAdmin_canUpdatePtr&, const ::omero::model::IObjectPtr&);
    bool canUpdate_async(const ::omero::api::AMI_IAdmin_canUpdatePtr&, const ::omero::model::IObjectPtr&, const ::Ice::Context&);

    ::omero::model::ExperimenterPtr getExperimenter(::Ice::Long id)
    {
        return getExperimenter(id, 0);
    }
    ::omero::model::ExperimenterPtr getExperimenter(::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return getExperimenter(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getExperimenter(::Ice::Long id, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExperimenter(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExperimenter(::Ice::Long id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExperimenter(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getExperimenter(::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExperimenter(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExperimenter(::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExperimenter(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getExperimenter(::Ice::Long id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterPtr __ret;
                try
                {
                    __ret = __proxy->end_getExperimenter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterPtr&)> _response;
        };
        return begin_getExperimenter(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getExperimenter(::Ice::Long id)
    {
        return begin_getExperimenter(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExperimenter(::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return begin_getExperimenter(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExperimenter(::Ice::Long id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenter(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperimenter(::Ice::Long id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenter(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperimenter(::Ice::Long id, const ::omero::api::Callback_IAdmin_getExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenter(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperimenter(::Ice::Long id, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_getExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenter(id, &__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterPtr end_getExperimenter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterPtr getExperimenter(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExperimenter(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getExperimenter_async(const ::omero::api::AMI_IAdmin_getExperimenterPtr&, ::Ice::Long);
    bool getExperimenter_async(const ::omero::api::AMI_IAdmin_getExperimenterPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::model::ExperimenterPtr lookupExperimenter(const ::std::string& name)
    {
        return lookupExperimenter(name, 0);
    }
    ::omero::model::ExperimenterPtr lookupExperimenter(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return lookupExperimenter(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_lookupExperimenter(const ::std::string& name, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupExperimenter(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupExperimenter(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupExperimenter(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_lookupExperimenter(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupExperimenter(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupExperimenter(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupExperimenter(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_lookupExperimenter(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterPtr __ret;
                try
                {
                    __ret = __proxy->end_lookupExperimenter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterPtr&)> _response;
        };
        return begin_lookupExperimenter(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_lookupExperimenter(const ::std::string& name)
    {
        return begin_lookupExperimenter(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupExperimenter(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_lookupExperimenter(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupExperimenter(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupExperimenter(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupExperimenter(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupExperimenter(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupExperimenter(const ::std::string& name, const ::omero::api::Callback_IAdmin_lookupExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupExperimenter(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupExperimenter(const ::std::string& name, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_lookupExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupExperimenter(name, &__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterPtr end_lookupExperimenter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterPtr lookupExperimenter(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_lookupExperimenter(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool lookupExperimenter_async(const ::omero::api::AMI_IAdmin_lookupExperimenterPtr&, const ::std::string&);
    bool lookupExperimenter_async(const ::omero::api::AMI_IAdmin_lookupExperimenterPtr&, const ::std::string&, const ::Ice::Context&);

    ::omero::api::ExperimenterList lookupExperimenters()
    {
        return lookupExperimenters(0);
    }
    ::omero::api::ExperimenterList lookupExperimenters(const ::Ice::Context& __ctx)
    {
        return lookupExperimenters(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_lookupExperimenters(const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupExperimenters(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupExperimenters(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupExperimenters(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_lookupExperimenters(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupExperimenters(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupExperimenters(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupExperimenters(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_lookupExperimenters(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::ExperimenterList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::api::ExperimenterList __ret;
                try
                {
                    __ret = __proxy->end_lookupExperimenters(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::ExperimenterList&)> _response;
        };
        return begin_lookupExperimenters(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_lookupExperimenters()
    {
        return begin_lookupExperimenters(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupExperimenters(const ::Ice::Context& __ctx)
    {
        return begin_lookupExperimenters(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupExperimenters(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupExperimenters(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupExperimenters(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupExperimenters(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupExperimenters(const ::omero::api::Callback_IAdmin_lookupExperimentersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupExperimenters(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupExperimenters(const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_lookupExperimentersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupExperimenters(&__ctx, __del, __cookie);
    }

    ::omero::api::ExperimenterList end_lookupExperimenters(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::ExperimenterList lookupExperimenters(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_lookupExperimenters(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool lookupExperimenters_async(const ::omero::api::AMI_IAdmin_lookupExperimentersPtr&);
    bool lookupExperimenters_async(const ::omero::api::AMI_IAdmin_lookupExperimentersPtr&, const ::Ice::Context&);

    ::omero::model::ExperimenterGroupPtr getGroup(::Ice::Long id)
    {
        return getGroup(id, 0);
    }
    ::omero::model::ExperimenterGroupPtr getGroup(::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return getGroup(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getGroup(::Ice::Long id, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGroup(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGroup(::Ice::Long id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGroup(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getGroup(::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGroup(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGroup(::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGroup(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getGroup(::Ice::Long id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterGroupPtr __ret;
                try
                {
                    __ret = __proxy->end_getGroup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)> _response;
        };
        return begin_getGroup(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getGroup(::Ice::Long id)
    {
        return begin_getGroup(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGroup(::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return begin_getGroup(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGroup(::Ice::Long id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroup(::Ice::Long id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroup(::Ice::Long id, const ::omero::api::Callback_IAdmin_getGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroup(::Ice::Long id, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_getGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(id, &__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupPtr end_getGroup(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupPtr getGroup(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getGroup(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getGroup_async(const ::omero::api::AMI_IAdmin_getGroupPtr&, ::Ice::Long);
    bool getGroup_async(const ::omero::api::AMI_IAdmin_getGroupPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::model::ExperimenterGroupPtr lookupGroup(const ::std::string& name)
    {
        return lookupGroup(name, 0);
    }
    ::omero::model::ExperimenterGroupPtr lookupGroup(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return lookupGroup(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_lookupGroup(const ::std::string& name, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupGroup(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupGroup(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupGroup(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_lookupGroup(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupGroup(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupGroup(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupGroup(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_lookupGroup(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterGroupPtr __ret;
                try
                {
                    __ret = __proxy->end_lookupGroup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)> _response;
        };
        return begin_lookupGroup(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_lookupGroup(const ::std::string& name)
    {
        return begin_lookupGroup(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupGroup(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_lookupGroup(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupGroup(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupGroup(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupGroup(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupGroup(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupGroup(const ::std::string& name, const ::omero::api::Callback_IAdmin_lookupGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupGroup(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupGroup(const ::std::string& name, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_lookupGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupGroup(name, &__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupPtr end_lookupGroup(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupPtr lookupGroup(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_lookupGroup(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool lookupGroup_async(const ::omero::api::AMI_IAdmin_lookupGroupPtr&, const ::std::string&);
    bool lookupGroup_async(const ::omero::api::AMI_IAdmin_lookupGroupPtr&, const ::std::string&, const ::Ice::Context&);

    ::omero::api::ExperimenterGroupList lookupGroups()
    {
        return lookupGroups(0);
    }
    ::omero::api::ExperimenterGroupList lookupGroups(const ::Ice::Context& __ctx)
    {
        return lookupGroups(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_lookupGroups(const ::IceInternal::Function<void (const ::omero::api::ExperimenterGroupList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupGroups(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupGroups(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupGroups(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_lookupGroups(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterGroupList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupGroups(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupGroups(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupGroups(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_lookupGroups(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterGroupList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::ExperimenterGroupList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::api::ExperimenterGroupList __ret;
                try
                {
                    __ret = __proxy->end_lookupGroups(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::ExperimenterGroupList&)> _response;
        };
        return begin_lookupGroups(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_lookupGroups()
    {
        return begin_lookupGroups(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupGroups(const ::Ice::Context& __ctx)
    {
        return begin_lookupGroups(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupGroups(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupGroups(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupGroups(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupGroups(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupGroups(const ::omero::api::Callback_IAdmin_lookupGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupGroups(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupGroups(const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_lookupGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupGroups(&__ctx, __del, __cookie);
    }

    ::omero::api::ExperimenterGroupList end_lookupGroups(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::ExperimenterGroupList lookupGroups(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_lookupGroups(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool lookupGroups_async(const ::omero::api::AMI_IAdmin_lookupGroupsPtr&);
    bool lookupGroups_async(const ::omero::api::AMI_IAdmin_lookupGroupsPtr&, const ::Ice::Context&);

    ::omero::api::ExperimenterList containedExperimenters(::Ice::Long groupId)
    {
        return containedExperimenters(groupId, 0);
    }
    ::omero::api::ExperimenterList containedExperimenters(::Ice::Long groupId, const ::Ice::Context& __ctx)
    {
        return containedExperimenters(groupId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_containedExperimenters(::Ice::Long groupId, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_containedExperimenters(groupId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_containedExperimenters(::Ice::Long groupId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_containedExperimenters(groupId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_containedExperimenters(::Ice::Long groupId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_containedExperimenters(groupId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_containedExperimenters(::Ice::Long groupId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_containedExperimenters(groupId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_containedExperimenters(::Ice::Long groupId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::ExperimenterList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::api::ExperimenterList __ret;
                try
                {
                    __ret = __proxy->end_containedExperimenters(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::ExperimenterList&)> _response;
        };
        return begin_containedExperimenters(groupId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_containedExperimenters(::Ice::Long groupId)
    {
        return begin_containedExperimenters(groupId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_containedExperimenters(::Ice::Long groupId, const ::Ice::Context& __ctx)
    {
        return begin_containedExperimenters(groupId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_containedExperimenters(::Ice::Long groupId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_containedExperimenters(groupId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_containedExperimenters(::Ice::Long groupId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_containedExperimenters(groupId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_containedExperimenters(::Ice::Long groupId, const ::omero::api::Callback_IAdmin_containedExperimentersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_containedExperimenters(groupId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_containedExperimenters(::Ice::Long groupId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_containedExperimentersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_containedExperimenters(groupId, &__ctx, __del, __cookie);
    }

    ::omero::api::ExperimenterList end_containedExperimenters(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::ExperimenterList containedExperimenters(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_containedExperimenters(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool containedExperimenters_async(const ::omero::api::AMI_IAdmin_containedExperimentersPtr&, ::Ice::Long);
    bool containedExperimenters_async(const ::omero::api::AMI_IAdmin_containedExperimentersPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::api::ExperimenterGroupList containedGroups(::Ice::Long experimenterId)
    {
        return containedGroups(experimenterId, 0);
    }
    ::omero::api::ExperimenterGroupList containedGroups(::Ice::Long experimenterId, const ::Ice::Context& __ctx)
    {
        return containedGroups(experimenterId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_containedGroups(::Ice::Long experimenterId, const ::IceInternal::Function<void (const ::omero::api::ExperimenterGroupList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_containedGroups(experimenterId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_containedGroups(::Ice::Long experimenterId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_containedGroups(experimenterId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_containedGroups(::Ice::Long experimenterId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterGroupList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_containedGroups(experimenterId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_containedGroups(::Ice::Long experimenterId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_containedGroups(experimenterId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_containedGroups(::Ice::Long experimenterId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterGroupList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::ExperimenterGroupList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::api::ExperimenterGroupList __ret;
                try
                {
                    __ret = __proxy->end_containedGroups(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::ExperimenterGroupList&)> _response;
        };
        return begin_containedGroups(experimenterId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_containedGroups(::Ice::Long experimenterId)
    {
        return begin_containedGroups(experimenterId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_containedGroups(::Ice::Long experimenterId, const ::Ice::Context& __ctx)
    {
        return begin_containedGroups(experimenterId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_containedGroups(::Ice::Long experimenterId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_containedGroups(experimenterId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_containedGroups(::Ice::Long experimenterId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_containedGroups(experimenterId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_containedGroups(::Ice::Long experimenterId, const ::omero::api::Callback_IAdmin_containedGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_containedGroups(experimenterId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_containedGroups(::Ice::Long experimenterId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_containedGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_containedGroups(experimenterId, &__ctx, __del, __cookie);
    }

    ::omero::api::ExperimenterGroupList end_containedGroups(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::ExperimenterGroupList containedGroups(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_containedGroups(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool containedGroups_async(const ::omero::api::AMI_IAdmin_containedGroupsPtr&, ::Ice::Long);
    bool containedGroups_async(const ::omero::api::AMI_IAdmin_containedGroupsPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::model::ExperimenterGroupPtr getDefaultGroup(::Ice::Long experimenterId)
    {
        return getDefaultGroup(experimenterId, 0);
    }
    ::omero::model::ExperimenterGroupPtr getDefaultGroup(::Ice::Long experimenterId, const ::Ice::Context& __ctx)
    {
        return getDefaultGroup(experimenterId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDefaultGroup(::Ice::Long experimenterId, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDefaultGroup(experimenterId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDefaultGroup(::Ice::Long experimenterId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDefaultGroup(experimenterId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDefaultGroup(::Ice::Long experimenterId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDefaultGroup(experimenterId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDefaultGroup(::Ice::Long experimenterId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDefaultGroup(experimenterId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDefaultGroup(::Ice::Long experimenterId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterGroupPtr __ret;
                try
                {
                    __ret = __proxy->end_getDefaultGroup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)> _response;
        };
        return begin_getDefaultGroup(experimenterId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDefaultGroup(::Ice::Long experimenterId)
    {
        return begin_getDefaultGroup(experimenterId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDefaultGroup(::Ice::Long experimenterId, const ::Ice::Context& __ctx)
    {
        return begin_getDefaultGroup(experimenterId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDefaultGroup(::Ice::Long experimenterId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDefaultGroup(experimenterId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDefaultGroup(::Ice::Long experimenterId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDefaultGroup(experimenterId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDefaultGroup(::Ice::Long experimenterId, const ::omero::api::Callback_IAdmin_getDefaultGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDefaultGroup(experimenterId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDefaultGroup(::Ice::Long experimenterId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_getDefaultGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDefaultGroup(experimenterId, &__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupPtr end_getDefaultGroup(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupPtr getDefaultGroup(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDefaultGroup(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getDefaultGroup_async(const ::omero::api::AMI_IAdmin_getDefaultGroupPtr&, ::Ice::Long);
    bool getDefaultGroup_async(const ::omero::api::AMI_IAdmin_getDefaultGroupPtr&, ::Ice::Long, const ::Ice::Context&);

    ::std::string lookupLdapAuthExperimenter(::Ice::Long id)
    {
        return lookupLdapAuthExperimenter(id, 0);
    }
    ::std::string lookupLdapAuthExperimenter(::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return lookupLdapAuthExperimenter(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_lookupLdapAuthExperimenter(::Ice::Long id, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupLdapAuthExperimenter(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupLdapAuthExperimenter(::Ice::Long id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupLdapAuthExperimenter(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_lookupLdapAuthExperimenter(::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupLdapAuthExperimenter(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupLdapAuthExperimenter(::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupLdapAuthExperimenter(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_lookupLdapAuthExperimenter(::Ice::Long id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_lookupLdapAuthExperimenter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_lookupLdapAuthExperimenter(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenter(::Ice::Long id)
    {
        return begin_lookupLdapAuthExperimenter(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenter(::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return begin_lookupLdapAuthExperimenter(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenter(::Ice::Long id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupLdapAuthExperimenter(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenter(::Ice::Long id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupLdapAuthExperimenter(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenter(::Ice::Long id, const ::omero::api::Callback_IAdmin_lookupLdapAuthExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupLdapAuthExperimenter(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenter(::Ice::Long id, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_lookupLdapAuthExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupLdapAuthExperimenter(id, &__ctx, __del, __cookie);
    }

    ::std::string end_lookupLdapAuthExperimenter(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string lookupLdapAuthExperimenter(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenter(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool lookupLdapAuthExperimenter_async(const ::omero::api::AMI_IAdmin_lookupLdapAuthExperimenterPtr&, ::Ice::Long);
    bool lookupLdapAuthExperimenter_async(const ::omero::api::AMI_IAdmin_lookupLdapAuthExperimenterPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::RListPtr lookupLdapAuthExperimenters()
    {
        return lookupLdapAuthExperimenters(0);
    }
    ::omero::RListPtr lookupLdapAuthExperimenters(const ::Ice::Context& __ctx)
    {
        return lookupLdapAuthExperimenters(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_lookupLdapAuthExperimenters(const ::IceInternal::Function<void (const ::omero::RListPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupLdapAuthExperimenters(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupLdapAuthExperimenters(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupLdapAuthExperimenters(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_lookupLdapAuthExperimenters(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RListPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_lookupLdapAuthExperimenters(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_lookupLdapAuthExperimenters(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookupLdapAuthExperimenters(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_lookupLdapAuthExperimenters(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RListPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RListPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::RListPtr __ret;
                try
                {
                    __ret = __proxy->end_lookupLdapAuthExperimenters(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RListPtr&)> _response;
        };
        return begin_lookupLdapAuthExperimenters(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenters()
    {
        return begin_lookupLdapAuthExperimenters(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenters(const ::Ice::Context& __ctx)
    {
        return begin_lookupLdapAuthExperimenters(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenters(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupLdapAuthExperimenters(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenters(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupLdapAuthExperimenters(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenters(const ::omero::api::Callback_IAdmin_lookupLdapAuthExperimentersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupLdapAuthExperimenters(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenters(const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_lookupLdapAuthExperimentersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookupLdapAuthExperimenters(&__ctx, __del, __cookie);
    }

    ::omero::RListPtr end_lookupLdapAuthExperimenters(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RListPtr lookupLdapAuthExperimenters(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_lookupLdapAuthExperimenters(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool lookupLdapAuthExperimenters_async(const ::omero::api::AMI_IAdmin_lookupLdapAuthExperimentersPtr&);
    bool lookupLdapAuthExperimenters_async(const ::omero::api::AMI_IAdmin_lookupLdapAuthExperimentersPtr&, const ::Ice::Context&);

    ::omero::api::LongList getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp)
    {
        return getMemberOfGroupIds(exp, 0);
    }
    ::omero::api::LongList getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx)
    {
        return getMemberOfGroupIds(exp, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::IceInternal::Function<void (const ::omero::api::LongList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMemberOfGroupIds(exp, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMemberOfGroupIds(exp, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::LongList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMemberOfGroupIds(exp, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMemberOfGroupIds(exp, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::LongList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::LongList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::api::LongList __ret;
                try
                {
                    __ret = __proxy->end_getMemberOfGroupIds(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::LongList&)> _response;
        };
        return begin_getMemberOfGroupIds(exp, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp)
    {
        return begin_getMemberOfGroupIds(exp, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx)
    {
        return begin_getMemberOfGroupIds(exp, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberOfGroupIds(exp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberOfGroupIds(exp, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::omero::api::Callback_IAdmin_getMemberOfGroupIdsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberOfGroupIds(exp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_getMemberOfGroupIdsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberOfGroupIds(exp, &__ctx, __del, __cookie);
    }

    ::omero::api::LongList end_getMemberOfGroupIds(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::LongList getMemberOfGroupIds(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMemberOfGroupIds(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getMemberOfGroupIds_async(const ::omero::api::AMI_IAdmin_getMemberOfGroupIdsPtr&, const ::omero::model::ExperimenterPtr&);
    bool getMemberOfGroupIds_async(const ::omero::api::AMI_IAdmin_getMemberOfGroupIdsPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context&);

    ::omero::api::LongList getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp)
    {
        return getLeaderOfGroupIds(exp, 0);
    }
    ::omero::api::LongList getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx)
    {
        return getLeaderOfGroupIds(exp, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::IceInternal::Function<void (const ::omero::api::LongList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLeaderOfGroupIds(exp, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLeaderOfGroupIds(exp, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::LongList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLeaderOfGroupIds(exp, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLeaderOfGroupIds(exp, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::LongList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::LongList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::api::LongList __ret;
                try
                {
                    __ret = __proxy->end_getLeaderOfGroupIds(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::LongList&)> _response;
        };
        return begin_getLeaderOfGroupIds(exp, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp)
    {
        return begin_getLeaderOfGroupIds(exp, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx)
    {
        return begin_getLeaderOfGroupIds(exp, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLeaderOfGroupIds(exp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLeaderOfGroupIds(exp, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::omero::api::Callback_IAdmin_getLeaderOfGroupIdsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLeaderOfGroupIds(exp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_getLeaderOfGroupIdsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLeaderOfGroupIds(exp, &__ctx, __del, __cookie);
    }

    ::omero::api::LongList end_getLeaderOfGroupIds(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::LongList getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getLeaderOfGroupIds_async(const ::omero::api::AMI_IAdmin_getLeaderOfGroupIdsPtr&, const ::omero::model::ExperimenterPtr&);
    bool getLeaderOfGroupIds_async(const ::omero::api::AMI_IAdmin_getLeaderOfGroupIdsPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context&);

    void updateSelf(const ::omero::model::ExperimenterPtr& experimenter)
    {
        updateSelf(experimenter, 0);
    }
    void updateSelf(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx)
    {
        updateSelf(experimenter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateSelf(const ::omero::model::ExperimenterPtr& experimenter, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateSelf(experimenter, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateSelf(const ::omero::model::ExperimenterPtr& experimenter, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateSelf(experimenter, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateSelf(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateSelf(experimenter, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateSelf(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateSelf(experimenter, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateSelf(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_updateSelf(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_updateSelf(experimenter, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateSelf(const ::omero::model::ExperimenterPtr& experimenter)
    {
        return begin_updateSelf(experimenter, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateSelf(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx)
    {
        return begin_updateSelf(experimenter, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateSelf(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateSelf(experimenter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateSelf(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateSelf(experimenter, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateSelf(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::api::Callback_IAdmin_updateSelfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateSelf(experimenter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateSelf(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_updateSelfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateSelf(experimenter, &__ctx, __del, __cookie);
    }

    void end_updateSelf(const ::Ice::AsyncResultPtr&);
    
private:

    void updateSelf(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateSelf(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool updateSelf_async(const ::omero::api::AMI_IAdmin_updateSelfPtr&, const ::omero::model::ExperimenterPtr&);
    bool updateSelf_async(const ::omero::api::AMI_IAdmin_updateSelfPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context&);

    ::Ice::Long uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data)
    {
        return uploadMyUserPhoto(filename, format, data, 0);
    }
    ::Ice::Long uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx)
    {
        return uploadMyUserPhoto(filename, format, data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadMyUserPhoto(filename, format, data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadMyUserPhoto(filename, format, data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadMyUserPhoto(filename, format, data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadMyUserPhoto(filename, format, data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_uploadMyUserPhoto(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_uploadMyUserPhoto(filename, format, data, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data)
    {
        return begin_uploadMyUserPhoto(filename, format, data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx)
    {
        return begin_uploadMyUserPhoto(filename, format, data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadMyUserPhoto(filename, format, data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadMyUserPhoto(filename, format, data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data, const ::omero::api::Callback_IAdmin_uploadMyUserPhotoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadMyUserPhoto(filename, format, data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadMyUserPhoto(const ::std::string& filename, const ::std::string& format, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_uploadMyUserPhotoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadMyUserPhoto(filename, format, data, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_uploadMyUserPhoto(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long uploadMyUserPhoto(const ::std::string&, const ::std::string&, const ::Ice::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_uploadMyUserPhoto(const ::std::string&, const ::std::string&, const ::Ice::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool uploadMyUserPhoto_async(const ::omero::api::AMI_IAdmin_uploadMyUserPhotoPtr&, const ::std::string&, const ::std::string&, const ::Ice::ByteSeq&);
    bool uploadMyUserPhoto_async(const ::omero::api::AMI_IAdmin_uploadMyUserPhotoPtr&, const ::std::string&, const ::std::string&, const ::Ice::ByteSeq&, const ::Ice::Context&);

    ::omero::api::OriginalFileList getMyUserPhotos()
    {
        return getMyUserPhotos(0);
    }
    ::omero::api::OriginalFileList getMyUserPhotos(const ::Ice::Context& __ctx)
    {
        return getMyUserPhotos(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMyUserPhotos(const ::IceInternal::Function<void (const ::omero::api::OriginalFileList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMyUserPhotos(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMyUserPhotos(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMyUserPhotos(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMyUserPhotos(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::OriginalFileList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMyUserPhotos(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMyUserPhotos(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMyUserPhotos(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMyUserPhotos(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::OriginalFileList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::OriginalFileList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::api::OriginalFileList __ret;
                try
                {
                    __ret = __proxy->end_getMyUserPhotos(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::OriginalFileList&)> _response;
        };
        return begin_getMyUserPhotos(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMyUserPhotos()
    {
        return begin_getMyUserPhotos(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMyUserPhotos(const ::Ice::Context& __ctx)
    {
        return begin_getMyUserPhotos(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMyUserPhotos(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMyUserPhotos(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMyUserPhotos(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMyUserPhotos(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMyUserPhotos(const ::omero::api::Callback_IAdmin_getMyUserPhotosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMyUserPhotos(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMyUserPhotos(const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_getMyUserPhotosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMyUserPhotos(&__ctx, __del, __cookie);
    }

    ::omero::api::OriginalFileList end_getMyUserPhotos(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::OriginalFileList getMyUserPhotos(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMyUserPhotos(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getMyUserPhotos_async(const ::omero::api::AMI_IAdmin_getMyUserPhotosPtr&);
    bool getMyUserPhotos_async(const ::omero::api::AMI_IAdmin_getMyUserPhotosPtr&, const ::Ice::Context&);

    void updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter)
    {
        updateExperimenter(experimenter, 0);
    }
    void updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx)
    {
        updateExperimenter(experimenter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateExperimenter(experimenter, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateExperimenter(experimenter, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateExperimenter(experimenter, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateExperimenter(experimenter, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_updateExperimenter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_updateExperimenter(experimenter, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter)
    {
        return begin_updateExperimenter(experimenter, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx)
    {
        return begin_updateExperimenter(experimenter, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExperimenter(experimenter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExperimenter(experimenter, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::api::Callback_IAdmin_updateExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExperimenter(experimenter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateExperimenter(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_updateExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExperimenter(experimenter, &__ctx, __del, __cookie);
    }

    void end_updateExperimenter(const ::Ice::AsyncResultPtr&);
    
private:

    void updateExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool updateExperimenter_async(const ::omero::api::AMI_IAdmin_updateExperimenterPtr&, const ::omero::model::ExperimenterPtr&);
    bool updateExperimenter_async(const ::omero::api::AMI_IAdmin_updateExperimenterPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context&);

    void updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password)
    {
        updateExperimenterWithPassword(experimenter, password, 0);
    }
    void updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password, const ::Ice::Context& __ctx)
    {
        updateExperimenterWithPassword(experimenter, password, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateExperimenterWithPassword(experimenter, password, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateExperimenterWithPassword(experimenter, password, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateExperimenterWithPassword(experimenter, password, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateExperimenterWithPassword(experimenter, password, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_updateExperimenterWithPassword(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_updateExperimenterWithPassword(experimenter, password, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password)
    {
        return begin_updateExperimenterWithPassword(experimenter, password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password, const ::Ice::Context& __ctx)
    {
        return begin_updateExperimenterWithPassword(experimenter, password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExperimenterWithPassword(experimenter, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExperimenterWithPassword(experimenter, password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password, const ::omero::api::Callback_IAdmin_updateExperimenterWithPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExperimenterWithPassword(experimenter, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::RStringPtr& password, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_updateExperimenterWithPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExperimenterWithPassword(experimenter, password, &__ctx, __del, __cookie);
    }

    void end_updateExperimenterWithPassword(const ::Ice::AsyncResultPtr&);
    
private:

    void updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool updateExperimenterWithPassword_async(const ::omero::api::AMI_IAdmin_updateExperimenterWithPasswordPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&);
    bool updateExperimenterWithPassword_async(const ::omero::api::AMI_IAdmin_updateExperimenterWithPasswordPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::Ice::Context&);

    void updateGroup(const ::omero::model::ExperimenterGroupPtr& group)
    {
        updateGroup(group, 0);
    }
    void updateGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx)
    {
        updateGroup(group, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateGroup(group, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateGroup(group, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateGroup(group, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateGroup(group, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_updateGroup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_updateGroup(group, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateGroup(const ::omero::model::ExperimenterGroupPtr& group)
    {
        return begin_updateGroup(group, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx)
    {
        return begin_updateGroup(group, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateGroup(group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateGroup(group, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::Callback_IAdmin_updateGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateGroup(group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_updateGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateGroup(group, &__ctx, __del, __cookie);
    }

    void end_updateGroup(const ::Ice::AsyncResultPtr&);
    
private:

    void updateGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool updateGroup_async(const ::omero::api::AMI_IAdmin_updateGroupPtr&, const ::omero::model::ExperimenterGroupPtr&);
    bool updateGroup_async(const ::omero::api::AMI_IAdmin_updateGroupPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context&);

    ::Ice::Long createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group)
    {
        return createUser(experimenter, group, 0);
    }
    ::Ice::Long createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group, const ::Ice::Context& __ctx)
    {
        return createUser(experimenter, group, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createUser(experimenter, group, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createUser(experimenter, group, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createUser(experimenter, group, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createUser(experimenter, group, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_createUser(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_createUser(experimenter, group, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group)
    {
        return begin_createUser(experimenter, group, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group, const ::Ice::Context& __ctx)
    {
        return begin_createUser(experimenter, group, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(experimenter, group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(experimenter, group, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group, const ::omero::api::Callback_IAdmin_createUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(experimenter, group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::omero::model::ExperimenterPtr& experimenter, const ::std::string& group, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_createUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(experimenter, group, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_createUser(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long createUser(const ::omero::model::ExperimenterPtr&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createUser(const ::omero::model::ExperimenterPtr&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool createUser_async(const ::omero::api::AMI_IAdmin_createUserPtr&, const ::omero::model::ExperimenterPtr&, const ::std::string&);
    bool createUser_async(const ::omero::api::AMI_IAdmin_createUserPtr&, const ::omero::model::ExperimenterPtr&, const ::std::string&, const ::Ice::Context&);

    ::Ice::Long createSystemUser(const ::omero::model::ExperimenterPtr& experimenter)
    {
        return createSystemUser(experimenter, 0);
    }
    ::Ice::Long createSystemUser(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx)
    {
        return createSystemUser(experimenter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createSystemUser(const ::omero::model::ExperimenterPtr& experimenter, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createSystemUser(experimenter, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createSystemUser(const ::omero::model::ExperimenterPtr& experimenter, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createSystemUser(experimenter, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createSystemUser(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createSystemUser(experimenter, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createSystemUser(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createSystemUser(experimenter, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createSystemUser(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_createSystemUser(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_createSystemUser(experimenter, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createSystemUser(const ::omero::model::ExperimenterPtr& experimenter)
    {
        return begin_createSystemUser(experimenter, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSystemUser(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx)
    {
        return begin_createSystemUser(experimenter, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSystemUser(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSystemUser(experimenter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSystemUser(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSystemUser(experimenter, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSystemUser(const ::omero::model::ExperimenterPtr& experimenter, const ::omero::api::Callback_IAdmin_createSystemUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSystemUser(experimenter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSystemUser(const ::omero::model::ExperimenterPtr& experimenter, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_createSystemUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSystemUser(experimenter, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_createSystemUser(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long createSystemUser(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createSystemUser(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool createSystemUser_async(const ::omero::api::AMI_IAdmin_createSystemUserPtr&, const ::omero::model::ExperimenterPtr&);
    bool createSystemUser_async(const ::omero::api::AMI_IAdmin_createSystemUserPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context&);

    ::Ice::Long createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups)
    {
        return createExperimenter(user, defaultGroup, groups, 0);
    }
    ::Ice::Long createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx)
    {
        return createExperimenter(user, defaultGroup, groups, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createExperimenter(user, defaultGroup, groups, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createExperimenter(user, defaultGroup, groups, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createExperimenter(user, defaultGroup, groups, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createExperimenter(user, defaultGroup, groups, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_createExperimenter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_createExperimenter(user, defaultGroup, groups, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups)
    {
        return begin_createExperimenter(user, defaultGroup, groups, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx)
    {
        return begin_createExperimenter(user, defaultGroup, groups, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createExperimenter(user, defaultGroup, groups, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createExperimenter(user, defaultGroup, groups, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::omero::api::Callback_IAdmin_createExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createExperimenter(user, defaultGroup, groups, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_createExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createExperimenter(user, defaultGroup, groups, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_createExperimenter(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long createExperimenter(const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createExperimenter(const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool createExperimenter_async(const ::omero::api::AMI_IAdmin_createExperimenterPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&);
    bool createExperimenter_async(const ::omero::api::AMI_IAdmin_createExperimenterPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context&);

    ::Ice::Long createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups)
    {
        return createExperimenterWithPassword(user, password, defaultGroup, groups, 0);
    }
    ::Ice::Long createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx)
    {
        return createExperimenterWithPassword(user, password, defaultGroup, groups, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createExperimenterWithPassword(user, password, defaultGroup, groups, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createExperimenterWithPassword(user, password, defaultGroup, groups, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createExperimenterWithPassword(user, password, defaultGroup, groups, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createExperimenterWithPassword(user, password, defaultGroup, groups, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_createExperimenterWithPassword(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_createExperimenterWithPassword(user, password, defaultGroup, groups, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups)
    {
        return begin_createExperimenterWithPassword(user, password, defaultGroup, groups, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx)
    {
        return begin_createExperimenterWithPassword(user, password, defaultGroup, groups, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createExperimenterWithPassword(user, password, defaultGroup, groups, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createExperimenterWithPassword(user, password, defaultGroup, groups, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::omero::api::Callback_IAdmin_createExperimenterWithPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createExperimenterWithPassword(user, password, defaultGroup, groups, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr& user, const ::omero::RStringPtr& password, const ::omero::model::ExperimenterGroupPtr& defaultGroup, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_createExperimenterWithPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createExperimenterWithPassword(user, password, defaultGroup, groups, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_createExperimenterWithPassword(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long createExperimenterWithPassword(const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createExperimenterWithPassword(const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool createExperimenterWithPassword_async(const ::omero::api::AMI_IAdmin_createExperimenterWithPasswordPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&);
    bool createExperimenterWithPassword_async(const ::omero::api::AMI_IAdmin_createExperimenterWithPasswordPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context&);

    ::Ice::Long createGroup(const ::omero::model::ExperimenterGroupPtr& group)
    {
        return createGroup(group, 0);
    }
    ::Ice::Long createGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx)
    {
        return createGroup(group, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createGroup(group, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createGroup(group, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createGroup(group, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createGroup(group, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_createGroup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_createGroup(group, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createGroup(const ::omero::model::ExperimenterGroupPtr& group)
    {
        return begin_createGroup(group, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx)
    {
        return begin_createGroup(group, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createGroup(group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createGroup(group, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::Callback_IAdmin_createGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createGroup(group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_createGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createGroup(group, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_createGroup(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long createGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool createGroup_async(const ::omero::api::AMI_IAdmin_createGroupPtr&, const ::omero::model::ExperimenterGroupPtr&);
    bool createGroup_async(const ::omero::api::AMI_IAdmin_createGroupPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context&);

    void addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups)
    {
        addGroups(user, groups, 0);
    }
    void addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx)
    {
        addGroups(user, groups, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addGroups(user, groups, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addGroups(user, groups, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addGroups(user, groups, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addGroups(user, groups, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_addGroups(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_addGroups(user, groups, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups)
    {
        return begin_addGroups(user, groups, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx)
    {
        return begin_addGroups(user, groups, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroups(user, groups, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroups(user, groups, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::omero::api::Callback_IAdmin_addGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroups(user, groups, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_addGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroups(user, groups, &__ctx, __del, __cookie);
    }

    void end_addGroups(const ::Ice::AsyncResultPtr&);
    
private:

    void addGroups(const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addGroups(const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addGroups_async(const ::omero::api::AMI_IAdmin_addGroupsPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&);
    bool addGroups_async(const ::omero::api::AMI_IAdmin_addGroupsPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context&);

    void removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups)
    {
        removeGroups(user, groups, 0);
    }
    void removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx)
    {
        removeGroups(user, groups, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeGroups(user, groups, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeGroups(user, groups, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeGroups(user, groups, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeGroups(user, groups, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_removeGroups(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_removeGroups(user, groups, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups)
    {
        return begin_removeGroups(user, groups, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx)
    {
        return begin_removeGroups(user, groups, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroups(user, groups, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroups(user, groups, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::omero::api::Callback_IAdmin_removeGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroups(user, groups, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroups(const ::omero::model::ExperimenterPtr& user, const ::omero::api::ExperimenterGroupList& groups, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_removeGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroups(user, groups, &__ctx, __del, __cookie);
    }

    void end_removeGroups(const ::Ice::AsyncResultPtr&);
    
private:

    void removeGroups(const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeGroups(const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool removeGroups_async(const ::omero::api::AMI_IAdmin_removeGroupsPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&);
    bool removeGroups_async(const ::omero::api::AMI_IAdmin_removeGroupsPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context&);

    void setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group)
    {
        setDefaultGroup(user, group, 0);
    }
    void setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx)
    {
        setDefaultGroup(user, group, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDefaultGroup(user, group, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDefaultGroup(user, group, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDefaultGroup(user, group, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDefaultGroup(user, group, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setDefaultGroup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setDefaultGroup(user, group, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group)
    {
        return begin_setDefaultGroup(user, group, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx)
    {
        return begin_setDefaultGroup(user, group, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDefaultGroup(user, group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDefaultGroup(user, group, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::Callback_IAdmin_setDefaultGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDefaultGroup(user, group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDefaultGroup(const ::omero::model::ExperimenterPtr& user, const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_setDefaultGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDefaultGroup(user, group, &__ctx, __del, __cookie);
    }

    void end_setDefaultGroup(const ::Ice::AsyncResultPtr&);
    
private:

    void setDefaultGroup(const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDefaultGroup(const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool setDefaultGroup_async(const ::omero::api::AMI_IAdmin_setDefaultGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&);
    bool setDefaultGroup_async(const ::omero::api::AMI_IAdmin_setDefaultGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context&);

    void setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner)
    {
        setGroupOwner(group, owner, 0);
    }
    void setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx)
    {
        setGroupOwner(group, owner, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setGroupOwner(group, owner, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroupOwner(group, owner, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setGroupOwner(group, owner, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroupOwner(group, owner, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setGroupOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setGroupOwner(group, owner, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner)
    {
        return begin_setGroupOwner(group, owner, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx)
    {
        return begin_setGroupOwner(group, owner, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupOwner(group, owner, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupOwner(group, owner, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::omero::api::Callback_IAdmin_setGroupOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupOwner(group, owner, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_setGroupOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupOwner(group, owner, &__ctx, __del, __cookie);
    }

    void end_setGroupOwner(const ::Ice::AsyncResultPtr&);
    
private:

    void setGroupOwner(const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setGroupOwner(const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool setGroupOwner_async(const ::omero::api::AMI_IAdmin_setGroupOwnerPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&);
    bool setGroupOwner_async(const ::omero::api::AMI_IAdmin_setGroupOwnerPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context&);

    void unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner)
    {
        unsetGroupOwner(group, owner, 0);
    }
    void unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx)
    {
        unsetGroupOwner(group, owner, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unsetGroupOwner(group, owner, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unsetGroupOwner(group, owner, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unsetGroupOwner(group, owner, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unsetGroupOwner(group, owner, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unsetGroupOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unsetGroupOwner(group, owner, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner)
    {
        return begin_unsetGroupOwner(group, owner, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx)
    {
        return begin_unsetGroupOwner(group, owner, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unsetGroupOwner(group, owner, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unsetGroupOwner(group, owner, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::omero::api::Callback_IAdmin_unsetGroupOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unsetGroupOwner(group, owner, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::model::ExperimenterPtr& owner, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_unsetGroupOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unsetGroupOwner(group, owner, &__ctx, __del, __cookie);
    }

    void end_unsetGroupOwner(const ::Ice::AsyncResultPtr&);
    
private:

    void unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool unsetGroupOwner_async(const ::omero::api::AMI_IAdmin_unsetGroupOwnerPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&);
    bool unsetGroupOwner_async(const ::omero::api::AMI_IAdmin_unsetGroupOwnerPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context&);

    void addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners)
    {
        addGroupOwners(group, owners, 0);
    }
    void addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx)
    {
        addGroupOwners(group, owners, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addGroupOwners(group, owners, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addGroupOwners(group, owners, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addGroupOwners(group, owners, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addGroupOwners(group, owners, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_addGroupOwners(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_addGroupOwners(group, owners, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners)
    {
        return begin_addGroupOwners(group, owners, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx)
    {
        return begin_addGroupOwners(group, owners, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupOwners(group, owners, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupOwners(group, owners, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::omero::api::Callback_IAdmin_addGroupOwnersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupOwners(group, owners, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_addGroupOwnersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupOwners(group, owners, &__ctx, __del, __cookie);
    }

    void end_addGroupOwners(const ::Ice::AsyncResultPtr&);
    
private:

    void addGroupOwners(const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addGroupOwners(const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addGroupOwners_async(const ::omero::api::AMI_IAdmin_addGroupOwnersPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&);
    bool addGroupOwners_async(const ::omero::api::AMI_IAdmin_addGroupOwnersPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context&);

    void removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners)
    {
        removeGroupOwners(group, owners, 0);
    }
    void removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx)
    {
        removeGroupOwners(group, owners, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeGroupOwners(group, owners, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeGroupOwners(group, owners, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeGroupOwners(group, owners, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeGroupOwners(group, owners, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_removeGroupOwners(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_removeGroupOwners(group, owners, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners)
    {
        return begin_removeGroupOwners(group, owners, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx)
    {
        return begin_removeGroupOwners(group, owners, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupOwners(group, owners, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupOwners(group, owners, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::omero::api::Callback_IAdmin_removeGroupOwnersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupOwners(group, owners, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::ExperimenterList& owners, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_removeGroupOwnersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupOwners(group, owners, &__ctx, __del, __cookie);
    }

    void end_removeGroupOwners(const ::Ice::AsyncResultPtr&);
    
private:

    void removeGroupOwners(const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeGroupOwners(const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool removeGroupOwners_async(const ::omero::api::AMI_IAdmin_removeGroupOwnersPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&);
    bool removeGroupOwners_async(const ::omero::api::AMI_IAdmin_removeGroupOwnersPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context&);

    void deleteExperimenter(const ::omero::model::ExperimenterPtr& user)
    {
        deleteExperimenter(user, 0);
    }
    void deleteExperimenter(const ::omero::model::ExperimenterPtr& user, const ::Ice::Context& __ctx)
    {
        deleteExperimenter(user, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteExperimenter(const ::omero::model::ExperimenterPtr& user, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteExperimenter(user, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteExperimenter(const ::omero::model::ExperimenterPtr& user, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteExperimenter(user, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteExperimenter(const ::omero::model::ExperimenterPtr& user, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteExperimenter(user, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteExperimenter(const ::omero::model::ExperimenterPtr& user, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteExperimenter(user, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteExperimenter(const ::omero::model::ExperimenterPtr& user, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deleteExperimenter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deleteExperimenter(user, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteExperimenter(const ::omero::model::ExperimenterPtr& user)
    {
        return begin_deleteExperimenter(user, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteExperimenter(const ::omero::model::ExperimenterPtr& user, const ::Ice::Context& __ctx)
    {
        return begin_deleteExperimenter(user, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteExperimenter(const ::omero::model::ExperimenterPtr& user, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteExperimenter(user, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteExperimenter(const ::omero::model::ExperimenterPtr& user, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteExperimenter(user, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteExperimenter(const ::omero::model::ExperimenterPtr& user, const ::omero::api::Callback_IAdmin_deleteExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteExperimenter(user, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteExperimenter(const ::omero::model::ExperimenterPtr& user, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_deleteExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteExperimenter(user, &__ctx, __del, __cookie);
    }

    void end_deleteExperimenter(const ::Ice::AsyncResultPtr&);
    
private:

    void deleteExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool deleteExperimenter_async(const ::omero::api::AMI_IAdmin_deleteExperimenterPtr&, const ::omero::model::ExperimenterPtr&);
    bool deleteExperimenter_async(const ::omero::api::AMI_IAdmin_deleteExperimenterPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context&);

    void deleteGroup(const ::omero::model::ExperimenterGroupPtr& group)
    {
        deleteGroup(group, 0);
    }
    void deleteGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx)
    {
        deleteGroup(group, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteGroup(group, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteGroup(group, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteGroup(group, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteGroup(group, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deleteGroup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deleteGroup(group, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr& group)
    {
        return begin_deleteGroup(group, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx)
    {
        return begin_deleteGroup(group, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteGroup(group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteGroup(group, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::omero::api::Callback_IAdmin_deleteGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteGroup(group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr& group, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_deleteGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteGroup(group, &__ctx, __del, __cookie);
    }

    void end_deleteGroup(const ::Ice::AsyncResultPtr&);
    
private:

    void deleteGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool deleteGroup_async(const ::omero::api::AMI_IAdmin_deleteGroupPtr&, const ::omero::model::ExperimenterGroupPtr&);
    bool deleteGroup_async(const ::omero::api::AMI_IAdmin_deleteGroupPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context&);

    ICE_DEPRECATED_API void changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName)
    {
        changeOwner(obj, omeName, 0);
    }
    ICE_DEPRECATED_API void changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx)
    {
        changeOwner(obj, omeName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeOwner(obj, omeName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeOwner(obj, omeName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeOwner(obj, omeName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeOwner(obj, omeName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_changeOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_changeOwner(obj, omeName, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName)
    {
        return begin_changeOwner(obj, omeName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx)
    {
        return begin_changeOwner(obj, omeName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeOwner(obj, omeName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeOwner(obj, omeName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::omero::api::Callback_IAdmin_changeOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeOwner(obj, omeName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeOwner(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_changeOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeOwner(obj, omeName, &__ctx, __del, __cookie);
    }

    void end_changeOwner(const ::Ice::AsyncResultPtr&);
    
private:

    void changeOwner(const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeOwner(const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool changeOwner_async(const ::omero::api::AMI_IAdmin_changeOwnerPtr&, const ::omero::model::IObjectPtr&, const ::std::string&);
    bool changeOwner_async(const ::omero::api::AMI_IAdmin_changeOwnerPtr&, const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context&);

    ICE_DEPRECATED_API void changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName)
    {
        changeGroup(obj, omeName, 0);
    }
    ICE_DEPRECATED_API void changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx)
    {
        changeGroup(obj, omeName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeGroup(obj, omeName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeGroup(obj, omeName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeGroup(obj, omeName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeGroup(obj, omeName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_changeGroup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_changeGroup(obj, omeName, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName)
    {
        return begin_changeGroup(obj, omeName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx)
    {
        return begin_changeGroup(obj, omeName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeGroup(obj, omeName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeGroup(obj, omeName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::omero::api::Callback_IAdmin_changeGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeGroup(obj, omeName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeGroup(const ::omero::model::IObjectPtr& obj, const ::std::string& omeName, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_changeGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeGroup(obj, omeName, &__ctx, __del, __cookie);
    }

    void end_changeGroup(const ::Ice::AsyncResultPtr&);
    
private:

    void changeGroup(const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeGroup(const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool changeGroup_async(const ::omero::api::AMI_IAdmin_changeGroupPtr&, const ::omero::model::IObjectPtr&, const ::std::string&);
    bool changeGroup_async(const ::omero::api::AMI_IAdmin_changeGroupPtr&, const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context&);

    ICE_DEPRECATED_API void changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms)
    {
        changePermissions(obj, perms, 0);
    }
    ICE_DEPRECATED_API void changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms, const ::Ice::Context& __ctx)
    {
        changePermissions(obj, perms, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changePermissions(obj, perms, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changePermissions(obj, perms, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changePermissions(obj, perms, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changePermissions(obj, perms, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_changePermissions(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_changePermissions(obj, perms, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms)
    {
        return begin_changePermissions(obj, perms, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms, const ::Ice::Context& __ctx)
    {
        return begin_changePermissions(obj, perms, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePermissions(obj, perms, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePermissions(obj, perms, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms, const ::omero::api::Callback_IAdmin_changePermissionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePermissions(obj, perms, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changePermissions(const ::omero::model::IObjectPtr& obj, const ::omero::model::PermissionsPtr& perms, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_changePermissionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePermissions(obj, perms, &__ctx, __del, __cookie);
    }

    void end_changePermissions(const ::Ice::AsyncResultPtr&);
    
private:

    void changePermissions(const ::omero::model::IObjectPtr&, const ::omero::model::PermissionsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changePermissions(const ::omero::model::IObjectPtr&, const ::omero::model::PermissionsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool changePermissions_async(const ::omero::api::AMI_IAdmin_changePermissionsPtr&, const ::omero::model::IObjectPtr&, const ::omero::model::PermissionsPtr&);
    bool changePermissions_async(const ::omero::api::AMI_IAdmin_changePermissionsPtr&, const ::omero::model::IObjectPtr&, const ::omero::model::PermissionsPtr&, const ::Ice::Context&);

    void moveToCommonSpace(const ::omero::api::IObjectList& objects)
    {
        moveToCommonSpace(objects, 0);
    }
    void moveToCommonSpace(const ::omero::api::IObjectList& objects, const ::Ice::Context& __ctx)
    {
        moveToCommonSpace(objects, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_moveToCommonSpace(const ::omero::api::IObjectList& objects, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_moveToCommonSpace(objects, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_moveToCommonSpace(const ::omero::api::IObjectList& objects, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_moveToCommonSpace(objects, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_moveToCommonSpace(const ::omero::api::IObjectList& objects, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_moveToCommonSpace(objects, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_moveToCommonSpace(const ::omero::api::IObjectList& objects, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_moveToCommonSpace(objects, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_moveToCommonSpace(const ::omero::api::IObjectList& objects, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_moveToCommonSpace(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_moveToCommonSpace(objects, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_moveToCommonSpace(const ::omero::api::IObjectList& objects)
    {
        return begin_moveToCommonSpace(objects, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_moveToCommonSpace(const ::omero::api::IObjectList& objects, const ::Ice::Context& __ctx)
    {
        return begin_moveToCommonSpace(objects, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_moveToCommonSpace(const ::omero::api::IObjectList& objects, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveToCommonSpace(objects, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_moveToCommonSpace(const ::omero::api::IObjectList& objects, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveToCommonSpace(objects, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_moveToCommonSpace(const ::omero::api::IObjectList& objects, const ::omero::api::Callback_IAdmin_moveToCommonSpacePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveToCommonSpace(objects, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_moveToCommonSpace(const ::omero::api::IObjectList& objects, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_moveToCommonSpacePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveToCommonSpace(objects, &__ctx, __del, __cookie);
    }

    void end_moveToCommonSpace(const ::Ice::AsyncResultPtr&);
    
private:

    void moveToCommonSpace(const ::omero::api::IObjectList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_moveToCommonSpace(const ::omero::api::IObjectList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool moveToCommonSpace_async(const ::omero::api::AMI_IAdmin_moveToCommonSpacePtr&, const ::omero::api::IObjectList&);
    bool moveToCommonSpace_async(const ::omero::api::AMI_IAdmin_moveToCommonSpacePtr&, const ::omero::api::IObjectList&, const ::Ice::Context&);

    void changePassword(const ::omero::RStringPtr& newPassword)
    {
        changePassword(newPassword, 0);
    }
    void changePassword(const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx)
    {
        changePassword(newPassword, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changePassword(const ::omero::RStringPtr& newPassword, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changePassword(newPassword, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changePassword(const ::omero::RStringPtr& newPassword, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changePassword(newPassword, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changePassword(const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changePassword(newPassword, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changePassword(const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changePassword(newPassword, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changePassword(const ::omero::RStringPtr& newPassword, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_changePassword(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_changePassword(newPassword, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changePassword(const ::omero::RStringPtr& newPassword)
    {
        return begin_changePassword(newPassword, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changePassword(const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx)
    {
        return begin_changePassword(newPassword, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changePassword(const ::omero::RStringPtr& newPassword, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePassword(newPassword, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changePassword(const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePassword(newPassword, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changePassword(const ::omero::RStringPtr& newPassword, const ::omero::api::Callback_IAdmin_changePasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePassword(newPassword, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changePassword(const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_changePasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePassword(newPassword, &__ctx, __del, __cookie);
    }

    void end_changePassword(const ::Ice::AsyncResultPtr&);
    
private:

    void changePassword(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changePassword(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool changePassword_async(const ::omero::api::AMI_IAdmin_changePasswordPtr&, const ::omero::RStringPtr&);
    bool changePassword_async(const ::omero::api::AMI_IAdmin_changePasswordPtr&, const ::omero::RStringPtr&, const ::Ice::Context&);

    void changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword)
    {
        changePasswordWithOldPassword(oldPassword, newPassword, 0);
    }
    void changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx)
    {
        changePasswordWithOldPassword(oldPassword, newPassword, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changePasswordWithOldPassword(oldPassword, newPassword, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changePasswordWithOldPassword(oldPassword, newPassword, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changePasswordWithOldPassword(oldPassword, newPassword, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changePasswordWithOldPassword(oldPassword, newPassword, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_changePasswordWithOldPassword(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_changePasswordWithOldPassword(oldPassword, newPassword, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword)
    {
        return begin_changePasswordWithOldPassword(oldPassword, newPassword, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx)
    {
        return begin_changePasswordWithOldPassword(oldPassword, newPassword, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePasswordWithOldPassword(oldPassword, newPassword, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePasswordWithOldPassword(oldPassword, newPassword, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword, const ::omero::api::Callback_IAdmin_changePasswordWithOldPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePasswordWithOldPassword(oldPassword, newPassword, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changePasswordWithOldPassword(const ::omero::RStringPtr& oldPassword, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_changePasswordWithOldPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changePasswordWithOldPassword(oldPassword, newPassword, &__ctx, __del, __cookie);
    }

    void end_changePasswordWithOldPassword(const ::Ice::AsyncResultPtr&);
    
private:

    void changePasswordWithOldPassword(const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changePasswordWithOldPassword(const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool changePasswordWithOldPassword_async(const ::omero::api::AMI_IAdmin_changePasswordWithOldPasswordPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&);
    bool changePasswordWithOldPassword_async(const ::omero::api::AMI_IAdmin_changePasswordWithOldPasswordPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::Ice::Context&);

    void changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword)
    {
        changeUserPassword(omeName, newPassword, 0);
    }
    void changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx)
    {
        changeUserPassword(omeName, newPassword, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeUserPassword(omeName, newPassword, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeUserPassword(omeName, newPassword, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeUserPassword(omeName, newPassword, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeUserPassword(omeName, newPassword, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_changeUserPassword(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_changeUserPassword(omeName, newPassword, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword)
    {
        return begin_changeUserPassword(omeName, newPassword, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx)
    {
        return begin_changeUserPassword(omeName, newPassword, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeUserPassword(omeName, newPassword, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeUserPassword(omeName, newPassword, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword, const ::omero::api::Callback_IAdmin_changeUserPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeUserPassword(omeName, newPassword, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeUserPassword(const ::std::string& omeName, const ::omero::RStringPtr& newPassword, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_changeUserPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeUserPassword(omeName, newPassword, &__ctx, __del, __cookie);
    }

    void end_changeUserPassword(const ::Ice::AsyncResultPtr&);
    
private:

    void changeUserPassword(const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeUserPassword(const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool changeUserPassword_async(const ::omero::api::AMI_IAdmin_changeUserPasswordPtr&, const ::std::string&, const ::omero::RStringPtr&);
    bool changeUserPassword_async(const ::omero::api::AMI_IAdmin_changeUserPasswordPtr&, const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context&);

    void synchronizeLoginCache()
    {
        synchronizeLoginCache(0);
    }
    void synchronizeLoginCache(const ::Ice::Context& __ctx)
    {
        synchronizeLoginCache(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_synchronizeLoginCache(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_synchronizeLoginCache(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_synchronizeLoginCache(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_synchronizeLoginCache(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_synchronizeLoginCache(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_synchronizeLoginCache(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_synchronizeLoginCache(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_synchronizeLoginCache(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_synchronizeLoginCache(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_synchronizeLoginCache(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_synchronizeLoginCache(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_synchronizeLoginCache()
    {
        return begin_synchronizeLoginCache(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_synchronizeLoginCache(const ::Ice::Context& __ctx)
    {
        return begin_synchronizeLoginCache(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_synchronizeLoginCache(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_synchronizeLoginCache(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_synchronizeLoginCache(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_synchronizeLoginCache(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_synchronizeLoginCache(const ::omero::api::Callback_IAdmin_synchronizeLoginCachePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_synchronizeLoginCache(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_synchronizeLoginCache(const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_synchronizeLoginCachePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_synchronizeLoginCache(&__ctx, __del, __cookie);
    }

    void end_synchronizeLoginCache(const ::Ice::AsyncResultPtr&);
    
private:

    void synchronizeLoginCache(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_synchronizeLoginCache(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool synchronizeLoginCache_async(const ::omero::api::AMI_IAdmin_synchronizeLoginCachePtr&);
    bool synchronizeLoginCache_async(const ::omero::api::AMI_IAdmin_synchronizeLoginCachePtr&, const ::Ice::Context&);

    void changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred)
    {
        changeExpiredCredentials(name, oldCred, newCred, 0);
    }
    void changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred, const ::Ice::Context& __ctx)
    {
        changeExpiredCredentials(name, oldCred, newCred, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeExpiredCredentials(name, oldCred, newCred, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeExpiredCredentials(name, oldCred, newCred, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeExpiredCredentials(name, oldCred, newCred, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeExpiredCredentials(name, oldCred, newCred, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_changeExpiredCredentials(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_changeExpiredCredentials(name, oldCred, newCred, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred)
    {
        return begin_changeExpiredCredentials(name, oldCred, newCred, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred, const ::Ice::Context& __ctx)
    {
        return begin_changeExpiredCredentials(name, oldCred, newCred, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeExpiredCredentials(name, oldCred, newCred, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeExpiredCredentials(name, oldCred, newCred, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred, const ::omero::api::Callback_IAdmin_changeExpiredCredentialsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeExpiredCredentials(name, oldCred, newCred, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeExpiredCredentials(const ::std::string& name, const ::std::string& oldCred, const ::std::string& newCred, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_changeExpiredCredentialsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeExpiredCredentials(name, oldCred, newCred, &__ctx, __del, __cookie);
    }

    void end_changeExpiredCredentials(const ::Ice::AsyncResultPtr&);
    
private:

    void changeExpiredCredentials(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeExpiredCredentials(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool changeExpiredCredentials_async(const ::omero::api::AMI_IAdmin_changeExpiredCredentialsPtr&, const ::std::string&, const ::std::string&, const ::std::string&);
    bool changeExpiredCredentials_async(const ::omero::api::AMI_IAdmin_changeExpiredCredentialsPtr&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    void reportForgottenPassword(const ::std::string& name, const ::std::string& email)
    {
        reportForgottenPassword(name, email, 0);
    }
    void reportForgottenPassword(const ::std::string& name, const ::std::string& email, const ::Ice::Context& __ctx)
    {
        reportForgottenPassword(name, email, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reportForgottenPassword(const ::std::string& name, const ::std::string& email, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reportForgottenPassword(name, email, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reportForgottenPassword(const ::std::string& name, const ::std::string& email, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reportForgottenPassword(name, email, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reportForgottenPassword(const ::std::string& name, const ::std::string& email, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reportForgottenPassword(name, email, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reportForgottenPassword(const ::std::string& name, const ::std::string& email, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reportForgottenPassword(name, email, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_reportForgottenPassword(const ::std::string& name, const ::std::string& email, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_reportForgottenPassword(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_reportForgottenPassword(name, email, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_reportForgottenPassword(const ::std::string& name, const ::std::string& email)
    {
        return begin_reportForgottenPassword(name, email, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reportForgottenPassword(const ::std::string& name, const ::std::string& email, const ::Ice::Context& __ctx)
    {
        return begin_reportForgottenPassword(name, email, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reportForgottenPassword(const ::std::string& name, const ::std::string& email, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportForgottenPassword(name, email, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportForgottenPassword(const ::std::string& name, const ::std::string& email, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportForgottenPassword(name, email, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportForgottenPassword(const ::std::string& name, const ::std::string& email, const ::omero::api::Callback_IAdmin_reportForgottenPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportForgottenPassword(name, email, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportForgottenPassword(const ::std::string& name, const ::std::string& email, const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_reportForgottenPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportForgottenPassword(name, email, &__ctx, __del, __cookie);
    }

    void end_reportForgottenPassword(const ::Ice::AsyncResultPtr&);
    
private:

    void reportForgottenPassword(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reportForgottenPassword(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool reportForgottenPassword_async(const ::omero::api::AMI_IAdmin_reportForgottenPasswordPtr&, const ::std::string&, const ::std::string&);
    bool reportForgottenPassword_async(const ::omero::api::AMI_IAdmin_reportForgottenPasswordPtr&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    ::omero::sys::RolesPtr getSecurityRoles()
    {
        return getSecurityRoles(0);
    }
    ::omero::sys::RolesPtr getSecurityRoles(const ::Ice::Context& __ctx)
    {
        return getSecurityRoles(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSecurityRoles(const ::IceInternal::Function<void (const ::omero::sys::RolesPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSecurityRoles(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSecurityRoles(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSecurityRoles(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSecurityRoles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::RolesPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSecurityRoles(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSecurityRoles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSecurityRoles(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSecurityRoles(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::RolesPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::RolesPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::RolesPtr __ret;
                try
                {
                    __ret = __proxy->end_getSecurityRoles(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::RolesPtr&)> _response;
        };
        return begin_getSecurityRoles(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSecurityRoles()
    {
        return begin_getSecurityRoles(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSecurityRoles(const ::Ice::Context& __ctx)
    {
        return begin_getSecurityRoles(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSecurityRoles(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSecurityRoles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSecurityRoles(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSecurityRoles(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSecurityRoles(const ::omero::api::Callback_IAdmin_getSecurityRolesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSecurityRoles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSecurityRoles(const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_getSecurityRolesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSecurityRoles(&__ctx, __del, __cookie);
    }

    ::omero::sys::RolesPtr end_getSecurityRoles(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::RolesPtr getSecurityRoles(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSecurityRoles(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getSecurityRoles_async(const ::omero::api::AMI_IAdmin_getSecurityRolesPtr&);
    bool getSecurityRoles_async(const ::omero::api::AMI_IAdmin_getSecurityRolesPtr&, const ::Ice::Context&);

    ::omero::sys::EventContextPtr getEventContext()
    {
        return getEventContext(0);
    }
    ::omero::sys::EventContextPtr getEventContext(const ::Ice::Context& __ctx)
    {
        return getEventContext(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEventContext(const ::IceInternal::Function<void (const ::omero::sys::EventContextPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEventContext(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEventContext(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEventContext(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEventContext(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::EventContextPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEventContext(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEventContext(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEventContext(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEventContext(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::EventContextPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::EventContextPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::EventContextPtr __ret;
                try
                {
                    __ret = __proxy->end_getEventContext(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::EventContextPtr&)> _response;
        };
        return begin_getEventContext(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEventContext()
    {
        return begin_getEventContext(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEventContext(const ::Ice::Context& __ctx)
    {
        return begin_getEventContext(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEventContext(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEventContext(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEventContext(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEventContext(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEventContext(const ::omero::api::Callback_IAdmin_getEventContextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEventContext(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEventContext(const ::Ice::Context& __ctx, const ::omero::api::Callback_IAdmin_getEventContextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEventContext(&__ctx, __del, __cookie);
    }

    ::omero::sys::EventContextPtr end_getEventContext(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::EventContextPtr getEventContext(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEventContext(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getEventContext_async(const ::omero::api::AMI_IAdmin_getEventContextPtr&);
    bool getEventContext_async(const ::omero::api::AMI_IAdmin_getEventContextPtr&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<IAdmin> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_secure(bool __secure) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_twoway() const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_oneway() const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_batchOneway() const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_datagram() const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_batchDatagram() const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_compress(bool __compress) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_timeout(int __timeout) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IAdmin> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<IAdmin*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class IAdmin : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual bool canUpdate(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimenterPtr getExperimenter(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimenterPtr lookupExperimenter(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::ExperimenterList lookupExperimenters(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimenterGroupPtr getGroup(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimenterGroupPtr lookupGroup(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::ExperimenterGroupList lookupGroups(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::ExperimenterList containedExperimenters(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::ExperimenterGroupList containedGroups(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimenterGroupPtr getDefaultGroup(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string lookupLdapAuthExperimenter(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RListPtr lookupLdapAuthExperimenters(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::LongList getMemberOfGroupIds(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::LongList getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void updateSelf(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long uploadMyUserPhoto(const ::std::string&, const ::std::string&, const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::OriginalFileList getMyUserPhotos(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void updateExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void updateGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long createUser(const ::omero::model::ExperimenterPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long createSystemUser(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long createExperimenter(const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long createExperimenterWithPassword(const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long createGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addGroups(const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeGroups(const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDefaultGroup(const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setGroupOwner(const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addGroupOwners(const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeGroupOwners(const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deleteExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deleteGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void changeOwner(const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void changeGroup(const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void changePermissions(const ::omero::model::IObjectPtr&, const ::omero::model::PermissionsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void moveToCommonSpace(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void changePassword(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void changePasswordWithOldPassword(const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void changeUserPassword(const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void synchronizeLoginCache(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void changeExpiredCredentials(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reportForgottenPassword(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::RolesPtr getSecurityRoles(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::EventContextPtr getEventContext(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class IAdmin : virtual public ::IceDelegate::omero::api::IAdmin,
               virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual bool canUpdate(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr getExperimenter(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr lookupExperimenter(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterList lookupExperimenters(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterGroupPtr getGroup(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterGroupPtr lookupGroup(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterGroupList lookupGroups(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterList containedExperimenters(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterGroupList containedGroups(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterGroupPtr getDefaultGroup(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string lookupLdapAuthExperimenter(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RListPtr lookupLdapAuthExperimenters(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongList getMemberOfGroupIds(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongList getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateSelf(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long uploadMyUserPhoto(const ::std::string&, const ::std::string&, const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::OriginalFileList getMyUserPhotos(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createUser(const ::omero::model::ExperimenterPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createSystemUser(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createExperimenter(const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createExperimenterWithPassword(const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addGroups(const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeGroups(const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDefaultGroup(const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroupOwner(const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addGroupOwners(const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeGroupOwners(const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changeOwner(const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changeGroup(const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changePermissions(const ::omero::model::IObjectPtr&, const ::omero::model::PermissionsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void moveToCommonSpace(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changePassword(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changePasswordWithOldPassword(const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changeUserPassword(const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void synchronizeLoginCache(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changeExpiredCredentials(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reportForgottenPassword(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::RolesPtr getSecurityRoles(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::EventContextPtr getEventContext(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class IAdmin : virtual public ::IceDelegate::omero::api::IAdmin,
               virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual bool canUpdate(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr getExperimenter(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr lookupExperimenter(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterList lookupExperimenters(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterGroupPtr getGroup(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterGroupPtr lookupGroup(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterGroupList lookupGroups(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterList containedExperimenters(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterGroupList containedGroups(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterGroupPtr getDefaultGroup(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string lookupLdapAuthExperimenter(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RListPtr lookupLdapAuthExperimenters(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongList getMemberOfGroupIds(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongList getLeaderOfGroupIds(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateSelf(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long uploadMyUserPhoto(const ::std::string&, const ::std::string&, const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::OriginalFileList getMyUserPhotos(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateExperimenterWithPassword(const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createUser(const ::omero::model::ExperimenterPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createSystemUser(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createExperimenter(const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createExperimenterWithPassword(const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addGroups(const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeGroups(const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDefaultGroup(const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroupOwner(const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unsetGroupOwner(const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addGroupOwners(const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeGroupOwners(const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changeOwner(const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changeGroup(const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changePermissions(const ::omero::model::IObjectPtr&, const ::omero::model::PermissionsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void moveToCommonSpace(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changePassword(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changePasswordWithOldPassword(const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changeUserPassword(const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void synchronizeLoginCache(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void changeExpiredCredentials(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reportForgottenPassword(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::RolesPtr getSecurityRoles(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::EventContextPtr getEventContext(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class IAdmin : virtual public ::omero::api::ServiceInterface
{
public:

    typedef IAdminPrx ProxyType;
    typedef IAdminPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void canUpdate_async(const ::omero::api::AMD_IAdmin_canUpdatePtr&, const ::omero::model::IObjectPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___canUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getExperimenter_async(const ::omero::api::AMD_IAdmin_getExperimenterPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExperimenter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void lookupExperimenter_async(const ::omero::api::AMD_IAdmin_lookupExperimenterPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___lookupExperimenter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void lookupExperimenters_async(const ::omero::api::AMD_IAdmin_lookupExperimentersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___lookupExperimenters(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getGroup_async(const ::omero::api::AMD_IAdmin_getGroupPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void lookupGroup_async(const ::omero::api::AMD_IAdmin_lookupGroupPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___lookupGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void lookupGroups_async(const ::omero::api::AMD_IAdmin_lookupGroupsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___lookupGroups(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void containedExperimenters_async(const ::omero::api::AMD_IAdmin_containedExperimentersPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___containedExperimenters(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void containedGroups_async(const ::omero::api::AMD_IAdmin_containedGroupsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___containedGroups(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDefaultGroup_async(const ::omero::api::AMD_IAdmin_getDefaultGroupPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDefaultGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void lookupLdapAuthExperimenter_async(const ::omero::api::AMD_IAdmin_lookupLdapAuthExperimenterPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___lookupLdapAuthExperimenter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void lookupLdapAuthExperimenters_async(const ::omero::api::AMD_IAdmin_lookupLdapAuthExperimentersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___lookupLdapAuthExperimenters(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getMemberOfGroupIds_async(const ::omero::api::AMD_IAdmin_getMemberOfGroupIdsPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMemberOfGroupIds(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getLeaderOfGroupIds_async(const ::omero::api::AMD_IAdmin_getLeaderOfGroupIdsPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLeaderOfGroupIds(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateSelf_async(const ::omero::api::AMD_IAdmin_updateSelfPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateSelf(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void uploadMyUserPhoto_async(const ::omero::api::AMD_IAdmin_uploadMyUserPhotoPtr&, const ::std::string&, const ::std::string&, const ::Ice::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___uploadMyUserPhoto(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getMyUserPhotos_async(const ::omero::api::AMD_IAdmin_getMyUserPhotosPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMyUserPhotos(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateExperimenter_async(const ::omero::api::AMD_IAdmin_updateExperimenterPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateExperimenter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateExperimenterWithPassword_async(const ::omero::api::AMD_IAdmin_updateExperimenterWithPasswordPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateExperimenterWithPassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateGroup_async(const ::omero::api::AMD_IAdmin_updateGroupPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createUser_async(const ::omero::api::AMD_IAdmin_createUserPtr&, const ::omero::model::ExperimenterPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createSystemUser_async(const ::omero::api::AMD_IAdmin_createSystemUserPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createSystemUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createExperimenter_async(const ::omero::api::AMD_IAdmin_createExperimenterPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createExperimenter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createExperimenterWithPassword_async(const ::omero::api::AMD_IAdmin_createExperimenterWithPasswordPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::RStringPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createExperimenterWithPassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createGroup_async(const ::omero::api::AMD_IAdmin_createGroupPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addGroups_async(const ::omero::api::AMD_IAdmin_addGroupsPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addGroups(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeGroups_async(const ::omero::api::AMD_IAdmin_removeGroupsPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::api::ExperimenterGroupList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeGroups(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDefaultGroup_async(const ::omero::api::AMD_IAdmin_setDefaultGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDefaultGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setGroupOwner_async(const ::omero::api::AMD_IAdmin_setGroupOwnerPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setGroupOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unsetGroupOwner_async(const ::omero::api::AMD_IAdmin_unsetGroupOwnerPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unsetGroupOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addGroupOwners_async(const ::omero::api::AMD_IAdmin_addGroupOwnersPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addGroupOwners(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeGroupOwners_async(const ::omero::api::AMD_IAdmin_removeGroupOwnersPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::omero::api::ExperimenterList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeGroupOwners(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void deleteExperimenter_async(const ::omero::api::AMD_IAdmin_deleteExperimenterPtr&, const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteExperimenter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void deleteGroup_async(const ::omero::api::AMD_IAdmin_deleteGroupPtr&, const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void changeOwner_async(const ::omero::api::AMD_IAdmin_changeOwnerPtr&, const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void changeGroup_async(const ::omero::api::AMD_IAdmin_changeGroupPtr&, const ::omero::model::IObjectPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void changePermissions_async(const ::omero::api::AMD_IAdmin_changePermissionsPtr&, const ::omero::model::IObjectPtr&, const ::omero::model::PermissionsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changePermissions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void moveToCommonSpace_async(const ::omero::api::AMD_IAdmin_moveToCommonSpacePtr&, const ::omero::api::IObjectList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___moveToCommonSpace(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void changePassword_async(const ::omero::api::AMD_IAdmin_changePasswordPtr&, const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changePassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void changePasswordWithOldPassword_async(const ::omero::api::AMD_IAdmin_changePasswordWithOldPasswordPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changePasswordWithOldPassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void changeUserPassword_async(const ::omero::api::AMD_IAdmin_changeUserPasswordPtr&, const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeUserPassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void synchronizeLoginCache_async(const ::omero::api::AMD_IAdmin_synchronizeLoginCachePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___synchronizeLoginCache(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void changeExpiredCredentials_async(const ::omero::api::AMD_IAdmin_changeExpiredCredentialsPtr&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeExpiredCredentials(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reportForgottenPassword_async(const ::omero::api::AMD_IAdmin_reportForgottenPasswordPtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reportForgottenPassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getSecurityRoles_async(const ::omero::api::AMD_IAdmin_getSecurityRolesPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSecurityRoles(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getEventContext_async(const ::omero::api::AMD_IAdmin_getEventContextPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEventContext(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const IAdmin& l, const IAdmin& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IAdmin& l, const IAdmin& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_IAdmin_canUpdate : public Callback_IAdmin_canUpdate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_IAdmin_canUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canUpdate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_canUpdatePtr
newCallback_IAdmin_canUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_canUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_canUpdatePtr
newCallback_IAdmin_canUpdate(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_canUpdate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_canUpdate : public Callback_IAdmin_canUpdate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_IAdmin_canUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canUpdate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_canUpdatePtr
newCallback_IAdmin_canUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_canUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_canUpdatePtr
newCallback_IAdmin_canUpdate(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_canUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_getExperimenter : public Callback_IAdmin_getExperimenter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&);

    CallbackNC_IAdmin_getExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_getExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_getExperimenterPtr
newCallback_IAdmin_getExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_getExperimenterPtr
newCallback_IAdmin_getExperimenter(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_getExperimenter : public Callback_IAdmin_getExperimenter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&, const CT&);

    Callback_IAdmin_getExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_getExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_getExperimenterPtr
newCallback_IAdmin_getExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_getExperimenterPtr
newCallback_IAdmin_getExperimenter(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_lookupExperimenter : public Callback_IAdmin_lookupExperimenter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&);

    CallbackNC_IAdmin_lookupExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_lookupExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_lookupExperimenterPtr
newCallback_IAdmin_lookupExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_lookupExperimenterPtr
newCallback_IAdmin_lookupExperimenter(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_lookupExperimenter : public Callback_IAdmin_lookupExperimenter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&, const CT&);

    Callback_IAdmin_lookupExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_lookupExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_lookupExperimenterPtr
newCallback_IAdmin_lookupExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_lookupExperimenterPtr
newCallback_IAdmin_lookupExperimenter(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_lookupExperimenters : public Callback_IAdmin_lookupExperimenters_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&);

    CallbackNC_IAdmin_lookupExperimenters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_lookupExperimenters(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_lookupExperimentersPtr
newCallback_IAdmin_lookupExperimenters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupExperimenters<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_lookupExperimentersPtr
newCallback_IAdmin_lookupExperimenters(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupExperimenters<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_lookupExperimenters : public Callback_IAdmin_lookupExperimenters_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&, const CT&);

    Callback_IAdmin_lookupExperimenters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_lookupExperimenters(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_lookupExperimentersPtr
newCallback_IAdmin_lookupExperimenters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupExperimenters<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_lookupExperimentersPtr
newCallback_IAdmin_lookupExperimenters(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupExperimenters<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_getGroup : public Callback_IAdmin_getGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&);

    CallbackNC_IAdmin_getGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_getGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_getGroupPtr
newCallback_IAdmin_getGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_getGroupPtr
newCallback_IAdmin_getGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getGroup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_getGroup : public Callback_IAdmin_getGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&, const CT&);

    Callback_IAdmin_getGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_getGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_getGroupPtr
newCallback_IAdmin_getGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_getGroupPtr
newCallback_IAdmin_getGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_lookupGroup : public Callback_IAdmin_lookupGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&);

    CallbackNC_IAdmin_lookupGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_lookupGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_lookupGroupPtr
newCallback_IAdmin_lookupGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_lookupGroupPtr
newCallback_IAdmin_lookupGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupGroup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_lookupGroup : public Callback_IAdmin_lookupGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&, const CT&);

    Callback_IAdmin_lookupGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_lookupGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_lookupGroupPtr
newCallback_IAdmin_lookupGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_lookupGroupPtr
newCallback_IAdmin_lookupGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_lookupGroups : public Callback_IAdmin_lookupGroups_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::ExperimenterGroupList&);

    CallbackNC_IAdmin_lookupGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterGroupList __ret;
        try
        {
            __ret = __proxy->end_lookupGroups(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_lookupGroupsPtr
newCallback_IAdmin_lookupGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterGroupList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupGroups<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_lookupGroupsPtr
newCallback_IAdmin_lookupGroups(T* instance, void (T::*cb)(const ::omero::api::ExperimenterGroupList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupGroups<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_lookupGroups : public Callback_IAdmin_lookupGroups_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::ExperimenterGroupList&, const CT&);

    Callback_IAdmin_lookupGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterGroupList __ret;
        try
        {
            __ret = __proxy->end_lookupGroups(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_lookupGroupsPtr
newCallback_IAdmin_lookupGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterGroupList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_lookupGroupsPtr
newCallback_IAdmin_lookupGroups(T* instance, void (T::*cb)(const ::omero::api::ExperimenterGroupList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_containedExperimenters : public Callback_IAdmin_containedExperimenters_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&);

    CallbackNC_IAdmin_containedExperimenters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_containedExperimenters(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_containedExperimentersPtr
newCallback_IAdmin_containedExperimenters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_containedExperimenters<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_containedExperimentersPtr
newCallback_IAdmin_containedExperimenters(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_containedExperimenters<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_containedExperimenters : public Callback_IAdmin_containedExperimenters_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&, const CT&);

    Callback_IAdmin_containedExperimenters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_containedExperimenters(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_containedExperimentersPtr
newCallback_IAdmin_containedExperimenters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_containedExperimenters<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_containedExperimentersPtr
newCallback_IAdmin_containedExperimenters(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_containedExperimenters<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_containedGroups : public Callback_IAdmin_containedGroups_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::ExperimenterGroupList&);

    CallbackNC_IAdmin_containedGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterGroupList __ret;
        try
        {
            __ret = __proxy->end_containedGroups(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_containedGroupsPtr
newCallback_IAdmin_containedGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterGroupList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_containedGroups<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_containedGroupsPtr
newCallback_IAdmin_containedGroups(T* instance, void (T::*cb)(const ::omero::api::ExperimenterGroupList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_containedGroups<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_containedGroups : public Callback_IAdmin_containedGroups_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::ExperimenterGroupList&, const CT&);

    Callback_IAdmin_containedGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterGroupList __ret;
        try
        {
            __ret = __proxy->end_containedGroups(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_containedGroupsPtr
newCallback_IAdmin_containedGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterGroupList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_containedGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_containedGroupsPtr
newCallback_IAdmin_containedGroups(T* instance, void (T::*cb)(const ::omero::api::ExperimenterGroupList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_containedGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_getDefaultGroup : public Callback_IAdmin_getDefaultGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&);

    CallbackNC_IAdmin_getDefaultGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_getDefaultGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_getDefaultGroupPtr
newCallback_IAdmin_getDefaultGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getDefaultGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_getDefaultGroupPtr
newCallback_IAdmin_getDefaultGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getDefaultGroup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_getDefaultGroup : public Callback_IAdmin_getDefaultGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&, const CT&);

    Callback_IAdmin_getDefaultGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_getDefaultGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_getDefaultGroupPtr
newCallback_IAdmin_getDefaultGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getDefaultGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_getDefaultGroupPtr
newCallback_IAdmin_getDefaultGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getDefaultGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_lookupLdapAuthExperimenter : public Callback_IAdmin_lookupLdapAuthExperimenter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_IAdmin_lookupLdapAuthExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_lookupLdapAuthExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_lookupLdapAuthExperimenterPtr
newCallback_IAdmin_lookupLdapAuthExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupLdapAuthExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_lookupLdapAuthExperimenterPtr
newCallback_IAdmin_lookupLdapAuthExperimenter(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupLdapAuthExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_lookupLdapAuthExperimenter : public Callback_IAdmin_lookupLdapAuthExperimenter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_IAdmin_lookupLdapAuthExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_lookupLdapAuthExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_lookupLdapAuthExperimenterPtr
newCallback_IAdmin_lookupLdapAuthExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupLdapAuthExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_lookupLdapAuthExperimenterPtr
newCallback_IAdmin_lookupLdapAuthExperimenter(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupLdapAuthExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_lookupLdapAuthExperimenters : public Callback_IAdmin_lookupLdapAuthExperimenters_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RListPtr&);

    CallbackNC_IAdmin_lookupLdapAuthExperimenters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::RListPtr __ret;
        try
        {
            __ret = __proxy->end_lookupLdapAuthExperimenters(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_lookupLdapAuthExperimentersPtr
newCallback_IAdmin_lookupLdapAuthExperimenters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RListPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupLdapAuthExperimenters<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_lookupLdapAuthExperimentersPtr
newCallback_IAdmin_lookupLdapAuthExperimenters(T* instance, void (T::*cb)(const ::omero::RListPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_lookupLdapAuthExperimenters<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_lookupLdapAuthExperimenters : public Callback_IAdmin_lookupLdapAuthExperimenters_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RListPtr&, const CT&);

    Callback_IAdmin_lookupLdapAuthExperimenters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::RListPtr __ret;
        try
        {
            __ret = __proxy->end_lookupLdapAuthExperimenters(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_lookupLdapAuthExperimentersPtr
newCallback_IAdmin_lookupLdapAuthExperimenters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RListPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupLdapAuthExperimenters<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_lookupLdapAuthExperimentersPtr
newCallback_IAdmin_lookupLdapAuthExperimenters(T* instance, void (T::*cb)(const ::omero::RListPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_lookupLdapAuthExperimenters<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_getMemberOfGroupIds : public Callback_IAdmin_getMemberOfGroupIds_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::LongList&);

    CallbackNC_IAdmin_getMemberOfGroupIds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongList __ret;
        try
        {
            __ret = __proxy->end_getMemberOfGroupIds(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_getMemberOfGroupIdsPtr
newCallback_IAdmin_getMemberOfGroupIds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getMemberOfGroupIds<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_getMemberOfGroupIdsPtr
newCallback_IAdmin_getMemberOfGroupIds(T* instance, void (T::*cb)(const ::omero::api::LongList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getMemberOfGroupIds<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_getMemberOfGroupIds : public Callback_IAdmin_getMemberOfGroupIds_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::LongList&, const CT&);

    Callback_IAdmin_getMemberOfGroupIds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongList __ret;
        try
        {
            __ret = __proxy->end_getMemberOfGroupIds(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_getMemberOfGroupIdsPtr
newCallback_IAdmin_getMemberOfGroupIds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getMemberOfGroupIds<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_getMemberOfGroupIdsPtr
newCallback_IAdmin_getMemberOfGroupIds(T* instance, void (T::*cb)(const ::omero::api::LongList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getMemberOfGroupIds<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_getLeaderOfGroupIds : public Callback_IAdmin_getLeaderOfGroupIds_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::LongList&);

    CallbackNC_IAdmin_getLeaderOfGroupIds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongList __ret;
        try
        {
            __ret = __proxy->end_getLeaderOfGroupIds(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_getLeaderOfGroupIdsPtr
newCallback_IAdmin_getLeaderOfGroupIds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getLeaderOfGroupIds<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_getLeaderOfGroupIdsPtr
newCallback_IAdmin_getLeaderOfGroupIds(T* instance, void (T::*cb)(const ::omero::api::LongList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getLeaderOfGroupIds<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_getLeaderOfGroupIds : public Callback_IAdmin_getLeaderOfGroupIds_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::LongList&, const CT&);

    Callback_IAdmin_getLeaderOfGroupIds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongList __ret;
        try
        {
            __ret = __proxy->end_getLeaderOfGroupIds(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_getLeaderOfGroupIdsPtr
newCallback_IAdmin_getLeaderOfGroupIds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getLeaderOfGroupIds<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_getLeaderOfGroupIdsPtr
newCallback_IAdmin_getLeaderOfGroupIds(T* instance, void (T::*cb)(const ::omero::api::LongList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getLeaderOfGroupIds<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_updateSelf : public Callback_IAdmin_updateSelf_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_updateSelf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateSelf(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_updateSelfPtr
newCallback_IAdmin_updateSelf(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateSelf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_updateSelfPtr
newCallback_IAdmin_updateSelf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateSelf<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_updateSelfPtr
newCallback_IAdmin_updateSelf(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateSelf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_updateSelfPtr
newCallback_IAdmin_updateSelf(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateSelf<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_updateSelf : public Callback_IAdmin_updateSelf_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_updateSelf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateSelf(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_updateSelfPtr
newCallback_IAdmin_updateSelf(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateSelf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateSelfPtr
newCallback_IAdmin_updateSelf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateSelf<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateSelfPtr
newCallback_IAdmin_updateSelf(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateSelf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateSelfPtr
newCallback_IAdmin_updateSelf(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateSelf<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_uploadMyUserPhoto : public Callback_IAdmin_uploadMyUserPhoto_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_IAdmin_uploadMyUserPhoto(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_uploadMyUserPhoto(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_uploadMyUserPhotoPtr
newCallback_IAdmin_uploadMyUserPhoto(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_uploadMyUserPhoto<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_uploadMyUserPhotoPtr
newCallback_IAdmin_uploadMyUserPhoto(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_uploadMyUserPhoto<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_uploadMyUserPhoto : public Callback_IAdmin_uploadMyUserPhoto_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_IAdmin_uploadMyUserPhoto(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_uploadMyUserPhoto(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_uploadMyUserPhotoPtr
newCallback_IAdmin_uploadMyUserPhoto(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_uploadMyUserPhoto<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_uploadMyUserPhotoPtr
newCallback_IAdmin_uploadMyUserPhoto(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_uploadMyUserPhoto<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_getMyUserPhotos : public Callback_IAdmin_getMyUserPhotos_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::OriginalFileList&);

    CallbackNC_IAdmin_getMyUserPhotos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::OriginalFileList __ret;
        try
        {
            __ret = __proxy->end_getMyUserPhotos(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_getMyUserPhotosPtr
newCallback_IAdmin_getMyUserPhotos(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::OriginalFileList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getMyUserPhotos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_getMyUserPhotosPtr
newCallback_IAdmin_getMyUserPhotos(T* instance, void (T::*cb)(const ::omero::api::OriginalFileList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getMyUserPhotos<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_getMyUserPhotos : public Callback_IAdmin_getMyUserPhotos_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::OriginalFileList&, const CT&);

    Callback_IAdmin_getMyUserPhotos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::api::OriginalFileList __ret;
        try
        {
            __ret = __proxy->end_getMyUserPhotos(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_getMyUserPhotosPtr
newCallback_IAdmin_getMyUserPhotos(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::OriginalFileList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getMyUserPhotos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_getMyUserPhotosPtr
newCallback_IAdmin_getMyUserPhotos(T* instance, void (T::*cb)(const ::omero::api::OriginalFileList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getMyUserPhotos<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_updateExperimenter : public Callback_IAdmin_updateExperimenter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_updateExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_updateExperimenterPtr
newCallback_IAdmin_updateExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_updateExperimenterPtr
newCallback_IAdmin_updateExperimenter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateExperimenter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_updateExperimenterPtr
newCallback_IAdmin_updateExperimenter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_updateExperimenterPtr
newCallback_IAdmin_updateExperimenter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateExperimenter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_updateExperimenter : public Callback_IAdmin_updateExperimenter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_updateExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_updateExperimenterPtr
newCallback_IAdmin_updateExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateExperimenterPtr
newCallback_IAdmin_updateExperimenter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateExperimenter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateExperimenterPtr
newCallback_IAdmin_updateExperimenter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateExperimenterPtr
newCallback_IAdmin_updateExperimenter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateExperimenter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_updateExperimenterWithPassword : public Callback_IAdmin_updateExperimenterWithPassword_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_updateExperimenterWithPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateExperimenterWithPassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_updateExperimenterWithPasswordPtr
newCallback_IAdmin_updateExperimenterWithPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateExperimenterWithPassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_updateExperimenterWithPasswordPtr
newCallback_IAdmin_updateExperimenterWithPassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateExperimenterWithPassword<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_updateExperimenterWithPasswordPtr
newCallback_IAdmin_updateExperimenterWithPassword(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateExperimenterWithPassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_updateExperimenterWithPasswordPtr
newCallback_IAdmin_updateExperimenterWithPassword(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateExperimenterWithPassword<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_updateExperimenterWithPassword : public Callback_IAdmin_updateExperimenterWithPassword_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_updateExperimenterWithPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateExperimenterWithPassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_updateExperimenterWithPasswordPtr
newCallback_IAdmin_updateExperimenterWithPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateExperimenterWithPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateExperimenterWithPasswordPtr
newCallback_IAdmin_updateExperimenterWithPassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateExperimenterWithPassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateExperimenterWithPasswordPtr
newCallback_IAdmin_updateExperimenterWithPassword(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateExperimenterWithPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateExperimenterWithPasswordPtr
newCallback_IAdmin_updateExperimenterWithPassword(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateExperimenterWithPassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_updateGroup : public Callback_IAdmin_updateGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_updateGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_updateGroupPtr
newCallback_IAdmin_updateGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_updateGroupPtr
newCallback_IAdmin_updateGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateGroup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_updateGroupPtr
newCallback_IAdmin_updateGroup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_updateGroupPtr
newCallback_IAdmin_updateGroup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_updateGroup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_updateGroup : public Callback_IAdmin_updateGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_updateGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_updateGroupPtr
newCallback_IAdmin_updateGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateGroupPtr
newCallback_IAdmin_updateGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateGroupPtr
newCallback_IAdmin_updateGroup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_updateGroupPtr
newCallback_IAdmin_updateGroup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_updateGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_createUser : public Callback_IAdmin_createUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_IAdmin_createUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_createUserPtr
newCallback_IAdmin_createUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_createUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_createUserPtr
newCallback_IAdmin_createUser(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_createUser<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_createUser : public Callback_IAdmin_createUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_IAdmin_createUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_createUserPtr
newCallback_IAdmin_createUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_createUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_createUserPtr
newCallback_IAdmin_createUser(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_createUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_createSystemUser : public Callback_IAdmin_createSystemUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_IAdmin_createSystemUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createSystemUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_createSystemUserPtr
newCallback_IAdmin_createSystemUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_createSystemUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_createSystemUserPtr
newCallback_IAdmin_createSystemUser(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_createSystemUser<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_createSystemUser : public Callback_IAdmin_createSystemUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_IAdmin_createSystemUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createSystemUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_createSystemUserPtr
newCallback_IAdmin_createSystemUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_createSystemUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_createSystemUserPtr
newCallback_IAdmin_createSystemUser(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_createSystemUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_createExperimenter : public Callback_IAdmin_createExperimenter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_IAdmin_createExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_createExperimenterPtr
newCallback_IAdmin_createExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_createExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_createExperimenterPtr
newCallback_IAdmin_createExperimenter(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_createExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_createExperimenter : public Callback_IAdmin_createExperimenter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_IAdmin_createExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_createExperimenterPtr
newCallback_IAdmin_createExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_createExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_createExperimenterPtr
newCallback_IAdmin_createExperimenter(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_createExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_createExperimenterWithPassword : public Callback_IAdmin_createExperimenterWithPassword_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_IAdmin_createExperimenterWithPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createExperimenterWithPassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_createExperimenterWithPasswordPtr
newCallback_IAdmin_createExperimenterWithPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_createExperimenterWithPassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_createExperimenterWithPasswordPtr
newCallback_IAdmin_createExperimenterWithPassword(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_createExperimenterWithPassword<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_createExperimenterWithPassword : public Callback_IAdmin_createExperimenterWithPassword_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_IAdmin_createExperimenterWithPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createExperimenterWithPassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_createExperimenterWithPasswordPtr
newCallback_IAdmin_createExperimenterWithPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_createExperimenterWithPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_createExperimenterWithPasswordPtr
newCallback_IAdmin_createExperimenterWithPassword(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_createExperimenterWithPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_createGroup : public Callback_IAdmin_createGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_IAdmin_createGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_createGroupPtr
newCallback_IAdmin_createGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_createGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_createGroupPtr
newCallback_IAdmin_createGroup(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_createGroup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_createGroup : public Callback_IAdmin_createGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_IAdmin_createGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_createGroupPtr
newCallback_IAdmin_createGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_createGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_createGroupPtr
newCallback_IAdmin_createGroup(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_createGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_addGroups : public Callback_IAdmin_addGroups_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_addGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addGroups(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_addGroupsPtr
newCallback_IAdmin_addGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_addGroups<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_addGroupsPtr
newCallback_IAdmin_addGroups(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_addGroups<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_addGroupsPtr
newCallback_IAdmin_addGroups(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_addGroups<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_addGroupsPtr
newCallback_IAdmin_addGroups(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_addGroups<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_addGroups : public Callback_IAdmin_addGroups_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_addGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addGroups(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_addGroupsPtr
newCallback_IAdmin_addGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_addGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_addGroupsPtr
newCallback_IAdmin_addGroups(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_addGroups<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_addGroupsPtr
newCallback_IAdmin_addGroups(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_addGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_addGroupsPtr
newCallback_IAdmin_addGroups(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_addGroups<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_removeGroups : public Callback_IAdmin_removeGroups_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_removeGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeGroups(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_removeGroupsPtr
newCallback_IAdmin_removeGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_removeGroups<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_removeGroupsPtr
newCallback_IAdmin_removeGroups(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_removeGroups<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_removeGroupsPtr
newCallback_IAdmin_removeGroups(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_removeGroups<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_removeGroupsPtr
newCallback_IAdmin_removeGroups(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_removeGroups<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_removeGroups : public Callback_IAdmin_removeGroups_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_removeGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeGroups(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_removeGroupsPtr
newCallback_IAdmin_removeGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_removeGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_removeGroupsPtr
newCallback_IAdmin_removeGroups(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_removeGroups<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_removeGroupsPtr
newCallback_IAdmin_removeGroups(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_removeGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_removeGroupsPtr
newCallback_IAdmin_removeGroups(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_removeGroups<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_setDefaultGroup : public Callback_IAdmin_setDefaultGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_setDefaultGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setDefaultGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_setDefaultGroupPtr
newCallback_IAdmin_setDefaultGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_setDefaultGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_setDefaultGroupPtr
newCallback_IAdmin_setDefaultGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_setDefaultGroup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_setDefaultGroupPtr
newCallback_IAdmin_setDefaultGroup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_setDefaultGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_setDefaultGroupPtr
newCallback_IAdmin_setDefaultGroup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_setDefaultGroup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_setDefaultGroup : public Callback_IAdmin_setDefaultGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_setDefaultGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setDefaultGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_setDefaultGroupPtr
newCallback_IAdmin_setDefaultGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_setDefaultGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_setDefaultGroupPtr
newCallback_IAdmin_setDefaultGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_setDefaultGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_setDefaultGroupPtr
newCallback_IAdmin_setDefaultGroup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_setDefaultGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_setDefaultGroupPtr
newCallback_IAdmin_setDefaultGroup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_setDefaultGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_setGroupOwner : public Callback_IAdmin_setGroupOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_setGroupOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setGroupOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_setGroupOwnerPtr
newCallback_IAdmin_setGroupOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_setGroupOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_setGroupOwnerPtr
newCallback_IAdmin_setGroupOwner(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_setGroupOwner<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_setGroupOwnerPtr
newCallback_IAdmin_setGroupOwner(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_setGroupOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_setGroupOwnerPtr
newCallback_IAdmin_setGroupOwner(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_setGroupOwner<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_setGroupOwner : public Callback_IAdmin_setGroupOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_setGroupOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setGroupOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_setGroupOwnerPtr
newCallback_IAdmin_setGroupOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_setGroupOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_setGroupOwnerPtr
newCallback_IAdmin_setGroupOwner(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_setGroupOwner<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_setGroupOwnerPtr
newCallback_IAdmin_setGroupOwner(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_setGroupOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_setGroupOwnerPtr
newCallback_IAdmin_setGroupOwner(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_setGroupOwner<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_unsetGroupOwner : public Callback_IAdmin_unsetGroupOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_unsetGroupOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unsetGroupOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_unsetGroupOwnerPtr
newCallback_IAdmin_unsetGroupOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_unsetGroupOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_unsetGroupOwnerPtr
newCallback_IAdmin_unsetGroupOwner(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_unsetGroupOwner<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_unsetGroupOwnerPtr
newCallback_IAdmin_unsetGroupOwner(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_unsetGroupOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_unsetGroupOwnerPtr
newCallback_IAdmin_unsetGroupOwner(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_unsetGroupOwner<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_unsetGroupOwner : public Callback_IAdmin_unsetGroupOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_unsetGroupOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unsetGroupOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_unsetGroupOwnerPtr
newCallback_IAdmin_unsetGroupOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_unsetGroupOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_unsetGroupOwnerPtr
newCallback_IAdmin_unsetGroupOwner(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_unsetGroupOwner<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_unsetGroupOwnerPtr
newCallback_IAdmin_unsetGroupOwner(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_unsetGroupOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_unsetGroupOwnerPtr
newCallback_IAdmin_unsetGroupOwner(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_unsetGroupOwner<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_addGroupOwners : public Callback_IAdmin_addGroupOwners_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_addGroupOwners(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addGroupOwners(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_addGroupOwnersPtr
newCallback_IAdmin_addGroupOwners(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_addGroupOwners<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_addGroupOwnersPtr
newCallback_IAdmin_addGroupOwners(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_addGroupOwners<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_addGroupOwnersPtr
newCallback_IAdmin_addGroupOwners(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_addGroupOwners<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_addGroupOwnersPtr
newCallback_IAdmin_addGroupOwners(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_addGroupOwners<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_addGroupOwners : public Callback_IAdmin_addGroupOwners_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_addGroupOwners(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addGroupOwners(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_addGroupOwnersPtr
newCallback_IAdmin_addGroupOwners(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_addGroupOwners<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_addGroupOwnersPtr
newCallback_IAdmin_addGroupOwners(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_addGroupOwners<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_addGroupOwnersPtr
newCallback_IAdmin_addGroupOwners(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_addGroupOwners<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_addGroupOwnersPtr
newCallback_IAdmin_addGroupOwners(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_addGroupOwners<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_removeGroupOwners : public Callback_IAdmin_removeGroupOwners_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_removeGroupOwners(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeGroupOwners(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_removeGroupOwnersPtr
newCallback_IAdmin_removeGroupOwners(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_removeGroupOwners<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_removeGroupOwnersPtr
newCallback_IAdmin_removeGroupOwners(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_removeGroupOwners<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_removeGroupOwnersPtr
newCallback_IAdmin_removeGroupOwners(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_removeGroupOwners<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_removeGroupOwnersPtr
newCallback_IAdmin_removeGroupOwners(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_removeGroupOwners<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_removeGroupOwners : public Callback_IAdmin_removeGroupOwners_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_removeGroupOwners(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeGroupOwners(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_removeGroupOwnersPtr
newCallback_IAdmin_removeGroupOwners(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_removeGroupOwners<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_removeGroupOwnersPtr
newCallback_IAdmin_removeGroupOwners(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_removeGroupOwners<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_removeGroupOwnersPtr
newCallback_IAdmin_removeGroupOwners(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_removeGroupOwners<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_removeGroupOwnersPtr
newCallback_IAdmin_removeGroupOwners(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_removeGroupOwners<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_deleteExperimenter : public Callback_IAdmin_deleteExperimenter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_deleteExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_deleteExperimenterPtr
newCallback_IAdmin_deleteExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_deleteExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_deleteExperimenterPtr
newCallback_IAdmin_deleteExperimenter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_deleteExperimenter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_deleteExperimenterPtr
newCallback_IAdmin_deleteExperimenter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_deleteExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_deleteExperimenterPtr
newCallback_IAdmin_deleteExperimenter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_deleteExperimenter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_deleteExperimenter : public Callback_IAdmin_deleteExperimenter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_deleteExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_deleteExperimenterPtr
newCallback_IAdmin_deleteExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_deleteExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_deleteExperimenterPtr
newCallback_IAdmin_deleteExperimenter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_deleteExperimenter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_deleteExperimenterPtr
newCallback_IAdmin_deleteExperimenter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_deleteExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_deleteExperimenterPtr
newCallback_IAdmin_deleteExperimenter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_deleteExperimenter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_deleteGroup : public Callback_IAdmin_deleteGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_deleteGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_deleteGroupPtr
newCallback_IAdmin_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_deleteGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_deleteGroupPtr
newCallback_IAdmin_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_deleteGroup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_deleteGroupPtr
newCallback_IAdmin_deleteGroup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_deleteGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_deleteGroupPtr
newCallback_IAdmin_deleteGroup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_deleteGroup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_deleteGroup : public Callback_IAdmin_deleteGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_deleteGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_deleteGroupPtr
newCallback_IAdmin_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_deleteGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_deleteGroupPtr
newCallback_IAdmin_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_deleteGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_deleteGroupPtr
newCallback_IAdmin_deleteGroup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_deleteGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_deleteGroupPtr
newCallback_IAdmin_deleteGroup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_deleteGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_changeOwner : public Callback_IAdmin_changeOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_changeOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changeOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_changeOwnerPtr
newCallback_IAdmin_changeOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changeOwnerPtr
newCallback_IAdmin_changeOwner(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeOwner<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_changeOwnerPtr
newCallback_IAdmin_changeOwner(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changeOwnerPtr
newCallback_IAdmin_changeOwner(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeOwner<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_changeOwner : public Callback_IAdmin_changeOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_changeOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changeOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_changeOwnerPtr
newCallback_IAdmin_changeOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeOwnerPtr
newCallback_IAdmin_changeOwner(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeOwner<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeOwnerPtr
newCallback_IAdmin_changeOwner(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeOwnerPtr
newCallback_IAdmin_changeOwner(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeOwner<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_changeGroup : public Callback_IAdmin_changeGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_changeGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changeGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_changeGroupPtr
newCallback_IAdmin_changeGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changeGroupPtr
newCallback_IAdmin_changeGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeGroup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_changeGroupPtr
newCallback_IAdmin_changeGroup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changeGroupPtr
newCallback_IAdmin_changeGroup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeGroup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_changeGroup : public Callback_IAdmin_changeGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_changeGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changeGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_changeGroupPtr
newCallback_IAdmin_changeGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeGroupPtr
newCallback_IAdmin_changeGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeGroupPtr
newCallback_IAdmin_changeGroup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeGroupPtr
newCallback_IAdmin_changeGroup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_changePermissions : public Callback_IAdmin_changePermissions_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_changePermissions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changePermissions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_changePermissionsPtr
newCallback_IAdmin_changePermissions(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePermissions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changePermissionsPtr
newCallback_IAdmin_changePermissions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePermissions<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_changePermissionsPtr
newCallback_IAdmin_changePermissions(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePermissions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changePermissionsPtr
newCallback_IAdmin_changePermissions(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePermissions<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_changePermissions : public Callback_IAdmin_changePermissions_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_changePermissions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changePermissions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_changePermissionsPtr
newCallback_IAdmin_changePermissions(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePermissions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changePermissionsPtr
newCallback_IAdmin_changePermissions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePermissions<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changePermissionsPtr
newCallback_IAdmin_changePermissions(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePermissions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changePermissionsPtr
newCallback_IAdmin_changePermissions(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePermissions<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_moveToCommonSpace : public Callback_IAdmin_moveToCommonSpace_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_moveToCommonSpace(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_moveToCommonSpace(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_moveToCommonSpacePtr
newCallback_IAdmin_moveToCommonSpace(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_moveToCommonSpace<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_moveToCommonSpacePtr
newCallback_IAdmin_moveToCommonSpace(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_moveToCommonSpace<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_moveToCommonSpacePtr
newCallback_IAdmin_moveToCommonSpace(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_moveToCommonSpace<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_moveToCommonSpacePtr
newCallback_IAdmin_moveToCommonSpace(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_moveToCommonSpace<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_moveToCommonSpace : public Callback_IAdmin_moveToCommonSpace_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_moveToCommonSpace(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_moveToCommonSpace(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_moveToCommonSpacePtr
newCallback_IAdmin_moveToCommonSpace(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_moveToCommonSpace<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_moveToCommonSpacePtr
newCallback_IAdmin_moveToCommonSpace(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_moveToCommonSpace<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_moveToCommonSpacePtr
newCallback_IAdmin_moveToCommonSpace(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_moveToCommonSpace<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_moveToCommonSpacePtr
newCallback_IAdmin_moveToCommonSpace(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_moveToCommonSpace<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_changePassword : public Callback_IAdmin_changePassword_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_changePassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changePassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_changePasswordPtr
newCallback_IAdmin_changePassword(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changePasswordPtr
newCallback_IAdmin_changePassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePassword<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_changePasswordPtr
newCallback_IAdmin_changePassword(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changePasswordPtr
newCallback_IAdmin_changePassword(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePassword<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_changePassword : public Callback_IAdmin_changePassword_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_changePassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changePassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_changePasswordPtr
newCallback_IAdmin_changePassword(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changePasswordPtr
newCallback_IAdmin_changePassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changePasswordPtr
newCallback_IAdmin_changePassword(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changePasswordPtr
newCallback_IAdmin_changePassword(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_changePasswordWithOldPassword : public Callback_IAdmin_changePasswordWithOldPassword_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_changePasswordWithOldPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changePasswordWithOldPassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_changePasswordWithOldPasswordPtr
newCallback_IAdmin_changePasswordWithOldPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePasswordWithOldPassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changePasswordWithOldPasswordPtr
newCallback_IAdmin_changePasswordWithOldPassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePasswordWithOldPassword<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_changePasswordWithOldPasswordPtr
newCallback_IAdmin_changePasswordWithOldPassword(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePasswordWithOldPassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changePasswordWithOldPasswordPtr
newCallback_IAdmin_changePasswordWithOldPassword(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changePasswordWithOldPassword<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_changePasswordWithOldPassword : public Callback_IAdmin_changePasswordWithOldPassword_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_changePasswordWithOldPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changePasswordWithOldPassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_changePasswordWithOldPasswordPtr
newCallback_IAdmin_changePasswordWithOldPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePasswordWithOldPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changePasswordWithOldPasswordPtr
newCallback_IAdmin_changePasswordWithOldPassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePasswordWithOldPassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changePasswordWithOldPasswordPtr
newCallback_IAdmin_changePasswordWithOldPassword(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePasswordWithOldPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changePasswordWithOldPasswordPtr
newCallback_IAdmin_changePasswordWithOldPassword(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changePasswordWithOldPassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_changeUserPassword : public Callback_IAdmin_changeUserPassword_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_changeUserPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changeUserPassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_changeUserPasswordPtr
newCallback_IAdmin_changeUserPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeUserPassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changeUserPasswordPtr
newCallback_IAdmin_changeUserPassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeUserPassword<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_changeUserPasswordPtr
newCallback_IAdmin_changeUserPassword(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeUserPassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changeUserPasswordPtr
newCallback_IAdmin_changeUserPassword(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeUserPassword<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_changeUserPassword : public Callback_IAdmin_changeUserPassword_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_changeUserPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changeUserPassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_changeUserPasswordPtr
newCallback_IAdmin_changeUserPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeUserPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeUserPasswordPtr
newCallback_IAdmin_changeUserPassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeUserPassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeUserPasswordPtr
newCallback_IAdmin_changeUserPassword(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeUserPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeUserPasswordPtr
newCallback_IAdmin_changeUserPassword(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeUserPassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_synchronizeLoginCache : public Callback_IAdmin_synchronizeLoginCache_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_synchronizeLoginCache(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_synchronizeLoginCache(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_synchronizeLoginCachePtr
newCallback_IAdmin_synchronizeLoginCache(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_synchronizeLoginCache<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_synchronizeLoginCachePtr
newCallback_IAdmin_synchronizeLoginCache(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_synchronizeLoginCache<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_synchronizeLoginCachePtr
newCallback_IAdmin_synchronizeLoginCache(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_synchronizeLoginCache<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_synchronizeLoginCachePtr
newCallback_IAdmin_synchronizeLoginCache(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_synchronizeLoginCache<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_synchronizeLoginCache : public Callback_IAdmin_synchronizeLoginCache_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_synchronizeLoginCache(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_synchronizeLoginCache(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_synchronizeLoginCachePtr
newCallback_IAdmin_synchronizeLoginCache(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_synchronizeLoginCache<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_synchronizeLoginCachePtr
newCallback_IAdmin_synchronizeLoginCache(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_synchronizeLoginCache<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_synchronizeLoginCachePtr
newCallback_IAdmin_synchronizeLoginCache(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_synchronizeLoginCache<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_synchronizeLoginCachePtr
newCallback_IAdmin_synchronizeLoginCache(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_synchronizeLoginCache<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_changeExpiredCredentials : public Callback_IAdmin_changeExpiredCredentials_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_changeExpiredCredentials(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changeExpiredCredentials(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_changeExpiredCredentialsPtr
newCallback_IAdmin_changeExpiredCredentials(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeExpiredCredentials<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changeExpiredCredentialsPtr
newCallback_IAdmin_changeExpiredCredentials(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeExpiredCredentials<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_changeExpiredCredentialsPtr
newCallback_IAdmin_changeExpiredCredentials(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeExpiredCredentials<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_changeExpiredCredentialsPtr
newCallback_IAdmin_changeExpiredCredentials(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_changeExpiredCredentials<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_changeExpiredCredentials : public Callback_IAdmin_changeExpiredCredentials_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_changeExpiredCredentials(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_changeExpiredCredentials(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_changeExpiredCredentialsPtr
newCallback_IAdmin_changeExpiredCredentials(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeExpiredCredentials<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeExpiredCredentialsPtr
newCallback_IAdmin_changeExpiredCredentials(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeExpiredCredentials<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeExpiredCredentialsPtr
newCallback_IAdmin_changeExpiredCredentials(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeExpiredCredentials<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_changeExpiredCredentialsPtr
newCallback_IAdmin_changeExpiredCredentials(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_changeExpiredCredentials<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_reportForgottenPassword : public Callback_IAdmin_reportForgottenPassword_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAdmin_reportForgottenPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reportForgottenPassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_reportForgottenPasswordPtr
newCallback_IAdmin_reportForgottenPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_reportForgottenPassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_reportForgottenPasswordPtr
newCallback_IAdmin_reportForgottenPassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_reportForgottenPassword<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IAdmin_reportForgottenPasswordPtr
newCallback_IAdmin_reportForgottenPassword(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_reportForgottenPassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_reportForgottenPasswordPtr
newCallback_IAdmin_reportForgottenPassword(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_reportForgottenPassword<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_reportForgottenPassword : public Callback_IAdmin_reportForgottenPassword_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAdmin_reportForgottenPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reportForgottenPassword(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_reportForgottenPasswordPtr
newCallback_IAdmin_reportForgottenPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_reportForgottenPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_reportForgottenPasswordPtr
newCallback_IAdmin_reportForgottenPassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_reportForgottenPassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_reportForgottenPasswordPtr
newCallback_IAdmin_reportForgottenPassword(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_reportForgottenPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_reportForgottenPasswordPtr
newCallback_IAdmin_reportForgottenPassword(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_reportForgottenPassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_getSecurityRoles : public Callback_IAdmin_getSecurityRoles_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::RolesPtr&);

    CallbackNC_IAdmin_getSecurityRoles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::RolesPtr __ret;
        try
        {
            __ret = __proxy->end_getSecurityRoles(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_getSecurityRolesPtr
newCallback_IAdmin_getSecurityRoles(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::RolesPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getSecurityRoles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_getSecurityRolesPtr
newCallback_IAdmin_getSecurityRoles(T* instance, void (T::*cb)(const ::omero::sys::RolesPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getSecurityRoles<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_getSecurityRoles : public Callback_IAdmin_getSecurityRoles_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::RolesPtr&, const CT&);

    Callback_IAdmin_getSecurityRoles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::RolesPtr __ret;
        try
        {
            __ret = __proxy->end_getSecurityRoles(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_getSecurityRolesPtr
newCallback_IAdmin_getSecurityRoles(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::RolesPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getSecurityRoles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_getSecurityRolesPtr
newCallback_IAdmin_getSecurityRoles(T* instance, void (T::*cb)(const ::omero::sys::RolesPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getSecurityRoles<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAdmin_getEventContext : public Callback_IAdmin_getEventContext_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::EventContextPtr&);

    CallbackNC_IAdmin_getEventContext(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::EventContextPtr __ret;
        try
        {
            __ret = __proxy->end_getEventContext(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IAdmin_getEventContextPtr
newCallback_IAdmin_getEventContext(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::EventContextPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getEventContext<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAdmin_getEventContextPtr
newCallback_IAdmin_getEventContext(T* instance, void (T::*cb)(const ::omero::sys::EventContextPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAdmin_getEventContext<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAdmin_getEventContext : public Callback_IAdmin_getEventContext_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::EventContextPtr&, const CT&);

    Callback_IAdmin_getEventContext(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IAdminPrx __proxy = ::omero::api::IAdminPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::EventContextPtr __ret;
        try
        {
            __ret = __proxy->end_getEventContext(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAdmin_getEventContextPtr
newCallback_IAdmin_getEventContext(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::EventContextPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getEventContext<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAdmin_getEventContextPtr
newCallback_IAdmin_getEventContext(T* instance, void (T::*cb)(const ::omero::sys::EventContextPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAdmin_getEventContext<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
