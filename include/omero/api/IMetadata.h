// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IMetadata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IMetadata_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IMetadata_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ServicesF.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class IMetadata;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IMetadata>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IMetadata*);

}

}

}

namespace omero
{

namespace api
{

class IMetadata;
bool operator==(const IMetadata&, const IMetadata&);
bool operator<(const IMetadata&, const IMetadata&);
::Ice::Object* upCast(::omero::api::IMetadata*);
typedef ::IceInternal::Handle< ::omero::api::IMetadata> IMetadataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IMetadata> IMetadataPrx;
void __patch(IMetadataPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_IMetadata_loadChannelAcquisitionData : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::LogicalChannelList&) = 0;

    void __response(const ::omero::api::LogicalChannelList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_loadChannelAcquisitionData> AMI_IMetadata_loadChannelAcquisitionDataPtr;

class AMD_IMetadata_loadChannelAcquisitionData : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::LogicalChannelList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_loadChannelAcquisitionData> AMD_IMetadata_loadChannelAcquisitionDataPtr;

class AMI_IMetadata_loadAnnotations : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::LongIObjectListMap&) = 0;

    void __response(const ::omero::api::LongIObjectListMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_loadAnnotations> AMI_IMetadata_loadAnnotationsPtr;

class AMD_IMetadata_loadAnnotations : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::LongIObjectListMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_loadAnnotations> AMD_IMetadata_loadAnnotationsPtr;

class AMI_IMetadata_loadSpecifiedAnnotations : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::AnnotationList&) = 0;

    void __response(const ::omero::api::AnnotationList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_loadSpecifiedAnnotations> AMI_IMetadata_loadSpecifiedAnnotationsPtr;

class AMD_IMetadata_loadSpecifiedAnnotations : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::AnnotationList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_loadSpecifiedAnnotations> AMD_IMetadata_loadSpecifiedAnnotationsPtr;

class AMI_IMetadata_loadTagContent : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::LongIObjectListMap&) = 0;

    void __response(const ::omero::api::LongIObjectListMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_loadTagContent> AMI_IMetadata_loadTagContentPtr;

class AMD_IMetadata_loadTagContent : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::LongIObjectListMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_loadTagContent> AMD_IMetadata_loadTagContentPtr;

class AMI_IMetadata_loadTagSets : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_loadTagSets> AMI_IMetadata_loadTagSetsPtr;

class AMD_IMetadata_loadTagSets : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_loadTagSets> AMD_IMetadata_loadTagSetsPtr;

class AMI_IMetadata_getTaggedObjectsCount : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::sys::CountMap&) = 0;

    void __response(const ::omero::sys::CountMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_getTaggedObjectsCount> AMI_IMetadata_getTaggedObjectsCountPtr;

class AMD_IMetadata_getTaggedObjectsCount : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::sys::CountMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_getTaggedObjectsCount> AMD_IMetadata_getTaggedObjectsCountPtr;

class AMI_IMetadata_countSpecifiedAnnotations : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::RLongPtr&) = 0;

    void __response(const ::omero::RLongPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_countSpecifiedAnnotations> AMI_IMetadata_countSpecifiedAnnotationsPtr;

class AMD_IMetadata_countSpecifiedAnnotations : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::RLongPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_countSpecifiedAnnotations> AMD_IMetadata_countSpecifiedAnnotationsPtr;

class AMI_IMetadata_loadAnnotation : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::AnnotationList&) = 0;

    void __response(const ::omero::api::AnnotationList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_loadAnnotation> AMI_IMetadata_loadAnnotationPtr;

class AMD_IMetadata_loadAnnotation : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::AnnotationList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_loadAnnotation> AMD_IMetadata_loadAnnotationPtr;

class AMI_IMetadata_loadInstrument : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::InstrumentPtr&) = 0;

    void __response(const ::omero::model::InstrumentPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_loadInstrument> AMI_IMetadata_loadInstrumentPtr;

class AMD_IMetadata_loadInstrument : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::InstrumentPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_loadInstrument> AMD_IMetadata_loadInstrumentPtr;

class AMI_IMetadata_loadAnnotationsUsedNotOwned : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_loadAnnotationsUsedNotOwned> AMI_IMetadata_loadAnnotationsUsedNotOwnedPtr;

class AMD_IMetadata_loadAnnotationsUsedNotOwned : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_loadAnnotationsUsedNotOwned> AMD_IMetadata_loadAnnotationsUsedNotOwnedPtr;

class AMI_IMetadata_countAnnotationsUsedNotOwned : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::RLongPtr&) = 0;

    void __response(const ::omero::RLongPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_countAnnotationsUsedNotOwned> AMI_IMetadata_countAnnotationsUsedNotOwnedPtr;

class AMD_IMetadata_countAnnotationsUsedNotOwned : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::RLongPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_countAnnotationsUsedNotOwned> AMD_IMetadata_countAnnotationsUsedNotOwnedPtr;

class AMI_IMetadata_loadSpecifiedAnnotationsLinkedTo : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::LongAnnotationListMap&) = 0;

    void __response(const ::omero::api::LongAnnotationListMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_loadSpecifiedAnnotationsLinkedTo> AMI_IMetadata_loadSpecifiedAnnotationsLinkedToPtr;

class AMD_IMetadata_loadSpecifiedAnnotationsLinkedTo : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::LongAnnotationListMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_loadSpecifiedAnnotationsLinkedTo> AMD_IMetadata_loadSpecifiedAnnotationsLinkedToPtr;

class AMI_IMetadata_loadLogFiles : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::LongIObjectListMap&) = 0;

    void __response(const ::omero::api::LongIObjectListMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IMetadata_loadLogFiles> AMI_IMetadata_loadLogFilesPtr;

class AMD_IMetadata_loadLogFiles : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::LongIObjectListMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IMetadata_loadLogFiles> AMD_IMetadata_loadLogFilesPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_IMetadata_loadChannelAcquisitionData : public ::omero::api::AMD_IMetadata_loadChannelAcquisitionData, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_loadChannelAcquisitionData(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::LogicalChannelList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_loadAnnotations : public ::omero::api::AMD_IMetadata_loadAnnotations, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_loadAnnotations(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::LongIObjectListMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_loadSpecifiedAnnotations : public ::omero::api::AMD_IMetadata_loadSpecifiedAnnotations, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_loadSpecifiedAnnotations(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::AnnotationList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_loadTagContent : public ::omero::api::AMD_IMetadata_loadTagContent, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_loadTagContent(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::LongIObjectListMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_loadTagSets : public ::omero::api::AMD_IMetadata_loadTagSets, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_loadTagSets(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_getTaggedObjectsCount : public ::omero::api::AMD_IMetadata_getTaggedObjectsCount, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_getTaggedObjectsCount(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::sys::CountMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_countSpecifiedAnnotations : public ::omero::api::AMD_IMetadata_countSpecifiedAnnotations, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_countSpecifiedAnnotations(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::RLongPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_loadAnnotation : public ::omero::api::AMD_IMetadata_loadAnnotation, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_loadAnnotation(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::AnnotationList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_loadInstrument : public ::omero::api::AMD_IMetadata_loadInstrument, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_loadInstrument(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::InstrumentPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_loadAnnotationsUsedNotOwned : public ::omero::api::AMD_IMetadata_loadAnnotationsUsedNotOwned, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_loadAnnotationsUsedNotOwned(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_countAnnotationsUsedNotOwned : public ::omero::api::AMD_IMetadata_countAnnotationsUsedNotOwned, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_countAnnotationsUsedNotOwned(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::RLongPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_loadSpecifiedAnnotationsLinkedTo : public ::omero::api::AMD_IMetadata_loadSpecifiedAnnotationsLinkedTo, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_loadSpecifiedAnnotationsLinkedTo(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::LongAnnotationListMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IMetadata_loadLogFiles : public ::omero::api::AMD_IMetadata_loadLogFiles, public ::IceInternal::IncomingAsync
{
public:

    AMD_IMetadata_loadLogFiles(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::LongIObjectListMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_IMetadata_loadChannelAcquisitionData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_loadChannelAcquisitionData_Base> Callback_IMetadata_loadChannelAcquisitionDataPtr;

class Callback_IMetadata_loadAnnotations_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_loadAnnotations_Base> Callback_IMetadata_loadAnnotationsPtr;

class Callback_IMetadata_loadSpecifiedAnnotations_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_loadSpecifiedAnnotations_Base> Callback_IMetadata_loadSpecifiedAnnotationsPtr;

class Callback_IMetadata_loadTagContent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_loadTagContent_Base> Callback_IMetadata_loadTagContentPtr;

class Callback_IMetadata_loadTagSets_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_loadTagSets_Base> Callback_IMetadata_loadTagSetsPtr;

class Callback_IMetadata_getTaggedObjectsCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_getTaggedObjectsCount_Base> Callback_IMetadata_getTaggedObjectsCountPtr;

class Callback_IMetadata_countSpecifiedAnnotations_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_countSpecifiedAnnotations_Base> Callback_IMetadata_countSpecifiedAnnotationsPtr;

class Callback_IMetadata_loadAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_loadAnnotation_Base> Callback_IMetadata_loadAnnotationPtr;

class Callback_IMetadata_loadInstrument_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_loadInstrument_Base> Callback_IMetadata_loadInstrumentPtr;

class Callback_IMetadata_loadAnnotationsUsedNotOwned_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_loadAnnotationsUsedNotOwned_Base> Callback_IMetadata_loadAnnotationsUsedNotOwnedPtr;

class Callback_IMetadata_countAnnotationsUsedNotOwned_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_countAnnotationsUsedNotOwned_Base> Callback_IMetadata_countAnnotationsUsedNotOwnedPtr;

class Callback_IMetadata_loadSpecifiedAnnotationsLinkedTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_loadSpecifiedAnnotationsLinkedTo_Base> Callback_IMetadata_loadSpecifiedAnnotationsLinkedToPtr;

class Callback_IMetadata_loadLogFiles_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMetadata_loadLogFiles_Base> Callback_IMetadata_loadLogFilesPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class IMetadata : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    ::omero::api::LogicalChannelList loadChannelAcquisitionData(const ::omero::sys::LongList& ids)
    {
        return loadChannelAcquisitionData(ids, 0);
    }
    ::omero::api::LogicalChannelList loadChannelAcquisitionData(const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx)
    {
        return loadChannelAcquisitionData(ids, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadChannelAcquisitionData(const ::omero::sys::LongList& ids, const ::IceInternal::Function<void (const ::omero::api::LogicalChannelList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadChannelAcquisitionData(ids, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadChannelAcquisitionData(const ::omero::sys::LongList& ids, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadChannelAcquisitionData(ids, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadChannelAcquisitionData(const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::LogicalChannelList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadChannelAcquisitionData(ids, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadChannelAcquisitionData(const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadChannelAcquisitionData(ids, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadChannelAcquisitionData(const ::omero::sys::LongList& ids, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::LogicalChannelList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::LogicalChannelList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::api::LogicalChannelList __ret;
                try
                {
                    __ret = __proxy->end_loadChannelAcquisitionData(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::LogicalChannelList&)> _response;
        };
        return begin_loadChannelAcquisitionData(ids, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadChannelAcquisitionData(const ::omero::sys::LongList& ids)
    {
        return begin_loadChannelAcquisitionData(ids, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadChannelAcquisitionData(const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx)
    {
        return begin_loadChannelAcquisitionData(ids, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadChannelAcquisitionData(const ::omero::sys::LongList& ids, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadChannelAcquisitionData(ids, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadChannelAcquisitionData(const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadChannelAcquisitionData(ids, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadChannelAcquisitionData(const ::omero::sys::LongList& ids, const ::omero::api::Callback_IMetadata_loadChannelAcquisitionDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadChannelAcquisitionData(ids, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadChannelAcquisitionData(const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_loadChannelAcquisitionDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadChannelAcquisitionData(ids, &__ctx, __del, __cookie);
    }

    ::omero::api::LogicalChannelList end_loadChannelAcquisitionData(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::LogicalChannelList loadChannelAcquisitionData(const ::omero::sys::LongList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadChannelAcquisitionData(const ::omero::sys::LongList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool loadChannelAcquisitionData_async(const ::omero::api::AMI_IMetadata_loadChannelAcquisitionDataPtr&, const ::omero::sys::LongList&);
    bool loadChannelAcquisitionData_async(const ::omero::api::AMI_IMetadata_loadChannelAcquisitionDataPtr&, const ::omero::sys::LongList&, const ::Ice::Context&);

    ::omero::api::LongIObjectListMap loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options)
    {
        return loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, 0);
    }
    ::omero::api::LongIObjectListMap loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::omero::api::LongIObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::LongIObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::LongIObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::LongIObjectListMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::api::LongIObjectListMap __ret;
                try
                {
                    __ret = __proxy->end_loadAnnotations(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::LongIObjectListMap&)> _response;
        };
        return begin_loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options)
    {
        return begin_loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return begin_loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options, const ::omero::api::Callback_IMetadata_loadAnnotationsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotations(const ::std::string& rootType, const ::omero::sys::LongList& rootIds, const ::omero::api::StringSet& annotationTypes, const ::omero::sys::LongList& annotatorIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_loadAnnotationsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotations(rootType, rootIds, annotationTypes, annotatorIds, options, &__ctx, __del, __cookie);
    }

    ::omero::api::LongIObjectListMap end_loadAnnotations(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::LongIObjectListMap loadAnnotations(const ::std::string&, const ::omero::sys::LongList&, const ::omero::api::StringSet&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadAnnotations(const ::std::string&, const ::omero::sys::LongList&, const ::omero::api::StringSet&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool loadAnnotations_async(const ::omero::api::AMI_IMetadata_loadAnnotationsPtr&, const ::std::string&, const ::omero::sys::LongList&, const ::omero::api::StringSet&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&);
    bool loadAnnotations_async(const ::omero::api::AMI_IMetadata_loadAnnotationsPtr&, const ::std::string&, const ::omero::sys::LongList&, const ::omero::api::StringSet&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::api::AnnotationList loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options)
    {
        return loadSpecifiedAnnotations(annotationType, include, exclude, options, 0);
    }
    ::omero::api::AnnotationList loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return loadSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::omero::api::AnnotationList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadSpecifiedAnnotations(annotationType, include, exclude, options, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadSpecifiedAnnotations(annotationType, include, exclude, options, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::AnnotationList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::AnnotationList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::AnnotationList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::api::AnnotationList __ret;
                try
                {
                    __ret = __proxy->end_loadSpecifiedAnnotations(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::AnnotationList&)> _response;
        };
        return begin_loadSpecifiedAnnotations(annotationType, include, exclude, options, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options)
    {
        return begin_loadSpecifiedAnnotations(annotationType, include, exclude, options, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return begin_loadSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadSpecifiedAnnotations(annotationType, include, exclude, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::omero::api::Callback_IMetadata_loadSpecifiedAnnotationsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadSpecifiedAnnotations(annotationType, include, exclude, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_loadSpecifiedAnnotationsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx, __del, __cookie);
    }

    ::omero::api::AnnotationList end_loadSpecifiedAnnotations(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::AnnotationList loadSpecifiedAnnotations(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotations(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool loadSpecifiedAnnotations_async(const ::omero::api::AMI_IMetadata_loadSpecifiedAnnotationsPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&);
    bool loadSpecifiedAnnotations_async(const ::omero::api::AMI_IMetadata_loadSpecifiedAnnotationsPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::api::LongIObjectListMap loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options)
    {
        return loadTagContent(ids, options, 0);
    }
    ::omero::api::LongIObjectListMap loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return loadTagContent(ids, options, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::omero::api::LongIObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadTagContent(ids, options, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadTagContent(ids, options, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::LongIObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadTagContent(ids, options, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadTagContent(ids, options, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::LongIObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::LongIObjectListMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::api::LongIObjectListMap __ret;
                try
                {
                    __ret = __proxy->end_loadTagContent(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::LongIObjectListMap&)> _response;
        };
        return begin_loadTagContent(ids, options, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options)
    {
        return begin_loadTagContent(ids, options, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return begin_loadTagContent(ids, options, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadTagContent(ids, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadTagContent(ids, options, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::omero::api::Callback_IMetadata_loadTagContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadTagContent(ids, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadTagContent(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_loadTagContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadTagContent(ids, options, &__ctx, __del, __cookie);
    }

    ::omero::api::LongIObjectListMap end_loadTagContent(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::LongIObjectListMap loadTagContent(const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadTagContent(const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool loadTagContent_async(const ::omero::api::AMI_IMetadata_loadTagContentPtr&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&);
    bool loadTagContent_async(const ::omero::api::AMI_IMetadata_loadTagContentPtr&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::api::IObjectList loadTagSets(const ::omero::sys::ParametersPtr& options)
    {
        return loadTagSets(options, 0);
    }
    ::omero::api::IObjectList loadTagSets(const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return loadTagSets(options, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadTagSets(const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadTagSets(options, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadTagSets(const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadTagSets(options, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadTagSets(const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadTagSets(options, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadTagSets(const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadTagSets(options, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadTagSets(const ::omero::sys::ParametersPtr& options, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_loadTagSets(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_loadTagSets(options, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadTagSets(const ::omero::sys::ParametersPtr& options)
    {
        return begin_loadTagSets(options, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadTagSets(const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return begin_loadTagSets(options, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadTagSets(const ::omero::sys::ParametersPtr& options, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadTagSets(options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadTagSets(const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadTagSets(options, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadTagSets(const ::omero::sys::ParametersPtr& options, const ::omero::api::Callback_IMetadata_loadTagSetsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadTagSets(options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadTagSets(const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_loadTagSetsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadTagSets(options, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_loadTagSets(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList loadTagSets(const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadTagSets(const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool loadTagSets_async(const ::omero::api::AMI_IMetadata_loadTagSetsPtr&, const ::omero::sys::ParametersPtr&);
    bool loadTagSets_async(const ::omero::api::AMI_IMetadata_loadTagSetsPtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::sys::CountMap getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options)
    {
        return getTaggedObjectsCount(ids, options, 0);
    }
    ::omero::sys::CountMap getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return getTaggedObjectsCount(ids, options, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTaggedObjectsCount(ids, options, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTaggedObjectsCount(ids, options, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTaggedObjectsCount(ids, options, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTaggedObjectsCount(ids, options, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getTaggedObjectsCount(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getTaggedObjectsCount(ids, options, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options)
    {
        return begin_getTaggedObjectsCount(ids, options, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return begin_getTaggedObjectsCount(ids, options, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTaggedObjectsCount(ids, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTaggedObjectsCount(ids, options, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::omero::api::Callback_IMetadata_getTaggedObjectsCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTaggedObjectsCount(ids, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTaggedObjectsCount(const ::omero::sys::LongList& ids, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_getTaggedObjectsCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTaggedObjectsCount(ids, options, &__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getTaggedObjectsCount(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getTaggedObjectsCount(const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTaggedObjectsCount(const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getTaggedObjectsCount_async(const ::omero::api::AMI_IMetadata_getTaggedObjectsCountPtr&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&);
    bool getTaggedObjectsCount_async(const ::omero::api::AMI_IMetadata_getTaggedObjectsCountPtr&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::RLongPtr countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options)
    {
        return countSpecifiedAnnotations(annotationType, include, exclude, options, 0);
    }
    ::omero::RLongPtr countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return countSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_countSpecifiedAnnotations(annotationType, include, exclude, options, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_countSpecifiedAnnotations(annotationType, include, exclude, options, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_countSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_countSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RLongPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::RLongPtr __ret;
                try
                {
                    __ret = __proxy->end_countSpecifiedAnnotations(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RLongPtr&)> _response;
        };
        return begin_countSpecifiedAnnotations(annotationType, include, exclude, options, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options)
    {
        return begin_countSpecifiedAnnotations(annotationType, include, exclude, options, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return begin_countSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countSpecifiedAnnotations(annotationType, include, exclude, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::omero::api::Callback_IMetadata_countSpecifiedAnnotationsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countSpecifiedAnnotations(annotationType, include, exclude, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_countSpecifiedAnnotations(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_countSpecifiedAnnotationsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countSpecifiedAnnotations(annotationType, include, exclude, options, &__ctx, __del, __cookie);
    }

    ::omero::RLongPtr end_countSpecifiedAnnotations(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RLongPtr countSpecifiedAnnotations(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_countSpecifiedAnnotations(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool countSpecifiedAnnotations_async(const ::omero::api::AMI_IMetadata_countSpecifiedAnnotationsPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&);
    bool countSpecifiedAnnotations_async(const ::omero::api::AMI_IMetadata_countSpecifiedAnnotationsPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::api::AnnotationList loadAnnotation(const ::omero::sys::LongList& annotationIds)
    {
        return loadAnnotation(annotationIds, 0);
    }
    ::omero::api::AnnotationList loadAnnotation(const ::omero::sys::LongList& annotationIds, const ::Ice::Context& __ctx)
    {
        return loadAnnotation(annotationIds, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadAnnotation(const ::omero::sys::LongList& annotationIds, const ::IceInternal::Function<void (const ::omero::api::AnnotationList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadAnnotation(annotationIds, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadAnnotation(const ::omero::sys::LongList& annotationIds, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadAnnotation(annotationIds, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadAnnotation(const ::omero::sys::LongList& annotationIds, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::AnnotationList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadAnnotation(annotationIds, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadAnnotation(const ::omero::sys::LongList& annotationIds, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadAnnotation(annotationIds, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadAnnotation(const ::omero::sys::LongList& annotationIds, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::AnnotationList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::AnnotationList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::api::AnnotationList __ret;
                try
                {
                    __ret = __proxy->end_loadAnnotation(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::AnnotationList&)> _response;
        };
        return begin_loadAnnotation(annotationIds, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadAnnotation(const ::omero::sys::LongList& annotationIds)
    {
        return begin_loadAnnotation(annotationIds, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotation(const ::omero::sys::LongList& annotationIds, const ::Ice::Context& __ctx)
    {
        return begin_loadAnnotation(annotationIds, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotation(const ::omero::sys::LongList& annotationIds, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotation(annotationIds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotation(const ::omero::sys::LongList& annotationIds, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotation(annotationIds, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotation(const ::omero::sys::LongList& annotationIds, const ::omero::api::Callback_IMetadata_loadAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotation(annotationIds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotation(const ::omero::sys::LongList& annotationIds, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_loadAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotation(annotationIds, &__ctx, __del, __cookie);
    }

    ::omero::api::AnnotationList end_loadAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::AnnotationList loadAnnotation(const ::omero::sys::LongList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadAnnotation(const ::omero::sys::LongList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool loadAnnotation_async(const ::omero::api::AMI_IMetadata_loadAnnotationPtr&, const ::omero::sys::LongList&);
    bool loadAnnotation_async(const ::omero::api::AMI_IMetadata_loadAnnotationPtr&, const ::omero::sys::LongList&, const ::Ice::Context&);

    ::omero::model::InstrumentPtr loadInstrument(::Ice::Long id)
    {
        return loadInstrument(id, 0);
    }
    ::omero::model::InstrumentPtr loadInstrument(::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return loadInstrument(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadInstrument(::Ice::Long id, const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadInstrument(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadInstrument(::Ice::Long id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadInstrument(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadInstrument(::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadInstrument(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadInstrument(::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadInstrument(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadInstrument(::Ice::Long id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::InstrumentPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::model::InstrumentPtr __ret;
                try
                {
                    __ret = __proxy->end_loadInstrument(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::InstrumentPtr&)> _response;
        };
        return begin_loadInstrument(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadInstrument(::Ice::Long id)
    {
        return begin_loadInstrument(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadInstrument(::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return begin_loadInstrument(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadInstrument(::Ice::Long id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadInstrument(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadInstrument(::Ice::Long id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadInstrument(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadInstrument(::Ice::Long id, const ::omero::api::Callback_IMetadata_loadInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadInstrument(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadInstrument(::Ice::Long id, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_loadInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadInstrument(id, &__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentPtr end_loadInstrument(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentPtr loadInstrument(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadInstrument(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool loadInstrument_async(const ::omero::api::AMI_IMetadata_loadInstrumentPtr&, ::Ice::Long);
    bool loadInstrument_async(const ::omero::api::AMI_IMetadata_loadInstrumentPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::api::IObjectList loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID)
    {
        return loadAnnotationsUsedNotOwned(annotationType, userID, 0);
    }
    ::omero::api::IObjectList loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx)
    {
        return loadAnnotationsUsedNotOwned(annotationType, userID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadAnnotationsUsedNotOwned(annotationType, userID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadAnnotationsUsedNotOwned(annotationType, userID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadAnnotationsUsedNotOwned(annotationType, userID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadAnnotationsUsedNotOwned(annotationType, userID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_loadAnnotationsUsedNotOwned(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_loadAnnotationsUsedNotOwned(annotationType, userID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID)
    {
        return begin_loadAnnotationsUsedNotOwned(annotationType, userID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx)
    {
        return begin_loadAnnotationsUsedNotOwned(annotationType, userID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotationsUsedNotOwned(annotationType, userID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotationsUsedNotOwned(annotationType, userID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::omero::api::Callback_IMetadata_loadAnnotationsUsedNotOwnedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotationsUsedNotOwned(annotationType, userID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_loadAnnotationsUsedNotOwnedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadAnnotationsUsedNotOwned(annotationType, userID, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_loadAnnotationsUsedNotOwned(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList loadAnnotationsUsedNotOwned(const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadAnnotationsUsedNotOwned(const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool loadAnnotationsUsedNotOwned_async(const ::omero::api::AMI_IMetadata_loadAnnotationsUsedNotOwnedPtr&, const ::std::string&, ::Ice::Long);
    bool loadAnnotationsUsedNotOwned_async(const ::omero::api::AMI_IMetadata_loadAnnotationsUsedNotOwnedPtr&, const ::std::string&, ::Ice::Long, const ::Ice::Context&);

    ::omero::RLongPtr countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID)
    {
        return countAnnotationsUsedNotOwned(annotationType, userID, 0);
    }
    ::omero::RLongPtr countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx)
    {
        return countAnnotationsUsedNotOwned(annotationType, userID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_countAnnotationsUsedNotOwned(annotationType, userID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_countAnnotationsUsedNotOwned(annotationType, userID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_countAnnotationsUsedNotOwned(annotationType, userID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_countAnnotationsUsedNotOwned(annotationType, userID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RLongPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::RLongPtr __ret;
                try
                {
                    __ret = __proxy->end_countAnnotationsUsedNotOwned(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RLongPtr&)> _response;
        };
        return begin_countAnnotationsUsedNotOwned(annotationType, userID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID)
    {
        return begin_countAnnotationsUsedNotOwned(annotationType, userID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx)
    {
        return begin_countAnnotationsUsedNotOwned(annotationType, userID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countAnnotationsUsedNotOwned(annotationType, userID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countAnnotationsUsedNotOwned(annotationType, userID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::omero::api::Callback_IMetadata_countAnnotationsUsedNotOwnedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countAnnotationsUsedNotOwned(annotationType, userID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_countAnnotationsUsedNotOwned(const ::std::string& annotationType, ::Ice::Long userID, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_countAnnotationsUsedNotOwnedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_countAnnotationsUsedNotOwned(annotationType, userID, &__ctx, __del, __cookie);
    }

    ::omero::RLongPtr end_countAnnotationsUsedNotOwned(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RLongPtr countAnnotationsUsedNotOwned(const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_countAnnotationsUsedNotOwned(const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool countAnnotationsUsedNotOwned_async(const ::omero::api::AMI_IMetadata_countAnnotationsUsedNotOwnedPtr&, const ::std::string&, ::Ice::Long);
    bool countAnnotationsUsedNotOwned_async(const ::omero::api::AMI_IMetadata_countAnnotationsUsedNotOwnedPtr&, const ::std::string&, ::Ice::Long, const ::Ice::Context&);

    ::omero::api::LongAnnotationListMap loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options)
    {
        return loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, 0);
    }
    ::omero::api::LongAnnotationListMap loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::omero::api::LongAnnotationListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::LongAnnotationListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::LongAnnotationListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::LongAnnotationListMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::api::LongAnnotationListMap __ret;
                try
                {
                    __ret = __proxy->end_loadSpecifiedAnnotationsLinkedTo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::LongAnnotationListMap&)> _response;
        };
        return begin_loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options)
    {
        return begin_loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx)
    {
        return begin_loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options, const ::omero::api::Callback_IMetadata_loadSpecifiedAnnotationsLinkedToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string& annotationType, const ::omero::api::StringSet& include, const ::omero::api::StringSet& exclude, const ::std::string& rootNodeType, const ::omero::sys::LongList& rootNodeIds, const ::omero::sys::ParametersPtr& options, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_loadSpecifiedAnnotationsLinkedToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadSpecifiedAnnotationsLinkedTo(annotationType, include, exclude, rootNodeType, rootNodeIds, options, &__ctx, __del, __cookie);
    }

    ::omero::api::LongAnnotationListMap end_loadSpecifiedAnnotationsLinkedTo(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::LongAnnotationListMap loadSpecifiedAnnotationsLinkedTo(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::std::string&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadSpecifiedAnnotationsLinkedTo(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::std::string&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool loadSpecifiedAnnotationsLinkedTo_async(const ::omero::api::AMI_IMetadata_loadSpecifiedAnnotationsLinkedToPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::std::string&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&);
    bool loadSpecifiedAnnotationsLinkedTo_async(const ::omero::api::AMI_IMetadata_loadSpecifiedAnnotationsLinkedToPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::std::string&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::api::LongIObjectListMap loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids)
    {
        return loadLogFiles(rootType, ids, 0);
    }
    ::omero::api::LongIObjectListMap loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx)
    {
        return loadLogFiles(rootType, ids, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids, const ::IceInternal::Function<void (const ::omero::api::LongIObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadLogFiles(rootType, ids, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadLogFiles(rootType, ids, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::LongIObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadLogFiles(rootType, ids, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadLogFiles(rootType, ids, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::LongIObjectListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::LongIObjectListMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
                ::omero::api::LongIObjectListMap __ret;
                try
                {
                    __ret = __proxy->end_loadLogFiles(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::LongIObjectListMap&)> _response;
        };
        return begin_loadLogFiles(rootType, ids, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids)
    {
        return begin_loadLogFiles(rootType, ids, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx)
    {
        return begin_loadLogFiles(rootType, ids, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadLogFiles(rootType, ids, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadLogFiles(rootType, ids, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids, const ::omero::api::Callback_IMetadata_loadLogFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadLogFiles(rootType, ids, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadLogFiles(const ::std::string& rootType, const ::omero::sys::LongList& ids, const ::Ice::Context& __ctx, const ::omero::api::Callback_IMetadata_loadLogFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadLogFiles(rootType, ids, &__ctx, __del, __cookie);
    }

    ::omero::api::LongIObjectListMap end_loadLogFiles(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::LongIObjectListMap loadLogFiles(const ::std::string&, const ::omero::sys::LongList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadLogFiles(const ::std::string&, const ::omero::sys::LongList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool loadLogFiles_async(const ::omero::api::AMI_IMetadata_loadLogFilesPtr&, const ::std::string&, const ::omero::sys::LongList&);
    bool loadLogFiles_async(const ::omero::api::AMI_IMetadata_loadLogFilesPtr&, const ::std::string&, const ::omero::sys::LongList&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<IMetadata> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_secure(bool __secure) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_twoway() const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_oneway() const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_batchOneway() const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_datagram() const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_batchDatagram() const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_compress(bool __compress) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_timeout(int __timeout) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IMetadata> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<IMetadata*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class IMetadata : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::LogicalChannelList loadChannelAcquisitionData(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::LongIObjectListMap loadAnnotations(const ::std::string&, const ::omero::sys::LongList&, const ::omero::api::StringSet&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::AnnotationList loadSpecifiedAnnotations(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::LongIObjectListMap loadTagContent(const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList loadTagSets(const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getTaggedObjectsCount(const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RLongPtr countSpecifiedAnnotations(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::AnnotationList loadAnnotation(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::InstrumentPtr loadInstrument(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList loadAnnotationsUsedNotOwned(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RLongPtr countAnnotationsUsedNotOwned(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::LongAnnotationListMap loadSpecifiedAnnotationsLinkedTo(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::std::string&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::LongIObjectListMap loadLogFiles(const ::std::string&, const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class IMetadata : virtual public ::IceDelegate::omero::api::IMetadata,
                  virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::LogicalChannelList loadChannelAcquisitionData(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongIObjectListMap loadAnnotations(const ::std::string&, const ::omero::sys::LongList&, const ::omero::api::StringSet&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::AnnotationList loadSpecifiedAnnotations(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongIObjectListMap loadTagContent(const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList loadTagSets(const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getTaggedObjectsCount(const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr countSpecifiedAnnotations(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::AnnotationList loadAnnotation(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::InstrumentPtr loadInstrument(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList loadAnnotationsUsedNotOwned(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr countAnnotationsUsedNotOwned(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongAnnotationListMap loadSpecifiedAnnotationsLinkedTo(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::std::string&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongIObjectListMap loadLogFiles(const ::std::string&, const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class IMetadata : virtual public ::IceDelegate::omero::api::IMetadata,
                  virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::LogicalChannelList loadChannelAcquisitionData(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongIObjectListMap loadAnnotations(const ::std::string&, const ::omero::sys::LongList&, const ::omero::api::StringSet&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::AnnotationList loadSpecifiedAnnotations(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongIObjectListMap loadTagContent(const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList loadTagSets(const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getTaggedObjectsCount(const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr countSpecifiedAnnotations(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::AnnotationList loadAnnotation(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::InstrumentPtr loadInstrument(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList loadAnnotationsUsedNotOwned(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr countAnnotationsUsedNotOwned(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongAnnotationListMap loadSpecifiedAnnotationsLinkedTo(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::std::string&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::LongIObjectListMap loadLogFiles(const ::std::string&, const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class IMetadata : virtual public ::omero::api::ServiceInterface
{
public:

    typedef IMetadataPrx ProxyType;
    typedef IMetadataPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void loadChannelAcquisitionData_async(const ::omero::api::AMD_IMetadata_loadChannelAcquisitionDataPtr&, const ::omero::sys::LongList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadChannelAcquisitionData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadAnnotations_async(const ::omero::api::AMD_IMetadata_loadAnnotationsPtr&, const ::std::string&, const ::omero::sys::LongList&, const ::omero::api::StringSet&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadAnnotations(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadSpecifiedAnnotations_async(const ::omero::api::AMD_IMetadata_loadSpecifiedAnnotationsPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadSpecifiedAnnotations(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadTagContent_async(const ::omero::api::AMD_IMetadata_loadTagContentPtr&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadTagContent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadTagSets_async(const ::omero::api::AMD_IMetadata_loadTagSetsPtr&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadTagSets(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getTaggedObjectsCount_async(const ::omero::api::AMD_IMetadata_getTaggedObjectsCountPtr&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTaggedObjectsCount(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void countSpecifiedAnnotations_async(const ::omero::api::AMD_IMetadata_countSpecifiedAnnotationsPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___countSpecifiedAnnotations(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadAnnotation_async(const ::omero::api::AMD_IMetadata_loadAnnotationPtr&, const ::omero::sys::LongList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadInstrument_async(const ::omero::api::AMD_IMetadata_loadInstrumentPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadInstrument(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadAnnotationsUsedNotOwned_async(const ::omero::api::AMD_IMetadata_loadAnnotationsUsedNotOwnedPtr&, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadAnnotationsUsedNotOwned(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void countAnnotationsUsedNotOwned_async(const ::omero::api::AMD_IMetadata_countAnnotationsUsedNotOwnedPtr&, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___countAnnotationsUsedNotOwned(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadSpecifiedAnnotationsLinkedTo_async(const ::omero::api::AMD_IMetadata_loadSpecifiedAnnotationsLinkedToPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::std::string&, const ::omero::sys::LongList&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadSpecifiedAnnotationsLinkedTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadLogFiles_async(const ::omero::api::AMD_IMetadata_loadLogFilesPtr&, const ::std::string&, const ::omero::sys::LongList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadLogFiles(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const IMetadata& l, const IMetadata& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IMetadata& l, const IMetadata& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_IMetadata_loadChannelAcquisitionData : public Callback_IMetadata_loadChannelAcquisitionData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::LogicalChannelList&);

    CallbackNC_IMetadata_loadChannelAcquisitionData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LogicalChannelList __ret;
        try
        {
            __ret = __proxy->end_loadChannelAcquisitionData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_loadChannelAcquisitionDataPtr
newCallback_IMetadata_loadChannelAcquisitionData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LogicalChannelList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadChannelAcquisitionData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_loadChannelAcquisitionDataPtr
newCallback_IMetadata_loadChannelAcquisitionData(T* instance, void (T::*cb)(const ::omero::api::LogicalChannelList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadChannelAcquisitionData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_loadChannelAcquisitionData : public Callback_IMetadata_loadChannelAcquisitionData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::LogicalChannelList&, const CT&);

    Callback_IMetadata_loadChannelAcquisitionData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LogicalChannelList __ret;
        try
        {
            __ret = __proxy->end_loadChannelAcquisitionData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_loadChannelAcquisitionDataPtr
newCallback_IMetadata_loadChannelAcquisitionData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LogicalChannelList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadChannelAcquisitionData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_loadChannelAcquisitionDataPtr
newCallback_IMetadata_loadChannelAcquisitionData(T* instance, void (T::*cb)(const ::omero::api::LogicalChannelList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadChannelAcquisitionData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_loadAnnotations : public Callback_IMetadata_loadAnnotations_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::LongIObjectListMap&);

    CallbackNC_IMetadata_loadAnnotations(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongIObjectListMap __ret;
        try
        {
            __ret = __proxy->end_loadAnnotations(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_loadAnnotationsPtr
newCallback_IMetadata_loadAnnotations(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadAnnotations<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_loadAnnotationsPtr
newCallback_IMetadata_loadAnnotations(T* instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadAnnotations<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_loadAnnotations : public Callback_IMetadata_loadAnnotations_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::LongIObjectListMap&, const CT&);

    Callback_IMetadata_loadAnnotations(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongIObjectListMap __ret;
        try
        {
            __ret = __proxy->end_loadAnnotations(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_loadAnnotationsPtr
newCallback_IMetadata_loadAnnotations(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadAnnotations<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_loadAnnotationsPtr
newCallback_IMetadata_loadAnnotations(T* instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadAnnotations<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_loadSpecifiedAnnotations : public Callback_IMetadata_loadSpecifiedAnnotations_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::AnnotationList&);

    CallbackNC_IMetadata_loadSpecifiedAnnotations(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::AnnotationList __ret;
        try
        {
            __ret = __proxy->end_loadSpecifiedAnnotations(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_loadSpecifiedAnnotationsPtr
newCallback_IMetadata_loadSpecifiedAnnotations(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::AnnotationList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadSpecifiedAnnotations<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_loadSpecifiedAnnotationsPtr
newCallback_IMetadata_loadSpecifiedAnnotations(T* instance, void (T::*cb)(const ::omero::api::AnnotationList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadSpecifiedAnnotations<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_loadSpecifiedAnnotations : public Callback_IMetadata_loadSpecifiedAnnotations_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::AnnotationList&, const CT&);

    Callback_IMetadata_loadSpecifiedAnnotations(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::AnnotationList __ret;
        try
        {
            __ret = __proxy->end_loadSpecifiedAnnotations(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_loadSpecifiedAnnotationsPtr
newCallback_IMetadata_loadSpecifiedAnnotations(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::AnnotationList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadSpecifiedAnnotations<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_loadSpecifiedAnnotationsPtr
newCallback_IMetadata_loadSpecifiedAnnotations(T* instance, void (T::*cb)(const ::omero::api::AnnotationList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadSpecifiedAnnotations<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_loadTagContent : public Callback_IMetadata_loadTagContent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::LongIObjectListMap&);

    CallbackNC_IMetadata_loadTagContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongIObjectListMap __ret;
        try
        {
            __ret = __proxy->end_loadTagContent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_loadTagContentPtr
newCallback_IMetadata_loadTagContent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadTagContent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_loadTagContentPtr
newCallback_IMetadata_loadTagContent(T* instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadTagContent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_loadTagContent : public Callback_IMetadata_loadTagContent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::LongIObjectListMap&, const CT&);

    Callback_IMetadata_loadTagContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongIObjectListMap __ret;
        try
        {
            __ret = __proxy->end_loadTagContent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_loadTagContentPtr
newCallback_IMetadata_loadTagContent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadTagContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_loadTagContentPtr
newCallback_IMetadata_loadTagContent(T* instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadTagContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_loadTagSets : public Callback_IMetadata_loadTagSets_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IMetadata_loadTagSets(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_loadTagSets(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_loadTagSetsPtr
newCallback_IMetadata_loadTagSets(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadTagSets<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_loadTagSetsPtr
newCallback_IMetadata_loadTagSets(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadTagSets<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_loadTagSets : public Callback_IMetadata_loadTagSets_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IMetadata_loadTagSets(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_loadTagSets(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_loadTagSetsPtr
newCallback_IMetadata_loadTagSets(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadTagSets<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_loadTagSetsPtr
newCallback_IMetadata_loadTagSets(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadTagSets<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_getTaggedObjectsCount : public Callback_IMetadata_getTaggedObjectsCount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_IMetadata_getTaggedObjectsCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getTaggedObjectsCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_getTaggedObjectsCountPtr
newCallback_IMetadata_getTaggedObjectsCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_getTaggedObjectsCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_getTaggedObjectsCountPtr
newCallback_IMetadata_getTaggedObjectsCount(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_getTaggedObjectsCount<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_getTaggedObjectsCount : public Callback_IMetadata_getTaggedObjectsCount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_IMetadata_getTaggedObjectsCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getTaggedObjectsCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_getTaggedObjectsCountPtr
newCallback_IMetadata_getTaggedObjectsCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_getTaggedObjectsCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_getTaggedObjectsCountPtr
newCallback_IMetadata_getTaggedObjectsCount(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_getTaggedObjectsCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_countSpecifiedAnnotations : public Callback_IMetadata_countSpecifiedAnnotations_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RLongPtr&);

    CallbackNC_IMetadata_countSpecifiedAnnotations(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_countSpecifiedAnnotations(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_countSpecifiedAnnotationsPtr
newCallback_IMetadata_countSpecifiedAnnotations(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_countSpecifiedAnnotations<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_countSpecifiedAnnotationsPtr
newCallback_IMetadata_countSpecifiedAnnotations(T* instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_countSpecifiedAnnotations<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_countSpecifiedAnnotations : public Callback_IMetadata_countSpecifiedAnnotations_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RLongPtr&, const CT&);

    Callback_IMetadata_countSpecifiedAnnotations(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_countSpecifiedAnnotations(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_countSpecifiedAnnotationsPtr
newCallback_IMetadata_countSpecifiedAnnotations(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_countSpecifiedAnnotations<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_countSpecifiedAnnotationsPtr
newCallback_IMetadata_countSpecifiedAnnotations(T* instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_countSpecifiedAnnotations<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_loadAnnotation : public Callback_IMetadata_loadAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::AnnotationList&);

    CallbackNC_IMetadata_loadAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::AnnotationList __ret;
        try
        {
            __ret = __proxy->end_loadAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_loadAnnotationPtr
newCallback_IMetadata_loadAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::AnnotationList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_loadAnnotationPtr
newCallback_IMetadata_loadAnnotation(T* instance, void (T::*cb)(const ::omero::api::AnnotationList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_loadAnnotation : public Callback_IMetadata_loadAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::AnnotationList&, const CT&);

    Callback_IMetadata_loadAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::AnnotationList __ret;
        try
        {
            __ret = __proxy->end_loadAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_loadAnnotationPtr
newCallback_IMetadata_loadAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::AnnotationList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_loadAnnotationPtr
newCallback_IMetadata_loadAnnotation(T* instance, void (T::*cb)(const ::omero::api::AnnotationList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_loadInstrument : public Callback_IMetadata_loadInstrument_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&);

    CallbackNC_IMetadata_loadInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_loadInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_loadInstrumentPtr
newCallback_IMetadata_loadInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_loadInstrumentPtr
newCallback_IMetadata_loadInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadInstrument<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_loadInstrument : public Callback_IMetadata_loadInstrument_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&, const CT&);

    Callback_IMetadata_loadInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_loadInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_loadInstrumentPtr
newCallback_IMetadata_loadInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_loadInstrumentPtr
newCallback_IMetadata_loadInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_loadAnnotationsUsedNotOwned : public Callback_IMetadata_loadAnnotationsUsedNotOwned_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IMetadata_loadAnnotationsUsedNotOwned(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_loadAnnotationsUsedNotOwned(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_loadAnnotationsUsedNotOwnedPtr
newCallback_IMetadata_loadAnnotationsUsedNotOwned(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadAnnotationsUsedNotOwned<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_loadAnnotationsUsedNotOwnedPtr
newCallback_IMetadata_loadAnnotationsUsedNotOwned(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadAnnotationsUsedNotOwned<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_loadAnnotationsUsedNotOwned : public Callback_IMetadata_loadAnnotationsUsedNotOwned_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IMetadata_loadAnnotationsUsedNotOwned(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_loadAnnotationsUsedNotOwned(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_loadAnnotationsUsedNotOwnedPtr
newCallback_IMetadata_loadAnnotationsUsedNotOwned(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadAnnotationsUsedNotOwned<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_loadAnnotationsUsedNotOwnedPtr
newCallback_IMetadata_loadAnnotationsUsedNotOwned(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadAnnotationsUsedNotOwned<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_countAnnotationsUsedNotOwned : public Callback_IMetadata_countAnnotationsUsedNotOwned_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RLongPtr&);

    CallbackNC_IMetadata_countAnnotationsUsedNotOwned(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_countAnnotationsUsedNotOwned(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_countAnnotationsUsedNotOwnedPtr
newCallback_IMetadata_countAnnotationsUsedNotOwned(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_countAnnotationsUsedNotOwned<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_countAnnotationsUsedNotOwnedPtr
newCallback_IMetadata_countAnnotationsUsedNotOwned(T* instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_countAnnotationsUsedNotOwned<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_countAnnotationsUsedNotOwned : public Callback_IMetadata_countAnnotationsUsedNotOwned_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RLongPtr&, const CT&);

    Callback_IMetadata_countAnnotationsUsedNotOwned(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_countAnnotationsUsedNotOwned(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_countAnnotationsUsedNotOwnedPtr
newCallback_IMetadata_countAnnotationsUsedNotOwned(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_countAnnotationsUsedNotOwned<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_countAnnotationsUsedNotOwnedPtr
newCallback_IMetadata_countAnnotationsUsedNotOwned(T* instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_countAnnotationsUsedNotOwned<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_loadSpecifiedAnnotationsLinkedTo : public Callback_IMetadata_loadSpecifiedAnnotationsLinkedTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::LongAnnotationListMap&);

    CallbackNC_IMetadata_loadSpecifiedAnnotationsLinkedTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongAnnotationListMap __ret;
        try
        {
            __ret = __proxy->end_loadSpecifiedAnnotationsLinkedTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_loadSpecifiedAnnotationsLinkedToPtr
newCallback_IMetadata_loadSpecifiedAnnotationsLinkedTo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongAnnotationListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadSpecifiedAnnotationsLinkedTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_loadSpecifiedAnnotationsLinkedToPtr
newCallback_IMetadata_loadSpecifiedAnnotationsLinkedTo(T* instance, void (T::*cb)(const ::omero::api::LongAnnotationListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadSpecifiedAnnotationsLinkedTo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_loadSpecifiedAnnotationsLinkedTo : public Callback_IMetadata_loadSpecifiedAnnotationsLinkedTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::LongAnnotationListMap&, const CT&);

    Callback_IMetadata_loadSpecifiedAnnotationsLinkedTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongAnnotationListMap __ret;
        try
        {
            __ret = __proxy->end_loadSpecifiedAnnotationsLinkedTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_loadSpecifiedAnnotationsLinkedToPtr
newCallback_IMetadata_loadSpecifiedAnnotationsLinkedTo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongAnnotationListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadSpecifiedAnnotationsLinkedTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_loadSpecifiedAnnotationsLinkedToPtr
newCallback_IMetadata_loadSpecifiedAnnotationsLinkedTo(T* instance, void (T::*cb)(const ::omero::api::LongAnnotationListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadSpecifiedAnnotationsLinkedTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMetadata_loadLogFiles : public Callback_IMetadata_loadLogFiles_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::LongIObjectListMap&);

    CallbackNC_IMetadata_loadLogFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongIObjectListMap __ret;
        try
        {
            __ret = __proxy->end_loadLogFiles(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IMetadata_loadLogFilesPtr
newCallback_IMetadata_loadLogFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadLogFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMetadata_loadLogFilesPtr
newCallback_IMetadata_loadLogFiles(T* instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMetadata_loadLogFiles<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMetadata_loadLogFiles : public Callback_IMetadata_loadLogFiles_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::LongIObjectListMap&, const CT&);

    Callback_IMetadata_loadLogFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IMetadataPrx __proxy = ::omero::api::IMetadataPrx::uncheckedCast(__result->getProxy());
        ::omero::api::LongIObjectListMap __ret;
        try
        {
            __ret = __proxy->end_loadLogFiles(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IMetadata_loadLogFilesPtr
newCallback_IMetadata_loadLogFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadLogFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMetadata_loadLogFilesPtr
newCallback_IMetadata_loadLogFiles(T* instance, void (T::*cb)(const ::omero::api::LongIObjectListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMetadata_loadLogFiles<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
