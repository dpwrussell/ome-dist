// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IUpdate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IUpdate_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IUpdate_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/cmd/API.h>
#include <omero/ServicesF.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class IUpdate;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IUpdate>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IUpdate*);

class Save;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::Save>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::Save*);

class SaveRsp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::SaveRsp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::SaveRsp*);

}

}

}

namespace omero
{

namespace api
{

class IUpdate;
bool operator==(const IUpdate&, const IUpdate&);
bool operator<(const IUpdate&, const IUpdate&);
::Ice::Object* upCast(::omero::api::IUpdate*);
typedef ::IceInternal::Handle< ::omero::api::IUpdate> IUpdatePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IUpdate> IUpdatePrx;
void __patch(IUpdatePtr&, const ::Ice::ObjectPtr&);

class Save;
bool operator==(const Save&, const Save&);
bool operator<(const Save&, const Save&);
::Ice::Object* upCast(::omero::api::Save*);
typedef ::IceInternal::Handle< ::omero::api::Save> SavePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::Save> SavePrx;
void __patch(SavePtr&, const ::Ice::ObjectPtr&);

class SaveRsp;
bool operator==(const SaveRsp&, const SaveRsp&);
bool operator<(const SaveRsp&, const SaveRsp&);
::Ice::Object* upCast(::omero::api::SaveRsp*);
typedef ::IceInternal::Handle< ::omero::api::SaveRsp> SaveRspPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::SaveRsp> SaveRspPrx;
void __patch(SaveRspPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_IUpdate_saveObject : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IUpdate_saveObject> AMI_IUpdate_saveObjectPtr;

class AMD_IUpdate_saveObject : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IUpdate_saveObject> AMD_IUpdate_saveObjectPtr;

class AMI_IUpdate_saveCollection : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IUpdate_saveCollection> AMI_IUpdate_saveCollectionPtr;

class AMD_IUpdate_saveCollection : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IUpdate_saveCollection> AMD_IUpdate_saveCollectionPtr;

class AMI_IUpdate_saveAndReturnObject : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;

    void __response(const ::omero::model::IObjectPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IUpdate_saveAndReturnObject> AMI_IUpdate_saveAndReturnObjectPtr;

class AMD_IUpdate_saveAndReturnObject : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IUpdate_saveAndReturnObject> AMD_IUpdate_saveAndReturnObjectPtr;

class AMI_IUpdate_saveArray : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IUpdate_saveArray> AMI_IUpdate_saveArrayPtr;

class AMD_IUpdate_saveArray : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IUpdate_saveArray> AMD_IUpdate_saveArrayPtr;

class AMI_IUpdate_saveAndReturnArray : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IUpdate_saveAndReturnArray> AMI_IUpdate_saveAndReturnArrayPtr;

class AMD_IUpdate_saveAndReturnArray : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IUpdate_saveAndReturnArray> AMD_IUpdate_saveAndReturnArrayPtr;

class AMI_IUpdate_saveAndReturnIds : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::sys::LongList&) = 0;

    void __response(const ::omero::sys::LongList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IUpdate_saveAndReturnIds> AMI_IUpdate_saveAndReturnIdsPtr;

class AMD_IUpdate_saveAndReturnIds : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::sys::LongList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IUpdate_saveAndReturnIds> AMD_IUpdate_saveAndReturnIdsPtr;

class AMI_IUpdate_deleteObject : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IUpdate_deleteObject> AMI_IUpdate_deleteObjectPtr;

class AMD_IUpdate_deleteObject : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IUpdate_deleteObject> AMD_IUpdate_deleteObjectPtr;

class AMI_IUpdate_indexObject : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IUpdate_indexObject> AMI_IUpdate_indexObjectPtr;

class AMD_IUpdate_indexObject : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IUpdate_indexObject> AMD_IUpdate_indexObjectPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_IUpdate_saveObject : public ::omero::api::AMD_IUpdate_saveObject, public ::IceInternal::IncomingAsync
{
public:

    AMD_IUpdate_saveObject(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IUpdate_saveCollection : public ::omero::api::AMD_IUpdate_saveCollection, public ::IceInternal::IncomingAsync
{
public:

    AMD_IUpdate_saveCollection(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IUpdate_saveAndReturnObject : public ::omero::api::AMD_IUpdate_saveAndReturnObject, public ::IceInternal::IncomingAsync
{
public:

    AMD_IUpdate_saveAndReturnObject(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::IObjectPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IUpdate_saveArray : public ::omero::api::AMD_IUpdate_saveArray, public ::IceInternal::IncomingAsync
{
public:

    AMD_IUpdate_saveArray(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IUpdate_saveAndReturnArray : public ::omero::api::AMD_IUpdate_saveAndReturnArray, public ::IceInternal::IncomingAsync
{
public:

    AMD_IUpdate_saveAndReturnArray(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IUpdate_saveAndReturnIds : public ::omero::api::AMD_IUpdate_saveAndReturnIds, public ::IceInternal::IncomingAsync
{
public:

    AMD_IUpdate_saveAndReturnIds(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::sys::LongList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IUpdate_deleteObject : public ::omero::api::AMD_IUpdate_deleteObject, public ::IceInternal::IncomingAsync
{
public:

    AMD_IUpdate_deleteObject(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IUpdate_indexObject : public ::omero::api::AMD_IUpdate_indexObject, public ::IceInternal::IncomingAsync
{
public:

    AMD_IUpdate_indexObject(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_IUpdate_saveObject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IUpdate_saveObject_Base> Callback_IUpdate_saveObjectPtr;

class Callback_IUpdate_saveCollection_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IUpdate_saveCollection_Base> Callback_IUpdate_saveCollectionPtr;

class Callback_IUpdate_saveAndReturnObject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IUpdate_saveAndReturnObject_Base> Callback_IUpdate_saveAndReturnObjectPtr;

class Callback_IUpdate_saveArray_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IUpdate_saveArray_Base> Callback_IUpdate_saveArrayPtr;

class Callback_IUpdate_saveAndReturnArray_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IUpdate_saveAndReturnArray_Base> Callback_IUpdate_saveAndReturnArrayPtr;

class Callback_IUpdate_saveAndReturnIds_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IUpdate_saveAndReturnIds_Base> Callback_IUpdate_saveAndReturnIdsPtr;

class Callback_IUpdate_deleteObject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IUpdate_deleteObject_Base> Callback_IUpdate_deleteObjectPtr;

class Callback_IUpdate_indexObject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IUpdate_indexObject_Base> Callback_IUpdate_indexObjectPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class IUpdate : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    void saveObject(const ::omero::model::IObjectPtr& obj)
    {
        saveObject(obj, 0);
    }
    void saveObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx)
    {
        saveObject(obj, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saveObject(const ::omero::model::IObjectPtr& obj, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveObject(obj, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveObject(const ::omero::model::IObjectPtr& obj, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveObject(obj, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saveObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveObject(obj, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveObject(obj, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_saveObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_saveObject(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_saveObject(obj, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_saveObject(const ::omero::model::IObjectPtr& obj)
    {
        return begin_saveObject(obj, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx)
    {
        return begin_saveObject(obj, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveObject(const ::omero::model::IObjectPtr& obj, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveObject(obj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveObject(obj, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveObject(const ::omero::model::IObjectPtr& obj, const ::omero::api::Callback_IUpdate_saveObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveObject(obj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::omero::api::Callback_IUpdate_saveObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveObject(obj, &__ctx, __del, __cookie);
    }

    void end_saveObject(const ::Ice::AsyncResultPtr&);
    
private:

    void saveObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saveObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool saveObject_async(const ::omero::api::AMI_IUpdate_saveObjectPtr&, const ::omero::model::IObjectPtr&);
    bool saveObject_async(const ::omero::api::AMI_IUpdate_saveObjectPtr&, const ::omero::model::IObjectPtr&, const ::Ice::Context&);

    void saveCollection(const ::omero::api::IObjectList& objs)
    {
        saveCollection(objs, 0);
    }
    void saveCollection(const ::omero::api::IObjectList& objs, const ::Ice::Context& __ctx)
    {
        saveCollection(objs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saveCollection(const ::omero::api::IObjectList& objs, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveCollection(objs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveCollection(const ::omero::api::IObjectList& objs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveCollection(objs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saveCollection(const ::omero::api::IObjectList& objs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveCollection(objs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveCollection(const ::omero::api::IObjectList& objs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveCollection(objs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_saveCollection(const ::omero::api::IObjectList& objs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_saveCollection(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_saveCollection(objs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_saveCollection(const ::omero::api::IObjectList& objs)
    {
        return begin_saveCollection(objs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveCollection(const ::omero::api::IObjectList& objs, const ::Ice::Context& __ctx)
    {
        return begin_saveCollection(objs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveCollection(const ::omero::api::IObjectList& objs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveCollection(objs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveCollection(const ::omero::api::IObjectList& objs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveCollection(objs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveCollection(const ::omero::api::IObjectList& objs, const ::omero::api::Callback_IUpdate_saveCollectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveCollection(objs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveCollection(const ::omero::api::IObjectList& objs, const ::Ice::Context& __ctx, const ::omero::api::Callback_IUpdate_saveCollectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveCollection(objs, &__ctx, __del, __cookie);
    }

    void end_saveCollection(const ::Ice::AsyncResultPtr&);
    
private:

    void saveCollection(const ::omero::api::IObjectList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saveCollection(const ::omero::api::IObjectList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool saveCollection_async(const ::omero::api::AMI_IUpdate_saveCollectionPtr&, const ::omero::api::IObjectList&);
    bool saveCollection_async(const ::omero::api::AMI_IUpdate_saveCollectionPtr&, const ::omero::api::IObjectList&, const ::Ice::Context&);

    ::omero::model::IObjectPtr saveAndReturnObject(const ::omero::model::IObjectPtr& obj)
    {
        return saveAndReturnObject(obj, 0);
    }
    ::omero::model::IObjectPtr saveAndReturnObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx)
    {
        return saveAndReturnObject(obj, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saveAndReturnObject(const ::omero::model::IObjectPtr& obj, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveAndReturnObject(obj, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveAndReturnObject(const ::omero::model::IObjectPtr& obj, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveAndReturnObject(obj, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saveAndReturnObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveAndReturnObject(obj, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveAndReturnObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveAndReturnObject(obj, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_saveAndReturnObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::IObjectPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
                ::omero::model::IObjectPtr __ret;
                try
                {
                    __ret = __proxy->end_saveAndReturnObject(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::IObjectPtr&)> _response;
        };
        return begin_saveAndReturnObject(obj, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_saveAndReturnObject(const ::omero::model::IObjectPtr& obj)
    {
        return begin_saveAndReturnObject(obj, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx)
    {
        return begin_saveAndReturnObject(obj, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnObject(const ::omero::model::IObjectPtr& obj, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnObject(obj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnObject(obj, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnObject(const ::omero::model::IObjectPtr& obj, const ::omero::api::Callback_IUpdate_saveAndReturnObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnObject(obj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnObject(const ::omero::model::IObjectPtr& obj, const ::Ice::Context& __ctx, const ::omero::api::Callback_IUpdate_saveAndReturnObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnObject(obj, &__ctx, __del, __cookie);
    }

    ::omero::model::IObjectPtr end_saveAndReturnObject(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::IObjectPtr saveAndReturnObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saveAndReturnObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool saveAndReturnObject_async(const ::omero::api::AMI_IUpdate_saveAndReturnObjectPtr&, const ::omero::model::IObjectPtr&);
    bool saveAndReturnObject_async(const ::omero::api::AMI_IUpdate_saveAndReturnObjectPtr&, const ::omero::model::IObjectPtr&, const ::Ice::Context&);

    void saveArray(const ::omero::api::IObjectList& graph)
    {
        saveArray(graph, 0);
    }
    void saveArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx)
    {
        saveArray(graph, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saveArray(const ::omero::api::IObjectList& graph, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveArray(graph, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveArray(const ::omero::api::IObjectList& graph, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveArray(graph, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saveArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveArray(graph, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveArray(graph, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_saveArray(const ::omero::api::IObjectList& graph, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_saveArray(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_saveArray(graph, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_saveArray(const ::omero::api::IObjectList& graph)
    {
        return begin_saveArray(graph, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx)
    {
        return begin_saveArray(graph, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveArray(const ::omero::api::IObjectList& graph, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveArray(graph, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveArray(graph, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveArray(const ::omero::api::IObjectList& graph, const ::omero::api::Callback_IUpdate_saveArrayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveArray(graph, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::omero::api::Callback_IUpdate_saveArrayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveArray(graph, &__ctx, __del, __cookie);
    }

    void end_saveArray(const ::Ice::AsyncResultPtr&);
    
private:

    void saveArray(const ::omero::api::IObjectList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saveArray(const ::omero::api::IObjectList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool saveArray_async(const ::omero::api::AMI_IUpdate_saveArrayPtr&, const ::omero::api::IObjectList&);
    bool saveArray_async(const ::omero::api::AMI_IUpdate_saveArrayPtr&, const ::omero::api::IObjectList&, const ::Ice::Context&);

    ::omero::api::IObjectList saveAndReturnArray(const ::omero::api::IObjectList& graph)
    {
        return saveAndReturnArray(graph, 0);
    }
    ::omero::api::IObjectList saveAndReturnArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx)
    {
        return saveAndReturnArray(graph, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saveAndReturnArray(const ::omero::api::IObjectList& graph, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveAndReturnArray(graph, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveAndReturnArray(const ::omero::api::IObjectList& graph, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveAndReturnArray(graph, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saveAndReturnArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveAndReturnArray(graph, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveAndReturnArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveAndReturnArray(graph, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_saveAndReturnArray(const ::omero::api::IObjectList& graph, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_saveAndReturnArray(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_saveAndReturnArray(graph, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_saveAndReturnArray(const ::omero::api::IObjectList& graph)
    {
        return begin_saveAndReturnArray(graph, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx)
    {
        return begin_saveAndReturnArray(graph, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnArray(const ::omero::api::IObjectList& graph, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnArray(graph, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnArray(graph, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnArray(const ::omero::api::IObjectList& graph, const ::omero::api::Callback_IUpdate_saveAndReturnArrayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnArray(graph, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnArray(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::omero::api::Callback_IUpdate_saveAndReturnArrayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnArray(graph, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_saveAndReturnArray(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList saveAndReturnArray(const ::omero::api::IObjectList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saveAndReturnArray(const ::omero::api::IObjectList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool saveAndReturnArray_async(const ::omero::api::AMI_IUpdate_saveAndReturnArrayPtr&, const ::omero::api::IObjectList&);
    bool saveAndReturnArray_async(const ::omero::api::AMI_IUpdate_saveAndReturnArrayPtr&, const ::omero::api::IObjectList&, const ::Ice::Context&);

    ::omero::sys::LongList saveAndReturnIds(const ::omero::api::IObjectList& graph)
    {
        return saveAndReturnIds(graph, 0);
    }
    ::omero::sys::LongList saveAndReturnIds(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx)
    {
        return saveAndReturnIds(graph, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saveAndReturnIds(const ::omero::api::IObjectList& graph, const ::IceInternal::Function<void (const ::omero::sys::LongList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveAndReturnIds(graph, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveAndReturnIds(const ::omero::api::IObjectList& graph, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveAndReturnIds(graph, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saveAndReturnIds(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::LongList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveAndReturnIds(graph, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveAndReturnIds(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveAndReturnIds(graph, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_saveAndReturnIds(const ::omero::api::IObjectList& graph, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::LongList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::LongList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
                ::omero::sys::LongList __ret;
                try
                {
                    __ret = __proxy->end_saveAndReturnIds(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::LongList&)> _response;
        };
        return begin_saveAndReturnIds(graph, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_saveAndReturnIds(const ::omero::api::IObjectList& graph)
    {
        return begin_saveAndReturnIds(graph, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnIds(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx)
    {
        return begin_saveAndReturnIds(graph, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnIds(const ::omero::api::IObjectList& graph, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnIds(graph, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnIds(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnIds(graph, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnIds(const ::omero::api::IObjectList& graph, const ::omero::api::Callback_IUpdate_saveAndReturnIdsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnIds(graph, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveAndReturnIds(const ::omero::api::IObjectList& graph, const ::Ice::Context& __ctx, const ::omero::api::Callback_IUpdate_saveAndReturnIdsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveAndReturnIds(graph, &__ctx, __del, __cookie);
    }

    ::omero::sys::LongList end_saveAndReturnIds(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::LongList saveAndReturnIds(const ::omero::api::IObjectList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saveAndReturnIds(const ::omero::api::IObjectList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool saveAndReturnIds_async(const ::omero::api::AMI_IUpdate_saveAndReturnIdsPtr&, const ::omero::api::IObjectList&);
    bool saveAndReturnIds_async(const ::omero::api::AMI_IUpdate_saveAndReturnIdsPtr&, const ::omero::api::IObjectList&, const ::Ice::Context&);

    void deleteObject(const ::omero::model::IObjectPtr& row)
    {
        deleteObject(row, 0);
    }
    void deleteObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx)
    {
        deleteObject(row, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteObject(const ::omero::model::IObjectPtr& row, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteObject(row, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteObject(const ::omero::model::IObjectPtr& row, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteObject(row, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteObject(row, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteObject(row, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deleteObject(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deleteObject(row, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteObject(const ::omero::model::IObjectPtr& row)
    {
        return begin_deleteObject(row, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx)
    {
        return begin_deleteObject(row, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteObject(const ::omero::model::IObjectPtr& row, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteObject(row, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteObject(row, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteObject(const ::omero::model::IObjectPtr& row, const ::omero::api::Callback_IUpdate_deleteObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteObject(row, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx, const ::omero::api::Callback_IUpdate_deleteObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteObject(row, &__ctx, __del, __cookie);
    }

    void end_deleteObject(const ::Ice::AsyncResultPtr&);
    
private:

    void deleteObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool deleteObject_async(const ::omero::api::AMI_IUpdate_deleteObjectPtr&, const ::omero::model::IObjectPtr&);
    bool deleteObject_async(const ::omero::api::AMI_IUpdate_deleteObjectPtr&, const ::omero::model::IObjectPtr&, const ::Ice::Context&);

    void indexObject(const ::omero::model::IObjectPtr& row)
    {
        indexObject(row, 0);
    }
    void indexObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx)
    {
        indexObject(row, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_indexObject(const ::omero::model::IObjectPtr& row, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_indexObject(row, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_indexObject(const ::omero::model::IObjectPtr& row, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_indexObject(row, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_indexObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_indexObject(row, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_indexObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_indexObject(row, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_indexObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_indexObject(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_indexObject(row, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_indexObject(const ::omero::model::IObjectPtr& row)
    {
        return begin_indexObject(row, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_indexObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx)
    {
        return begin_indexObject(row, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_indexObject(const ::omero::model::IObjectPtr& row, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_indexObject(row, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_indexObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_indexObject(row, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_indexObject(const ::omero::model::IObjectPtr& row, const ::omero::api::Callback_IUpdate_indexObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_indexObject(row, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_indexObject(const ::omero::model::IObjectPtr& row, const ::Ice::Context& __ctx, const ::omero::api::Callback_IUpdate_indexObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_indexObject(row, &__ctx, __del, __cookie);
    }

    void end_indexObject(const ::Ice::AsyncResultPtr&);
    
private:

    void indexObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_indexObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool indexObject_async(const ::omero::api::AMI_IUpdate_indexObjectPtr&, const ::omero::model::IObjectPtr&);
    bool indexObject_async(const ::omero::api::AMI_IUpdate_indexObjectPtr&, const ::omero::model::IObjectPtr&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<IUpdate> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_secure(bool __secure) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_twoway() const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_oneway() const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_batchOneway() const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_datagram() const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_batchDatagram() const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_compress(bool __compress) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_timeout(int __timeout) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IUpdate> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<IUpdate*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Save : virtual public ::IceProxy::omero::cmd::Request
{
public:
    
    ::IceInternal::ProxyHandle<Save> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_secure(bool __secure) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_twoway() const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_oneway() const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_batchOneway() const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_datagram() const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_batchDatagram() const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_compress(bool __compress) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Save> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Save*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SaveRsp : virtual public ::IceProxy::omero::cmd::Response
{
public:
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_secure(bool __secure) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_twoway() const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_oneway() const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_batchOneway() const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_datagram() const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_batchDatagram() const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_compress(bool __compress) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SaveRsp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SaveRsp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class IUpdate : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual void saveObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void saveCollection(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::IObjectPtr saveAndReturnObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void saveArray(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList saveAndReturnArray(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::LongList saveAndReturnIds(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deleteObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void indexObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Save : virtual public ::IceDelegate::omero::cmd::Request
{
public:
};

class SaveRsp : virtual public ::IceDelegate::omero::cmd::Response
{
public:
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class IUpdate : virtual public ::IceDelegate::omero::api::IUpdate,
                virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual void saveObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void saveCollection(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr saveAndReturnObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void saveArray(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList saveAndReturnArray(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::LongList saveAndReturnIds(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void indexObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Save : virtual public ::IceDelegate::omero::api::Save,
             virtual public ::IceDelegateM::omero::cmd::Request
{
public:
};

class SaveRsp : virtual public ::IceDelegate::omero::api::SaveRsp,
                virtual public ::IceDelegateM::omero::cmd::Response
{
public:
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class IUpdate : virtual public ::IceDelegate::omero::api::IUpdate,
                virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual void saveObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void saveCollection(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr saveAndReturnObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void saveArray(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList saveAndReturnArray(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::LongList saveAndReturnIds(const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void indexObject(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Save : virtual public ::IceDelegate::omero::api::Save,
             virtual public ::IceDelegateD::omero::cmd::Request
{
public:
};

class SaveRsp : virtual public ::IceDelegate::omero::api::SaveRsp,
                virtual public ::IceDelegateD::omero::cmd::Response
{
public:
};

}

}

}

namespace omero
{

namespace api
{

class IUpdate : virtual public ::omero::api::ServiceInterface
{
public:

    typedef IUpdatePrx ProxyType;
    typedef IUpdatePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void saveObject_async(const ::omero::api::AMD_IUpdate_saveObjectPtr&, const ::omero::model::IObjectPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saveObject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saveCollection_async(const ::omero::api::AMD_IUpdate_saveCollectionPtr&, const ::omero::api::IObjectList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saveCollection(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saveAndReturnObject_async(const ::omero::api::AMD_IUpdate_saveAndReturnObjectPtr&, const ::omero::model::IObjectPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saveAndReturnObject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saveArray_async(const ::omero::api::AMD_IUpdate_saveArrayPtr&, const ::omero::api::IObjectList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saveArray(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saveAndReturnArray_async(const ::omero::api::AMD_IUpdate_saveAndReturnArrayPtr&, const ::omero::api::IObjectList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saveAndReturnArray(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saveAndReturnIds_async(const ::omero::api::AMD_IUpdate_saveAndReturnIdsPtr&, const ::omero::api::IObjectList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saveAndReturnIds(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void deleteObject_async(const ::omero::api::AMD_IUpdate_deleteObjectPtr&, const ::omero::model::IObjectPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteObject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void indexObject_async(const ::omero::api::AMD_IUpdate_indexObjectPtr&, const ::omero::model::IObjectPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___indexObject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const IUpdate& l, const IUpdate& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IUpdate& l, const IUpdate& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Save : public ::omero::cmd::Request, public IceInternal::GCShared
{
public:

    typedef SavePrx ProxyType;
    typedef SavePtr PointerType;

    Save()
    {
    }

    explicit Save(const ::omero::model::IObjectPtr& __ice_obj) :
        obj(__ice_obj)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Request::__writeImpl;
    using ::omero::cmd::Request::__readImpl;
    #endif

public:

    ::omero::model::IObjectPtr obj;

protected:

    virtual ~Save() {}

    friend class Save__staticInit;
};

class Save__staticInit
{
public:

    ::omero::api::Save _init;
};

static Save__staticInit _Save_init;

inline bool operator==(const Save& l, const Save& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Save& l, const Save& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class SaveRsp : public ::omero::cmd::Response, public IceInternal::GCShared
{
public:

    typedef SaveRspPrx ProxyType;
    typedef SaveRspPtr PointerType;

    SaveRsp()
    {
    }

    explicit SaveRsp(const ::omero::model::IObjectPtr& __ice_obj) :
        obj(__ice_obj)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Response::__writeImpl;
    using ::omero::cmd::Response::__readImpl;
    #endif

public:

    ::omero::model::IObjectPtr obj;

protected:

    virtual ~SaveRsp() {}
};

inline bool operator==(const SaveRsp& l, const SaveRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SaveRsp& l, const SaveRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_IUpdate_saveObject : public Callback_IUpdate_saveObject_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IUpdate_saveObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saveObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IUpdate_saveObjectPtr
newCallback_IUpdate_saveObject(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_saveObjectPtr
newCallback_IUpdate_saveObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveObject<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IUpdate_saveObjectPtr
newCallback_IUpdate_saveObject(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_saveObjectPtr
newCallback_IUpdate_saveObject(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveObject<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IUpdate_saveObject : public Callback_IUpdate_saveObject_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IUpdate_saveObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saveObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IUpdate_saveObjectPtr
newCallback_IUpdate_saveObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveObjectPtr
newCallback_IUpdate_saveObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveObjectPtr
newCallback_IUpdate_saveObject(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveObjectPtr
newCallback_IUpdate_saveObject(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IUpdate_saveCollection : public Callback_IUpdate_saveCollection_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IUpdate_saveCollection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saveCollection(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IUpdate_saveCollectionPtr
newCallback_IUpdate_saveCollection(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveCollection<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_saveCollectionPtr
newCallback_IUpdate_saveCollection(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveCollection<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IUpdate_saveCollectionPtr
newCallback_IUpdate_saveCollection(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveCollection<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_saveCollectionPtr
newCallback_IUpdate_saveCollection(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveCollection<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IUpdate_saveCollection : public Callback_IUpdate_saveCollection_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IUpdate_saveCollection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saveCollection(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IUpdate_saveCollectionPtr
newCallback_IUpdate_saveCollection(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveCollection<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveCollectionPtr
newCallback_IUpdate_saveCollection(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveCollection<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveCollectionPtr
newCallback_IUpdate_saveCollection(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveCollection<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveCollectionPtr
newCallback_IUpdate_saveCollection(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveCollection<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IUpdate_saveAndReturnObject : public Callback_IUpdate_saveAndReturnObject_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&);

    CallbackNC_IUpdate_saveAndReturnObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_saveAndReturnObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IUpdate_saveAndReturnObjectPtr
newCallback_IUpdate_saveAndReturnObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveAndReturnObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_saveAndReturnObjectPtr
newCallback_IUpdate_saveAndReturnObject(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveAndReturnObject<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IUpdate_saveAndReturnObject : public Callback_IUpdate_saveAndReturnObject_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&, const CT&);

    Callback_IUpdate_saveAndReturnObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_saveAndReturnObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IUpdate_saveAndReturnObjectPtr
newCallback_IUpdate_saveAndReturnObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveAndReturnObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveAndReturnObjectPtr
newCallback_IUpdate_saveAndReturnObject(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveAndReturnObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IUpdate_saveArray : public Callback_IUpdate_saveArray_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IUpdate_saveArray(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saveArray(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IUpdate_saveArrayPtr
newCallback_IUpdate_saveArray(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveArray<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_saveArrayPtr
newCallback_IUpdate_saveArray(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveArray<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IUpdate_saveArrayPtr
newCallback_IUpdate_saveArray(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveArray<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_saveArrayPtr
newCallback_IUpdate_saveArray(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveArray<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IUpdate_saveArray : public Callback_IUpdate_saveArray_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IUpdate_saveArray(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saveArray(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IUpdate_saveArrayPtr
newCallback_IUpdate_saveArray(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveArray<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveArrayPtr
newCallback_IUpdate_saveArray(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveArray<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveArrayPtr
newCallback_IUpdate_saveArray(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveArray<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveArrayPtr
newCallback_IUpdate_saveArray(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveArray<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IUpdate_saveAndReturnArray : public Callback_IUpdate_saveAndReturnArray_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IUpdate_saveAndReturnArray(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_saveAndReturnArray(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IUpdate_saveAndReturnArrayPtr
newCallback_IUpdate_saveAndReturnArray(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveAndReturnArray<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_saveAndReturnArrayPtr
newCallback_IUpdate_saveAndReturnArray(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveAndReturnArray<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IUpdate_saveAndReturnArray : public Callback_IUpdate_saveAndReturnArray_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IUpdate_saveAndReturnArray(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_saveAndReturnArray(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IUpdate_saveAndReturnArrayPtr
newCallback_IUpdate_saveAndReturnArray(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveAndReturnArray<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveAndReturnArrayPtr
newCallback_IUpdate_saveAndReturnArray(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveAndReturnArray<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IUpdate_saveAndReturnIds : public Callback_IUpdate_saveAndReturnIds_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::LongList&);

    CallbackNC_IUpdate_saveAndReturnIds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::LongList __ret;
        try
        {
            __ret = __proxy->end_saveAndReturnIds(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IUpdate_saveAndReturnIdsPtr
newCallback_IUpdate_saveAndReturnIds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::LongList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveAndReturnIds<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_saveAndReturnIdsPtr
newCallback_IUpdate_saveAndReturnIds(T* instance, void (T::*cb)(const ::omero::sys::LongList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_saveAndReturnIds<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IUpdate_saveAndReturnIds : public Callback_IUpdate_saveAndReturnIds_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::LongList&, const CT&);

    Callback_IUpdate_saveAndReturnIds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::LongList __ret;
        try
        {
            __ret = __proxy->end_saveAndReturnIds(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IUpdate_saveAndReturnIdsPtr
newCallback_IUpdate_saveAndReturnIds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::LongList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveAndReturnIds<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_saveAndReturnIdsPtr
newCallback_IUpdate_saveAndReturnIds(T* instance, void (T::*cb)(const ::omero::sys::LongList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_saveAndReturnIds<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IUpdate_deleteObject : public Callback_IUpdate_deleteObject_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IUpdate_deleteObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IUpdate_deleteObjectPtr
newCallback_IUpdate_deleteObject(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_deleteObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_deleteObjectPtr
newCallback_IUpdate_deleteObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_deleteObject<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IUpdate_deleteObjectPtr
newCallback_IUpdate_deleteObject(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_deleteObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_deleteObjectPtr
newCallback_IUpdate_deleteObject(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_deleteObject<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IUpdate_deleteObject : public Callback_IUpdate_deleteObject_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IUpdate_deleteObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IUpdate_deleteObjectPtr
newCallback_IUpdate_deleteObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_deleteObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_deleteObjectPtr
newCallback_IUpdate_deleteObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_deleteObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_deleteObjectPtr
newCallback_IUpdate_deleteObject(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_deleteObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_deleteObjectPtr
newCallback_IUpdate_deleteObject(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_deleteObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IUpdate_indexObject : public Callback_IUpdate_indexObject_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IUpdate_indexObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_indexObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IUpdate_indexObjectPtr
newCallback_IUpdate_indexObject(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_indexObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_indexObjectPtr
newCallback_IUpdate_indexObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_indexObject<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IUpdate_indexObjectPtr
newCallback_IUpdate_indexObject(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_indexObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IUpdate_indexObjectPtr
newCallback_IUpdate_indexObject(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IUpdate_indexObject<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IUpdate_indexObject : public Callback_IUpdate_indexObject_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IUpdate_indexObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IUpdatePrx __proxy = ::omero::api::IUpdatePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_indexObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IUpdate_indexObjectPtr
newCallback_IUpdate_indexObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_indexObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_indexObjectPtr
newCallback_IUpdate_indexObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_indexObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_indexObjectPtr
newCallback_IUpdate_indexObject(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_indexObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IUpdate_indexObjectPtr
newCallback_IUpdate_indexObject(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IUpdate_indexObject<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
