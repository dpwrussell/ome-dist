// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IDelete.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IDelete_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IDelete_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ModelF.h>
#include <omero/ServicesF.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

namespace _cpp_delete
{

class DeleteReport;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::_cpp_delete::DeleteReport>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::_cpp_delete::DeleteReport*);

class DeleteHandle;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::_cpp_delete::DeleteHandle>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::_cpp_delete::DeleteHandle*);

}

class IDelete;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IDelete>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IDelete*);

}

}

}

namespace omero
{

namespace api
{

namespace _cpp_delete
{

class DeleteReport;
bool operator==(const DeleteReport&, const DeleteReport&);
bool operator<(const DeleteReport&, const DeleteReport&);
::Ice::Object* upCast(::omero::api::_cpp_delete::DeleteReport*);
typedef ::IceInternal::Handle< ::omero::api::_cpp_delete::DeleteReport> DeleteReportPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::_cpp_delete::DeleteReport> DeleteReportPrx;
void __patch(DeleteReportPtr&, const ::Ice::ObjectPtr&);

class DeleteHandle;
bool operator==(const DeleteHandle&, const DeleteHandle&);
bool operator<(const DeleteHandle&, const DeleteHandle&);
::Ice::Object* upCast(::omero::api::_cpp_delete::DeleteHandle*);
typedef ::IceInternal::Handle< ::omero::api::_cpp_delete::DeleteHandle> DeleteHandlePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::_cpp_delete::DeleteHandle> DeleteHandlePrx;
void __patch(DeleteHandlePtr&, const ::Ice::ObjectPtr&);

}

class IDelete;
bool operator==(const IDelete&, const IDelete&);
bool operator<(const IDelete&, const IDelete&);
::Ice::Object* upCast(::omero::api::IDelete*);
typedef ::IceInternal::Handle< ::omero::api::IDelete> IDeletePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IDelete> IDeletePrx;
void __patch(IDeletePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

namespace _cpp_delete
{

const ::std::string ORPHAN = "ORPHAN";

const ::std::string REAP = "REAP";

const ::std::string SOFT = "SOFT";

const ::std::string HARD = "HARD";

struct DeleteCommand
{
    ::std::string type;
    ::Ice::Long id;
    ::omero::api::StringStringMap options;
};

typedef ::std::vector< ::omero::api::_cpp_delete::DeleteCommand> DeleteCommands;

typedef ::std::vector< ::omero::api::_cpp_delete::DeleteReportPtr> DeleteReports;

}

}

}

namespace Ice
{
template<>
struct StreamableTraits< ::omero::api::_cpp_delete::DeleteCommand>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::omero::api::_cpp_delete::DeleteCommand, S>
{
    static void write(S* __os, const ::omero::api::_cpp_delete::DeleteCommand& v)
    {
        __os->write(v.type);
        __os->write(v.id);
        __os->write(v.options);
    }
};

template<class S>
struct StreamReader< ::omero::api::_cpp_delete::DeleteCommand, S>
{
    static void read(S* __is, ::omero::api::_cpp_delete::DeleteCommand& v)
    {
        __is->read(v.type);
        __is->read(v.id);
        __is->read(v.options);
    }
};

}

namespace omero
{

namespace api
{

class AMI_IDelete_checkImageDelete : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IDelete_checkImageDelete> AMI_IDelete_checkImageDeletePtr;

class AMD_IDelete_checkImageDelete : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IDelete_checkImageDelete> AMD_IDelete_checkImageDeletePtr;

class AMI_IDelete_previewImageDelete : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IDelete_previewImageDelete> AMI_IDelete_previewImageDeletePtr;

class AMD_IDelete_previewImageDelete : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IDelete_previewImageDelete> AMD_IDelete_previewImageDeletePtr;

class AMI_IDelete_deleteImage : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IDelete_deleteImage> AMI_IDelete_deleteImagePtr;

class AMD_IDelete_deleteImage : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IDelete_deleteImage> AMD_IDelete_deleteImagePtr;

class AMI_IDelete_deleteImages : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IDelete_deleteImages> AMI_IDelete_deleteImagesPtr;

class AMD_IDelete_deleteImages : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IDelete_deleteImages> AMD_IDelete_deleteImagesPtr;

class AMI_IDelete_deleteImagesByDataset : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IDelete_deleteImagesByDataset> AMI_IDelete_deleteImagesByDatasetPtr;

class AMD_IDelete_deleteImagesByDataset : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IDelete_deleteImagesByDataset> AMD_IDelete_deleteImagesByDatasetPtr;

class AMI_IDelete_deleteSettings : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IDelete_deleteSettings> AMI_IDelete_deleteSettingsPtr;

class AMD_IDelete_deleteSettings : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IDelete_deleteSettings> AMD_IDelete_deleteSettingsPtr;

class AMI_IDelete_deletePlate : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IDelete_deletePlate> AMI_IDelete_deletePlatePtr;

class AMD_IDelete_deletePlate : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IDelete_deletePlate> AMD_IDelete_deletePlatePtr;

class AMI_IDelete_availableCommands : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::_cpp_delete::DeleteCommands&) = 0;

    void __response(const ::omero::api::_cpp_delete::DeleteCommands& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IDelete_availableCommands> AMI_IDelete_availableCommandsPtr;

class AMD_IDelete_availableCommands : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::_cpp_delete::DeleteCommands&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IDelete_availableCommands> AMD_IDelete_availableCommandsPtr;

class AMI_IDelete_queueDelete : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::_cpp_delete::DeleteHandlePrx&) = 0;

    void __response(const ::omero::api::_cpp_delete::DeleteHandlePrx& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IDelete_queueDelete> AMI_IDelete_queueDeletePtr;

class AMD_IDelete_queueDelete : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::_cpp_delete::DeleteHandlePrx&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IDelete_queueDelete> AMD_IDelete_queueDeletePtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_IDelete_checkImageDelete : public ::omero::api::AMD_IDelete_checkImageDelete, public ::IceInternal::IncomingAsync
{
public:

    AMD_IDelete_checkImageDelete(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IDelete_previewImageDelete : public ::omero::api::AMD_IDelete_previewImageDelete, public ::IceInternal::IncomingAsync
{
public:

    AMD_IDelete_previewImageDelete(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IDelete_deleteImage : public ::omero::api::AMD_IDelete_deleteImage, public ::IceInternal::IncomingAsync
{
public:

    AMD_IDelete_deleteImage(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IDelete_deleteImages : public ::omero::api::AMD_IDelete_deleteImages, public ::IceInternal::IncomingAsync
{
public:

    AMD_IDelete_deleteImages(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IDelete_deleteImagesByDataset : public ::omero::api::AMD_IDelete_deleteImagesByDataset, public ::IceInternal::IncomingAsync
{
public:

    AMD_IDelete_deleteImagesByDataset(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IDelete_deleteSettings : public ::omero::api::AMD_IDelete_deleteSettings, public ::IceInternal::IncomingAsync
{
public:

    AMD_IDelete_deleteSettings(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IDelete_deletePlate : public ::omero::api::AMD_IDelete_deletePlate, public ::IceInternal::IncomingAsync
{
public:

    AMD_IDelete_deletePlate(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IDelete_availableCommands : public ::omero::api::AMD_IDelete_availableCommands, public ::IceInternal::IncomingAsync
{
public:

    AMD_IDelete_availableCommands(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::_cpp_delete::DeleteCommands&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IDelete_queueDelete : public ::omero::api::AMD_IDelete_queueDelete, public ::IceInternal::IncomingAsync
{
public:

    AMD_IDelete_queueDelete(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::_cpp_delete::DeleteHandlePrx&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

namespace _cpp_delete
{

class Callback_DeleteHandle_commands_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DeleteHandle_commands_Base> Callback_DeleteHandle_commandsPtr;

class Callback_DeleteHandle_report_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DeleteHandle_report_Base> Callback_DeleteHandle_reportPtr;

class Callback_DeleteHandle_finished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DeleteHandle_finished_Base> Callback_DeleteHandle_finishedPtr;

class Callback_DeleteHandle_errors_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DeleteHandle_errors_Base> Callback_DeleteHandle_errorsPtr;

class Callback_DeleteHandle_cancel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DeleteHandle_cancel_Base> Callback_DeleteHandle_cancelPtr;

class Callback_DeleteHandle_close_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DeleteHandle_close_Base> Callback_DeleteHandle_closePtr;

}

class Callback_IDelete_checkImageDelete_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IDelete_checkImageDelete_Base> Callback_IDelete_checkImageDeletePtr;

class Callback_IDelete_previewImageDelete_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IDelete_previewImageDelete_Base> Callback_IDelete_previewImageDeletePtr;

class Callback_IDelete_deleteImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IDelete_deleteImage_Base> Callback_IDelete_deleteImagePtr;

class Callback_IDelete_deleteImages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IDelete_deleteImages_Base> Callback_IDelete_deleteImagesPtr;

class Callback_IDelete_deleteImagesByDataset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IDelete_deleteImagesByDataset_Base> Callback_IDelete_deleteImagesByDatasetPtr;

class Callback_IDelete_deleteSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IDelete_deleteSettings_Base> Callback_IDelete_deleteSettingsPtr;

class Callback_IDelete_deletePlate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IDelete_deletePlate_Base> Callback_IDelete_deletePlatePtr;

class Callback_IDelete_availableCommands_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IDelete_availableCommands_Base> Callback_IDelete_availableCommandsPtr;

class Callback_IDelete_queueDelete_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IDelete_queueDelete_Base> Callback_IDelete_queueDeletePtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

namespace _cpp_delete
{

class DeleteReport : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_secure(bool __secure) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_twoway() const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_oneway() const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_batchOneway() const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_datagram() const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_batchDatagram() const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_compress(bool __compress) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteReport> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DeleteReport*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DeleteHandle : virtual public ::IceProxy::Ice::Object
{
public:

    ICE_DEPRECATED_API ::omero::api::_cpp_delete::DeleteCommands commands()
    {
        return commands(0);
    }
    ICE_DEPRECATED_API ::omero::api::_cpp_delete::DeleteCommands commands(const ::Ice::Context& __ctx)
    {
        return commands(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_commands(const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteCommands&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_commands(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_commands(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_commands(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_commands(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteCommands&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_commands(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_commands(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_commands(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_commands(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteCommands&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::_cpp_delete::DeleteCommands&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
                ::omero::api::_cpp_delete::DeleteCommands __ret;
                try
                {
                    __ret = __proxy->end_commands(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::_cpp_delete::DeleteCommands&)> _response;
        };
        return begin_commands(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_commands()
    {
        return begin_commands(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_commands(const ::Ice::Context& __ctx)
    {
        return begin_commands(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_commands(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_commands(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_commands(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_commands(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_commands(const ::omero::api::_cpp_delete::Callback_DeleteHandle_commandsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_commands(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_commands(const ::Ice::Context& __ctx, const ::omero::api::_cpp_delete::Callback_DeleteHandle_commandsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_commands(&__ctx, __del, __cookie);
    }

    ::omero::api::_cpp_delete::DeleteCommands end_commands(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::_cpp_delete::DeleteCommands commands(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_commands(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ICE_DEPRECATED_API ::omero::api::_cpp_delete::DeleteReports report()
    {
        return report(0);
    }
    ICE_DEPRECATED_API ::omero::api::_cpp_delete::DeleteReports report(const ::Ice::Context& __ctx)
    {
        return report(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_report(const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteReports&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_report(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_report(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_report(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_report(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteReports&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_report(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_report(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_report(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_report(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteReports&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::_cpp_delete::DeleteReports&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
                ::omero::api::_cpp_delete::DeleteReports __ret;
                try
                {
                    __ret = __proxy->end_report(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::_cpp_delete::DeleteReports&)> _response;
        };
        return begin_report(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_report()
    {
        return begin_report(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_report(const ::Ice::Context& __ctx)
    {
        return begin_report(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_report(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_report(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_report(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_report(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_report(const ::omero::api::_cpp_delete::Callback_DeleteHandle_reportPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_report(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_report(const ::Ice::Context& __ctx, const ::omero::api::_cpp_delete::Callback_DeleteHandle_reportPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_report(&__ctx, __del, __cookie);
    }

    ::omero::api::_cpp_delete::DeleteReports end_report(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::_cpp_delete::DeleteReports report(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_report(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ICE_DEPRECATED_API bool finished()
    {
        return finished(0);
    }
    ICE_DEPRECATED_API bool finished(const ::Ice::Context& __ctx)
    {
        return finished(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finished(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finished(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finished(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finished(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finished(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finished(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finished(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finished(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_finished(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_finished(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_finished(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_finished()
    {
        return begin_finished(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::Ice::Context& __ctx)
    {
        return begin_finished(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::omero::api::_cpp_delete::Callback_DeleteHandle_finishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::Ice::Context& __ctx, const ::omero::api::_cpp_delete::Callback_DeleteHandle_finishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(&__ctx, __del, __cookie);
    }

    bool end_finished(const ::Ice::AsyncResultPtr&);
    
private:

    bool finished(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finished(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ICE_DEPRECATED_API ::Ice::Int errors()
    {
        return errors(0);
    }
    ICE_DEPRECATED_API ::Ice::Int errors(const ::Ice::Context& __ctx)
    {
        return errors(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_errors(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_errors(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_errors(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_errors(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_errors(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_errors(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_errors(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_errors(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_errors(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_errors(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_errors(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_errors()
    {
        return begin_errors(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_errors(const ::Ice::Context& __ctx)
    {
        return begin_errors(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_errors(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_errors(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_errors(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_errors(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_errors(const ::omero::api::_cpp_delete::Callback_DeleteHandle_errorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_errors(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_errors(const ::Ice::Context& __ctx, const ::omero::api::_cpp_delete::Callback_DeleteHandle_errorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_errors(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_errors(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int errors(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_errors(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ICE_DEPRECATED_API bool cancel()
    {
        return cancel(0);
    }
    ICE_DEPRECATED_API bool cancel(const ::Ice::Context& __ctx)
    {
        return cancel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_cancel(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_cancel(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_cancel(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_cancel(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_cancel(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_cancel()
    {
        return begin_cancel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx)
    {
        return begin_cancel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::omero::api::_cpp_delete::Callback_DeleteHandle_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::omero::api::_cpp_delete::Callback_DeleteHandle_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    bool end_cancel(const ::Ice::AsyncResultPtr&);
    
private:

    bool cancel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ICE_DEPRECATED_API void close()
    {
        close(0);
    }
    ICE_DEPRECATED_API void close(const ::Ice::Context& __ctx)
    {
        close(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_close(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_close(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_close(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_close(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_close(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_close(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_close(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_close(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_close()
    {
        return begin_close(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context& __ctx)
    {
        return begin_close(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::omero::api::_cpp_delete::Callback_DeleteHandle_closePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context& __ctx, const ::omero::api::_cpp_delete::Callback_DeleteHandle_closePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(&__ctx, __del, __cookie);
    }

    void end_close(const ::Ice::AsyncResultPtr&);
    
private:

    void close(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_secure(bool __secure) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_twoway() const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_oneway() const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_batchOneway() const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_datagram() const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_batchDatagram() const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_compress(bool __compress) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteHandle> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DeleteHandle*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

class IDelete : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    ICE_DEPRECATED_API ::omero::api::IObjectList checkImageDelete(::Ice::Long id, bool force)
    {
        return checkImageDelete(id, force, 0);
    }
    ICE_DEPRECATED_API ::omero::api::IObjectList checkImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx)
    {
        return checkImageDelete(id, force, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_checkImageDelete(::Ice::Long id, bool force, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkImageDelete(id, force, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkImageDelete(::Ice::Long id, bool force, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkImageDelete(id, force, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_checkImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkImageDelete(id, force, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkImageDelete(id, force, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_checkImageDelete(::Ice::Long id, bool force, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_checkImageDelete(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_checkImageDelete(id, force, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_checkImageDelete(::Ice::Long id, bool force)
    {
        return begin_checkImageDelete(id, force, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx)
    {
        return begin_checkImageDelete(id, force, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkImageDelete(::Ice::Long id, bool force, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkImageDelete(id, force, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkImageDelete(id, force, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkImageDelete(::Ice::Long id, bool force, const ::omero::api::Callback_IDelete_checkImageDeletePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkImageDelete(id, force, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::omero::api::Callback_IDelete_checkImageDeletePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkImageDelete(id, force, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_checkImageDelete(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList checkImageDelete(::Ice::Long, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_checkImageDelete(::Ice::Long, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool checkImageDelete_async(const ::omero::api::AMI_IDelete_checkImageDeletePtr&, ::Ice::Long, bool);
    bool checkImageDelete_async(const ::omero::api::AMI_IDelete_checkImageDeletePtr&, ::Ice::Long, bool, const ::Ice::Context&);

    ICE_DEPRECATED_API ::omero::api::IObjectList previewImageDelete(::Ice::Long id, bool force)
    {
        return previewImageDelete(id, force, 0);
    }
    ICE_DEPRECATED_API ::omero::api::IObjectList previewImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx)
    {
        return previewImageDelete(id, force, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_previewImageDelete(::Ice::Long id, bool force, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_previewImageDelete(id, force, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_previewImageDelete(::Ice::Long id, bool force, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_previewImageDelete(id, force, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_previewImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_previewImageDelete(id, force, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_previewImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_previewImageDelete(id, force, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_previewImageDelete(::Ice::Long id, bool force, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_previewImageDelete(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_previewImageDelete(id, force, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_previewImageDelete(::Ice::Long id, bool force)
    {
        return begin_previewImageDelete(id, force, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_previewImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx)
    {
        return begin_previewImageDelete(id, force, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_previewImageDelete(::Ice::Long id, bool force, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_previewImageDelete(id, force, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_previewImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_previewImageDelete(id, force, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_previewImageDelete(::Ice::Long id, bool force, const ::omero::api::Callback_IDelete_previewImageDeletePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_previewImageDelete(id, force, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_previewImageDelete(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::omero::api::Callback_IDelete_previewImageDeletePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_previewImageDelete(id, force, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_previewImageDelete(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList previewImageDelete(::Ice::Long, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_previewImageDelete(::Ice::Long, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool previewImageDelete_async(const ::omero::api::AMI_IDelete_previewImageDeletePtr&, ::Ice::Long, bool);
    bool previewImageDelete_async(const ::omero::api::AMI_IDelete_previewImageDeletePtr&, ::Ice::Long, bool, const ::Ice::Context&);

    ICE_DEPRECATED_API void deleteImage(::Ice::Long id, bool force)
    {
        deleteImage(id, force, 0);
    }
    ICE_DEPRECATED_API void deleteImage(::Ice::Long id, bool force, const ::Ice::Context& __ctx)
    {
        deleteImage(id, force, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteImage(::Ice::Long id, bool force, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteImage(id, force, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImage(::Ice::Long id, bool force, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteImage(id, force, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImage(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteImage(id, force, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImage(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteImage(id, force, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteImage(::Ice::Long id, bool force, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deleteImage(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deleteImage(id, force, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteImage(::Ice::Long id, bool force)
    {
        return begin_deleteImage(id, force, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteImage(::Ice::Long id, bool force, const ::Ice::Context& __ctx)
    {
        return begin_deleteImage(id, force, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteImage(::Ice::Long id, bool force, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImage(id, force, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImage(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImage(id, force, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImage(::Ice::Long id, bool force, const ::omero::api::Callback_IDelete_deleteImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImage(id, force, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImage(::Ice::Long id, bool force, const ::Ice::Context& __ctx, const ::omero::api::Callback_IDelete_deleteImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImage(id, force, &__ctx, __del, __cookie);
    }

    void end_deleteImage(const ::Ice::AsyncResultPtr&);
    
private:

    void deleteImage(::Ice::Long, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteImage(::Ice::Long, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool deleteImage_async(const ::omero::api::AMI_IDelete_deleteImagePtr&, ::Ice::Long, bool);
    bool deleteImage_async(const ::omero::api::AMI_IDelete_deleteImagePtr&, ::Ice::Long, bool, const ::Ice::Context&);

    ICE_DEPRECATED_API void deleteImages(const ::omero::api::LongList& ids, bool force)
    {
        deleteImages(ids, force, 0);
    }
    ICE_DEPRECATED_API void deleteImages(const ::omero::api::LongList& ids, bool force, const ::Ice::Context& __ctx)
    {
        deleteImages(ids, force, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteImages(const ::omero::api::LongList& ids, bool force, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteImages(ids, force, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImages(const ::omero::api::LongList& ids, bool force, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteImages(ids, force, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImages(const ::omero::api::LongList& ids, bool force, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteImages(ids, force, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImages(const ::omero::api::LongList& ids, bool force, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteImages(ids, force, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteImages(const ::omero::api::LongList& ids, bool force, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deleteImages(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deleteImages(ids, force, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteImages(const ::omero::api::LongList& ids, bool force)
    {
        return begin_deleteImages(ids, force, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteImages(const ::omero::api::LongList& ids, bool force, const ::Ice::Context& __ctx)
    {
        return begin_deleteImages(ids, force, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteImages(const ::omero::api::LongList& ids, bool force, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImages(ids, force, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImages(const ::omero::api::LongList& ids, bool force, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImages(ids, force, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImages(const ::omero::api::LongList& ids, bool force, const ::omero::api::Callback_IDelete_deleteImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImages(ids, force, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImages(const ::omero::api::LongList& ids, bool force, const ::Ice::Context& __ctx, const ::omero::api::Callback_IDelete_deleteImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImages(ids, force, &__ctx, __del, __cookie);
    }

    void end_deleteImages(const ::Ice::AsyncResultPtr&);
    
private:

    void deleteImages(const ::omero::api::LongList&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteImages(const ::omero::api::LongList&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool deleteImages_async(const ::omero::api::AMI_IDelete_deleteImagesPtr&, const ::omero::api::LongList&, bool);
    bool deleteImages_async(const ::omero::api::AMI_IDelete_deleteImagesPtr&, const ::omero::api::LongList&, bool, const ::Ice::Context&);

    ICE_DEPRECATED_API void deleteImagesByDataset(::Ice::Long datasetId, bool force)
    {
        deleteImagesByDataset(datasetId, force, 0);
    }
    ICE_DEPRECATED_API void deleteImagesByDataset(::Ice::Long datasetId, bool force, const ::Ice::Context& __ctx)
    {
        deleteImagesByDataset(datasetId, force, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteImagesByDataset(::Ice::Long datasetId, bool force, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteImagesByDataset(datasetId, force, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImagesByDataset(::Ice::Long datasetId, bool force, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteImagesByDataset(datasetId, force, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImagesByDataset(::Ice::Long datasetId, bool force, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteImagesByDataset(datasetId, force, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImagesByDataset(::Ice::Long datasetId, bool force, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteImagesByDataset(datasetId, force, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteImagesByDataset(::Ice::Long datasetId, bool force, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deleteImagesByDataset(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deleteImagesByDataset(datasetId, force, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteImagesByDataset(::Ice::Long datasetId, bool force)
    {
        return begin_deleteImagesByDataset(datasetId, force, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteImagesByDataset(::Ice::Long datasetId, bool force, const ::Ice::Context& __ctx)
    {
        return begin_deleteImagesByDataset(datasetId, force, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteImagesByDataset(::Ice::Long datasetId, bool force, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImagesByDataset(datasetId, force, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImagesByDataset(::Ice::Long datasetId, bool force, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImagesByDataset(datasetId, force, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImagesByDataset(::Ice::Long datasetId, bool force, const ::omero::api::Callback_IDelete_deleteImagesByDatasetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImagesByDataset(datasetId, force, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImagesByDataset(::Ice::Long datasetId, bool force, const ::Ice::Context& __ctx, const ::omero::api::Callback_IDelete_deleteImagesByDatasetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImagesByDataset(datasetId, force, &__ctx, __del, __cookie);
    }

    void end_deleteImagesByDataset(const ::Ice::AsyncResultPtr&);
    
private:

    void deleteImagesByDataset(::Ice::Long, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteImagesByDataset(::Ice::Long, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool deleteImagesByDataset_async(const ::omero::api::AMI_IDelete_deleteImagesByDatasetPtr&, ::Ice::Long, bool);
    bool deleteImagesByDataset_async(const ::omero::api::AMI_IDelete_deleteImagesByDatasetPtr&, ::Ice::Long, bool, const ::Ice::Context&);

    ICE_DEPRECATED_API void deleteSettings(::Ice::Long imageId)
    {
        deleteSettings(imageId, 0);
    }
    ICE_DEPRECATED_API void deleteSettings(::Ice::Long imageId, const ::Ice::Context& __ctx)
    {
        deleteSettings(imageId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteSettings(::Ice::Long imageId, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteSettings(imageId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteSettings(::Ice::Long imageId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteSettings(imageId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteSettings(::Ice::Long imageId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteSettings(imageId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteSettings(::Ice::Long imageId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteSettings(imageId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteSettings(::Ice::Long imageId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deleteSettings(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deleteSettings(imageId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteSettings(::Ice::Long imageId)
    {
        return begin_deleteSettings(imageId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteSettings(::Ice::Long imageId, const ::Ice::Context& __ctx)
    {
        return begin_deleteSettings(imageId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteSettings(::Ice::Long imageId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteSettings(imageId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteSettings(::Ice::Long imageId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteSettings(imageId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteSettings(::Ice::Long imageId, const ::omero::api::Callback_IDelete_deleteSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteSettings(imageId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteSettings(::Ice::Long imageId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IDelete_deleteSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteSettings(imageId, &__ctx, __del, __cookie);
    }

    void end_deleteSettings(const ::Ice::AsyncResultPtr&);
    
private:

    void deleteSettings(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteSettings(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool deleteSettings_async(const ::omero::api::AMI_IDelete_deleteSettingsPtr&, ::Ice::Long);
    bool deleteSettings_async(const ::omero::api::AMI_IDelete_deleteSettingsPtr&, ::Ice::Long, const ::Ice::Context&);

    ICE_DEPRECATED_API void deletePlate(::Ice::Long plateId)
    {
        deletePlate(plateId, 0);
    }
    ICE_DEPRECATED_API void deletePlate(::Ice::Long plateId, const ::Ice::Context& __ctx)
    {
        deletePlate(plateId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deletePlate(::Ice::Long plateId, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deletePlate(plateId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deletePlate(::Ice::Long plateId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deletePlate(plateId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deletePlate(::Ice::Long plateId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deletePlate(plateId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deletePlate(::Ice::Long plateId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deletePlate(plateId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deletePlate(::Ice::Long plateId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deletePlate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deletePlate(plateId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deletePlate(::Ice::Long plateId)
    {
        return begin_deletePlate(plateId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deletePlate(::Ice::Long plateId, const ::Ice::Context& __ctx)
    {
        return begin_deletePlate(plateId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deletePlate(::Ice::Long plateId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deletePlate(plateId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deletePlate(::Ice::Long plateId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deletePlate(plateId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deletePlate(::Ice::Long plateId, const ::omero::api::Callback_IDelete_deletePlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deletePlate(plateId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deletePlate(::Ice::Long plateId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IDelete_deletePlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deletePlate(plateId, &__ctx, __del, __cookie);
    }

    void end_deletePlate(const ::Ice::AsyncResultPtr&);
    
private:

    void deletePlate(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deletePlate(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool deletePlate_async(const ::omero::api::AMI_IDelete_deletePlatePtr&, ::Ice::Long);
    bool deletePlate_async(const ::omero::api::AMI_IDelete_deletePlatePtr&, ::Ice::Long, const ::Ice::Context&);

    ICE_DEPRECATED_API ::omero::api::_cpp_delete::DeleteCommands availableCommands()
    {
        return availableCommands(0);
    }
    ICE_DEPRECATED_API ::omero::api::_cpp_delete::DeleteCommands availableCommands(const ::Ice::Context& __ctx)
    {
        return availableCommands(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_availableCommands(const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteCommands&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_availableCommands(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_availableCommands(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_availableCommands(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_availableCommands(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteCommands&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_availableCommands(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_availableCommands(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_availableCommands(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_availableCommands(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteCommands&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::_cpp_delete::DeleteCommands&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
                ::omero::api::_cpp_delete::DeleteCommands __ret;
                try
                {
                    __ret = __proxy->end_availableCommands(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::_cpp_delete::DeleteCommands&)> _response;
        };
        return begin_availableCommands(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_availableCommands()
    {
        return begin_availableCommands(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_availableCommands(const ::Ice::Context& __ctx)
    {
        return begin_availableCommands(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_availableCommands(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_availableCommands(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_availableCommands(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_availableCommands(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_availableCommands(const ::omero::api::Callback_IDelete_availableCommandsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_availableCommands(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_availableCommands(const ::Ice::Context& __ctx, const ::omero::api::Callback_IDelete_availableCommandsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_availableCommands(&__ctx, __del, __cookie);
    }

    ::omero::api::_cpp_delete::DeleteCommands end_availableCommands(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::_cpp_delete::DeleteCommands availableCommands(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_availableCommands(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool availableCommands_async(const ::omero::api::AMI_IDelete_availableCommandsPtr&);
    bool availableCommands_async(const ::omero::api::AMI_IDelete_availableCommandsPtr&, const ::Ice::Context&);

    ICE_DEPRECATED_API ::omero::api::_cpp_delete::DeleteHandlePrx queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands)
    {
        return queueDelete(commands, 0);
    }
    ICE_DEPRECATED_API ::omero::api::_cpp_delete::DeleteHandlePrx queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands, const ::Ice::Context& __ctx)
    {
        return queueDelete(commands, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands, const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteHandlePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queueDelete(commands, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queueDelete(commands, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteHandlePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queueDelete(commands, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queueDelete(commands, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::_cpp_delete::DeleteHandlePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::_cpp_delete::DeleteHandlePrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
                ::omero::api::_cpp_delete::DeleteHandlePrx __ret;
                try
                {
                    __ret = __proxy->end_queueDelete(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::_cpp_delete::DeleteHandlePrx&)> _response;
        };
        return begin_queueDelete(commands, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands)
    {
        return begin_queueDelete(commands, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands, const ::Ice::Context& __ctx)
    {
        return begin_queueDelete(commands, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queueDelete(commands, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queueDelete(commands, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands, const ::omero::api::Callback_IDelete_queueDeletePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queueDelete(commands, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands& commands, const ::Ice::Context& __ctx, const ::omero::api::Callback_IDelete_queueDeletePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queueDelete(commands, &__ctx, __del, __cookie);
    }

    ::omero::api::_cpp_delete::DeleteHandlePrx end_queueDelete(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::_cpp_delete::DeleteHandlePrx queueDelete(const ::omero::api::_cpp_delete::DeleteCommands&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queueDelete(const ::omero::api::_cpp_delete::DeleteCommands&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool queueDelete_async(const ::omero::api::AMI_IDelete_queueDeletePtr&, const ::omero::api::_cpp_delete::DeleteCommands&);
    bool queueDelete_async(const ::omero::api::AMI_IDelete_queueDeletePtr&, const ::omero::api::_cpp_delete::DeleteCommands&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<IDelete> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_secure(bool __secure) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_twoway() const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_oneway() const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_batchOneway() const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_datagram() const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_batchDatagram() const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_compress(bool __compress) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_timeout(int __timeout) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IDelete> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<IDelete*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

namespace _cpp_delete
{

class DeleteReport : virtual public ::IceDelegate::Ice::Object
{
public:
};

class DeleteHandle : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::omero::api::_cpp_delete::DeleteCommands commands(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::_cpp_delete::DeleteReports report(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool finished(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int errors(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool cancel(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void close(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

class IDelete : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::IObjectList checkImageDelete(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList previewImageDelete(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deleteImage(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deleteImages(const ::omero::api::LongList&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deleteImagesByDataset(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deleteSettings(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deletePlate(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::_cpp_delete::DeleteCommands availableCommands(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::_cpp_delete::DeleteHandlePrx queueDelete(const ::omero::api::_cpp_delete::DeleteCommands&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

namespace _cpp_delete
{

class DeleteReport : virtual public ::IceDelegate::omero::api::_cpp_delete::DeleteReport,
                     virtual public ::IceDelegateM::Ice::Object
{
public:
};

class DeleteHandle : virtual public ::IceDelegate::omero::api::_cpp_delete::DeleteHandle,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::omero::api::_cpp_delete::DeleteCommands commands(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::_cpp_delete::DeleteReports report(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool finished(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int errors(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool cancel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void close(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

class IDelete : virtual public ::IceDelegate::omero::api::IDelete,
                virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::IObjectList checkImageDelete(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList previewImageDelete(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteImage(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteImages(const ::omero::api::LongList&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteImagesByDataset(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteSettings(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deletePlate(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::_cpp_delete::DeleteCommands availableCommands(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::_cpp_delete::DeleteHandlePrx queueDelete(const ::omero::api::_cpp_delete::DeleteCommands&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

namespace _cpp_delete
{

class DeleteReport : virtual public ::IceDelegate::omero::api::_cpp_delete::DeleteReport,
                     virtual public ::IceDelegateD::Ice::Object
{
public:
};

class DeleteHandle : virtual public ::IceDelegate::omero::api::_cpp_delete::DeleteHandle,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::omero::api::_cpp_delete::DeleteCommands commands(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::_cpp_delete::DeleteReports report(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool finished(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int errors(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool cancel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void close(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

class IDelete : virtual public ::IceDelegate::omero::api::IDelete,
                virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::IObjectList checkImageDelete(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList previewImageDelete(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteImage(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteImages(const ::omero::api::LongList&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteImagesByDataset(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteSettings(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deletePlate(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::_cpp_delete::DeleteCommands availableCommands(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::_cpp_delete::DeleteHandlePrx queueDelete(const ::omero::api::_cpp_delete::DeleteCommands&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

namespace _cpp_delete
{

class DeleteReport : virtual public ::Ice::Object
{
public:

    typedef DeleteReportPrx ProxyType;
    typedef DeleteReportPtr PointerType;

    DeleteReport()
    {
    }

    DeleteReport(const ::omero::api::_cpp_delete::DeleteCommand& __ice_command, const ::std::string& __ice_error, const ::std::string& __ice_warning, const ::omero::api::IdListMap& __ice_undeletedFiles, ::Ice::Int __ice_steps, ::Ice::Long __ice_scheduledDeletes, ::Ice::Long __ice_actualDeletes, ::Ice::Long __ice_start, const ::omero::api::LongArray& __ice_stepStarts, const ::omero::api::LongArray& __ice_stepStops, ::Ice::Long __ice_stop) :
        command(__ice_command),
        error(__ice_error),
        warning(__ice_warning),
        undeletedFiles(__ice_undeletedFiles),
        steps(__ice_steps),
        scheduledDeletes(__ice_scheduledDeletes),
        actualDeletes(__ice_actualDeletes),
        start(__ice_start),
        stepStarts(__ice_stepStarts),
        stepStops(__ice_stepStops),
        stop(__ice_stop)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::omero::api::_cpp_delete::DeleteCommand command;

    ::std::string error;

    ::std::string warning;

    ::omero::api::IdListMap undeletedFiles;

    ::Ice::Int steps;

    ::Ice::Long scheduledDeletes;

    ::Ice::Long actualDeletes;

    ::Ice::Long start;

    ::omero::api::LongArray stepStarts;

    ::omero::api::LongArray stepStops;

    ::Ice::Long stop;

protected:

    virtual ~DeleteReport() {}

    friend class DeleteReport__staticInit;
};

class DeleteReport__staticInit
{
public:

    ::omero::api::_cpp_delete::DeleteReport _init;
};

static DeleteReport__staticInit _DeleteReport_init;

inline bool operator==(const DeleteReport& l, const DeleteReport& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DeleteReport& l, const DeleteReport& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class DeleteHandle : virtual public ::Ice::Object
{
public:

    typedef DeleteHandlePrx ProxyType;
    typedef DeleteHandlePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    ICE_DEPRECATED_API virtual ::omero::api::_cpp_delete::DeleteCommands commands(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___commands(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual ::omero::api::_cpp_delete::DeleteReports report(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___report(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual bool finished(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finished(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual ::Ice::Int errors(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___errors(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual bool cancel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancel(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void close(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___close(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const DeleteHandle& l, const DeleteHandle& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DeleteHandle& l, const DeleteHandle& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

class IDelete : virtual public ::omero::api::ServiceInterface
{
public:

    typedef IDeletePrx ProxyType;
    typedef IDeletePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    ICE_DEPRECATED_API virtual void checkImageDelete_async(const ::omero::api::AMD_IDelete_checkImageDeletePtr&, ::Ice::Long, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___checkImageDelete(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void previewImageDelete_async(const ::omero::api::AMD_IDelete_previewImageDeletePtr&, ::Ice::Long, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___previewImageDelete(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void deleteImage_async(const ::omero::api::AMD_IDelete_deleteImagePtr&, ::Ice::Long, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteImage(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void deleteImages_async(const ::omero::api::AMD_IDelete_deleteImagesPtr&, const ::omero::api::LongList&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteImages(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void deleteImagesByDataset_async(const ::omero::api::AMD_IDelete_deleteImagesByDatasetPtr&, ::Ice::Long, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteImagesByDataset(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void deleteSettings_async(const ::omero::api::AMD_IDelete_deleteSettingsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void deletePlate_async(const ::omero::api::AMD_IDelete_deletePlatePtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deletePlate(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void availableCommands_async(const ::omero::api::AMD_IDelete_availableCommandsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___availableCommands(::IceInternal::Incoming&, const ::Ice::Current&);

    ICE_DEPRECATED_API virtual void queueDelete_async(const ::omero::api::AMD_IDelete_queueDeletePtr&, const ::omero::api::_cpp_delete::DeleteCommands&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queueDelete(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const IDelete& l, const IDelete& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IDelete& l, const IDelete& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

namespace _cpp_delete
{

template<class T>
class CallbackNC_DeleteHandle_commands : public Callback_DeleteHandle_commands_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::_cpp_delete::DeleteCommands&);

    CallbackNC_DeleteHandle_commands(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::api::_cpp_delete::DeleteCommands __ret;
        try
        {
            __ret = __proxy->end_commands(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DeleteHandle_commandsPtr
newCallback_DeleteHandle_commands(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteCommands&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_commands<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DeleteHandle_commandsPtr
newCallback_DeleteHandle_commands(T* instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteCommands&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_commands<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DeleteHandle_commands : public Callback_DeleteHandle_commands_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::_cpp_delete::DeleteCommands&, const CT&);

    Callback_DeleteHandle_commands(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::api::_cpp_delete::DeleteCommands __ret;
        try
        {
            __ret = __proxy->end_commands(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DeleteHandle_commandsPtr
newCallback_DeleteHandle_commands(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteCommands&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_commands<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DeleteHandle_commandsPtr
newCallback_DeleteHandle_commands(T* instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteCommands&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_commands<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DeleteHandle_report : public Callback_DeleteHandle_report_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::_cpp_delete::DeleteReports&);

    CallbackNC_DeleteHandle_report(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::api::_cpp_delete::DeleteReports __ret;
        try
        {
            __ret = __proxy->end_report(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DeleteHandle_reportPtr
newCallback_DeleteHandle_report(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteReports&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_report<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DeleteHandle_reportPtr
newCallback_DeleteHandle_report(T* instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteReports&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_report<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DeleteHandle_report : public Callback_DeleteHandle_report_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::_cpp_delete::DeleteReports&, const CT&);

    Callback_DeleteHandle_report(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::api::_cpp_delete::DeleteReports __ret;
        try
        {
            __ret = __proxy->end_report(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DeleteHandle_reportPtr
newCallback_DeleteHandle_report(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteReports&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_report<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DeleteHandle_reportPtr
newCallback_DeleteHandle_report(T* instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteReports&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_report<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DeleteHandle_finished : public Callback_DeleteHandle_finished_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_DeleteHandle_finished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_finished(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DeleteHandle_finishedPtr
newCallback_DeleteHandle_finished(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_finished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DeleteHandle_finishedPtr
newCallback_DeleteHandle_finished(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_finished<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DeleteHandle_finished : public Callback_DeleteHandle_finished_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_DeleteHandle_finished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_finished(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DeleteHandle_finishedPtr
newCallback_DeleteHandle_finished(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_finished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DeleteHandle_finishedPtr
newCallback_DeleteHandle_finished(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_finished<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DeleteHandle_errors : public Callback_DeleteHandle_errors_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_DeleteHandle_errors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_errors(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DeleteHandle_errorsPtr
newCallback_DeleteHandle_errors(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_errors<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DeleteHandle_errorsPtr
newCallback_DeleteHandle_errors(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_errors<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DeleteHandle_errors : public Callback_DeleteHandle_errors_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_DeleteHandle_errors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_errors(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DeleteHandle_errorsPtr
newCallback_DeleteHandle_errors(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_errors<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DeleteHandle_errorsPtr
newCallback_DeleteHandle_errors(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_errors<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DeleteHandle_cancel : public Callback_DeleteHandle_cancel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_DeleteHandle_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_cancel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DeleteHandle_cancelPtr
newCallback_DeleteHandle_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DeleteHandle_cancelPtr
newCallback_DeleteHandle_cancel(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_cancel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DeleteHandle_cancel : public Callback_DeleteHandle_cancel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_DeleteHandle_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_cancel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DeleteHandle_cancelPtr
newCallback_DeleteHandle_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DeleteHandle_cancelPtr
newCallback_DeleteHandle_cancel(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DeleteHandle_close : public Callback_DeleteHandle_close_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DeleteHandle_close(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_close(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_DeleteHandle_closePtr
newCallback_DeleteHandle_close(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_close<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DeleteHandle_closePtr
newCallback_DeleteHandle_close(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_close<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DeleteHandle_closePtr
newCallback_DeleteHandle_close(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_close<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DeleteHandle_closePtr
newCallback_DeleteHandle_close(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DeleteHandle_close<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DeleteHandle_close : public Callback_DeleteHandle_close_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DeleteHandle_close(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::_cpp_delete::DeleteHandlePrx __proxy = ::omero::api::_cpp_delete::DeleteHandlePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_close(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DeleteHandle_closePtr
newCallback_DeleteHandle_close(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_close<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DeleteHandle_closePtr
newCallback_DeleteHandle_close(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_close<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DeleteHandle_closePtr
newCallback_DeleteHandle_close(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_close<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DeleteHandle_closePtr
newCallback_DeleteHandle_close(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DeleteHandle_close<T, CT>(instance, 0, excb, sentcb);
}

}

template<class T>
class CallbackNC_IDelete_checkImageDelete : public Callback_IDelete_checkImageDelete_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IDelete_checkImageDelete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_checkImageDelete(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IDelete_checkImageDeletePtr
newCallback_IDelete_checkImageDelete(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_checkImageDelete<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_checkImageDeletePtr
newCallback_IDelete_checkImageDelete(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_checkImageDelete<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IDelete_checkImageDelete : public Callback_IDelete_checkImageDelete_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IDelete_checkImageDelete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_checkImageDelete(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IDelete_checkImageDeletePtr
newCallback_IDelete_checkImageDelete(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_checkImageDelete<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_checkImageDeletePtr
newCallback_IDelete_checkImageDelete(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_checkImageDelete<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IDelete_previewImageDelete : public Callback_IDelete_previewImageDelete_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IDelete_previewImageDelete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_previewImageDelete(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IDelete_previewImageDeletePtr
newCallback_IDelete_previewImageDelete(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_previewImageDelete<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_previewImageDeletePtr
newCallback_IDelete_previewImageDelete(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_previewImageDelete<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IDelete_previewImageDelete : public Callback_IDelete_previewImageDelete_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IDelete_previewImageDelete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_previewImageDelete(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IDelete_previewImageDeletePtr
newCallback_IDelete_previewImageDelete(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_previewImageDelete<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_previewImageDeletePtr
newCallback_IDelete_previewImageDelete(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_previewImageDelete<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IDelete_deleteImage : public Callback_IDelete_deleteImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IDelete_deleteImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IDelete_deleteImagePtr
newCallback_IDelete_deleteImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_deleteImagePtr
newCallback_IDelete_deleteImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IDelete_deleteImagePtr
newCallback_IDelete_deleteImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_deleteImagePtr
newCallback_IDelete_deleteImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IDelete_deleteImage : public Callback_IDelete_deleteImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IDelete_deleteImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IDelete_deleteImagePtr
newCallback_IDelete_deleteImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteImagePtr
newCallback_IDelete_deleteImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteImagePtr
newCallback_IDelete_deleteImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteImagePtr
newCallback_IDelete_deleteImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IDelete_deleteImages : public Callback_IDelete_deleteImages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IDelete_deleteImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteImages(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IDelete_deleteImagesPtr
newCallback_IDelete_deleteImages(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_deleteImagesPtr
newCallback_IDelete_deleteImages(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImages<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IDelete_deleteImagesPtr
newCallback_IDelete_deleteImages(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_deleteImagesPtr
newCallback_IDelete_deleteImages(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImages<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IDelete_deleteImages : public Callback_IDelete_deleteImages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IDelete_deleteImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteImages(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IDelete_deleteImagesPtr
newCallback_IDelete_deleteImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteImagesPtr
newCallback_IDelete_deleteImages(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImages<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteImagesPtr
newCallback_IDelete_deleteImages(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteImagesPtr
newCallback_IDelete_deleteImages(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImages<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IDelete_deleteImagesByDataset : public Callback_IDelete_deleteImagesByDataset_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IDelete_deleteImagesByDataset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteImagesByDataset(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IDelete_deleteImagesByDatasetPtr
newCallback_IDelete_deleteImagesByDataset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImagesByDataset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_deleteImagesByDatasetPtr
newCallback_IDelete_deleteImagesByDataset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImagesByDataset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IDelete_deleteImagesByDatasetPtr
newCallback_IDelete_deleteImagesByDataset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImagesByDataset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_deleteImagesByDatasetPtr
newCallback_IDelete_deleteImagesByDataset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteImagesByDataset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IDelete_deleteImagesByDataset : public Callback_IDelete_deleteImagesByDataset_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IDelete_deleteImagesByDataset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteImagesByDataset(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IDelete_deleteImagesByDatasetPtr
newCallback_IDelete_deleteImagesByDataset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImagesByDataset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteImagesByDatasetPtr
newCallback_IDelete_deleteImagesByDataset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImagesByDataset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteImagesByDatasetPtr
newCallback_IDelete_deleteImagesByDataset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImagesByDataset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteImagesByDatasetPtr
newCallback_IDelete_deleteImagesByDataset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteImagesByDataset<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IDelete_deleteSettings : public Callback_IDelete_deleteSettings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IDelete_deleteSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IDelete_deleteSettingsPtr
newCallback_IDelete_deleteSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_deleteSettingsPtr
newCallback_IDelete_deleteSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteSettings<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IDelete_deleteSettingsPtr
newCallback_IDelete_deleteSettings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_deleteSettingsPtr
newCallback_IDelete_deleteSettings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deleteSettings<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IDelete_deleteSettings : public Callback_IDelete_deleteSettings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IDelete_deleteSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IDelete_deleteSettingsPtr
newCallback_IDelete_deleteSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteSettingsPtr
newCallback_IDelete_deleteSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteSettingsPtr
newCallback_IDelete_deleteSettings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deleteSettingsPtr
newCallback_IDelete_deleteSettings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deleteSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IDelete_deletePlate : public Callback_IDelete_deletePlate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IDelete_deletePlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deletePlate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IDelete_deletePlatePtr
newCallback_IDelete_deletePlate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deletePlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_deletePlatePtr
newCallback_IDelete_deletePlate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deletePlate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IDelete_deletePlatePtr
newCallback_IDelete_deletePlate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deletePlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_deletePlatePtr
newCallback_IDelete_deletePlate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_deletePlate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IDelete_deletePlate : public Callback_IDelete_deletePlate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IDelete_deletePlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deletePlate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IDelete_deletePlatePtr
newCallback_IDelete_deletePlate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deletePlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deletePlatePtr
newCallback_IDelete_deletePlate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deletePlate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deletePlatePtr
newCallback_IDelete_deletePlate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deletePlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_deletePlatePtr
newCallback_IDelete_deletePlate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_deletePlate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IDelete_availableCommands : public Callback_IDelete_availableCommands_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::_cpp_delete::DeleteCommands&);

    CallbackNC_IDelete_availableCommands(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        ::omero::api::_cpp_delete::DeleteCommands __ret;
        try
        {
            __ret = __proxy->end_availableCommands(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IDelete_availableCommandsPtr
newCallback_IDelete_availableCommands(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteCommands&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_availableCommands<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_availableCommandsPtr
newCallback_IDelete_availableCommands(T* instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteCommands&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_availableCommands<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IDelete_availableCommands : public Callback_IDelete_availableCommands_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::_cpp_delete::DeleteCommands&, const CT&);

    Callback_IDelete_availableCommands(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        ::omero::api::_cpp_delete::DeleteCommands __ret;
        try
        {
            __ret = __proxy->end_availableCommands(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IDelete_availableCommandsPtr
newCallback_IDelete_availableCommands(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteCommands&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_availableCommands<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_availableCommandsPtr
newCallback_IDelete_availableCommands(T* instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteCommands&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_availableCommands<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IDelete_queueDelete : public Callback_IDelete_queueDelete_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::_cpp_delete::DeleteHandlePrx&);

    CallbackNC_IDelete_queueDelete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        ::omero::api::_cpp_delete::DeleteHandlePrx __ret;
        try
        {
            __ret = __proxy->end_queueDelete(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IDelete_queueDeletePtr
newCallback_IDelete_queueDelete(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteHandlePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_queueDelete<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IDelete_queueDeletePtr
newCallback_IDelete_queueDelete(T* instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteHandlePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IDelete_queueDelete<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IDelete_queueDelete : public Callback_IDelete_queueDelete_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::_cpp_delete::DeleteHandlePrx&, const CT&);

    Callback_IDelete_queueDelete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IDeletePrx __proxy = ::omero::api::IDeletePrx::uncheckedCast(__result->getProxy());
        ::omero::api::_cpp_delete::DeleteHandlePrx __ret;
        try
        {
            __ret = __proxy->end_queueDelete(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IDelete_queueDeletePtr
newCallback_IDelete_queueDelete(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteHandlePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_queueDelete<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IDelete_queueDeletePtr
newCallback_IDelete_queueDelete(T* instance, void (T::*cb)(const ::omero::api::_cpp_delete::DeleteHandlePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IDelete_queueDelete<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
