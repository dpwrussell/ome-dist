// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IQuery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IQuery_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IQuery_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ModelF.h>
#include <omero/ServicesF.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class IQuery;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IQuery>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IQuery*);

}

}

}

namespace omero
{

namespace api
{

class IQuery;
bool operator==(const IQuery&, const IQuery&);
bool operator<(const IQuery&, const IQuery&);
::Ice::Object* upCast(::omero::api::IQuery*);
typedef ::IceInternal::Handle< ::omero::api::IQuery> IQueryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IQuery> IQueryPrx;
void __patch(IQueryPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_IQuery_get : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;

    void __response(const ::omero::model::IObjectPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_get> AMI_IQuery_getPtr;

class AMD_IQuery_get : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_get> AMD_IQuery_getPtr;

class AMI_IQuery_find : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;

    void __response(const ::omero::model::IObjectPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_find> AMI_IQuery_findPtr;

class AMD_IQuery_find : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_find> AMD_IQuery_findPtr;

class AMI_IQuery_findAll : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_findAll> AMI_IQuery_findAllPtr;

class AMD_IQuery_findAll : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_findAll> AMD_IQuery_findAllPtr;

class AMI_IQuery_findByExample : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;

    void __response(const ::omero::model::IObjectPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_findByExample> AMI_IQuery_findByExamplePtr;

class AMD_IQuery_findByExample : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_findByExample> AMD_IQuery_findByExamplePtr;

class AMI_IQuery_findAllByExample : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_findAllByExample> AMI_IQuery_findAllByExamplePtr;

class AMD_IQuery_findAllByExample : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_findAllByExample> AMD_IQuery_findAllByExamplePtr;

class AMI_IQuery_findByString : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;

    void __response(const ::omero::model::IObjectPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_findByString> AMI_IQuery_findByStringPtr;

class AMD_IQuery_findByString : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_findByString> AMD_IQuery_findByStringPtr;

class AMI_IQuery_findAllByString : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_findAllByString> AMI_IQuery_findAllByStringPtr;

class AMD_IQuery_findAllByString : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_findAllByString> AMD_IQuery_findAllByStringPtr;

class AMI_IQuery_findByQuery : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;

    void __response(const ::omero::model::IObjectPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_findByQuery> AMI_IQuery_findByQueryPtr;

class AMD_IQuery_findByQuery : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_findByQuery> AMD_IQuery_findByQueryPtr;

class AMI_IQuery_findAllByQuery : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_findAllByQuery> AMI_IQuery_findAllByQueryPtr;

class AMD_IQuery_findAllByQuery : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_findAllByQuery> AMD_IQuery_findAllByQueryPtr;

class AMI_IQuery_findAllByFullText : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_findAllByFullText> AMI_IQuery_findAllByFullTextPtr;

class AMD_IQuery_findAllByFullText : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_findAllByFullText> AMD_IQuery_findAllByFullTextPtr;

class AMI_IQuery_projection : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::RTypeSeqSeq&) = 0;

    void __response(const ::omero::RTypeSeqSeq& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_projection> AMI_IQuery_projectionPtr;

class AMD_IQuery_projection : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::RTypeSeqSeq&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_projection> AMD_IQuery_projectionPtr;

class AMI_IQuery_refresh : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;

    void __response(const ::omero::model::IObjectPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IQuery_refresh> AMI_IQuery_refreshPtr;

class AMD_IQuery_refresh : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IQuery_refresh> AMD_IQuery_refreshPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_IQuery_get : public ::omero::api::AMD_IQuery_get, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_get(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::IObjectPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IQuery_find : public ::omero::api::AMD_IQuery_find, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_find(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::IObjectPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IQuery_findAll : public ::omero::api::AMD_IQuery_findAll, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_findAll(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IQuery_findByExample : public ::omero::api::AMD_IQuery_findByExample, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_findByExample(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::IObjectPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IQuery_findAllByExample : public ::omero::api::AMD_IQuery_findAllByExample, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_findAllByExample(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IQuery_findByString : public ::omero::api::AMD_IQuery_findByString, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_findByString(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::IObjectPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IQuery_findAllByString : public ::omero::api::AMD_IQuery_findAllByString, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_findAllByString(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IQuery_findByQuery : public ::omero::api::AMD_IQuery_findByQuery, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_findByQuery(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::IObjectPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IQuery_findAllByQuery : public ::omero::api::AMD_IQuery_findAllByQuery, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_findAllByQuery(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IQuery_findAllByFullText : public ::omero::api::AMD_IQuery_findAllByFullText, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_findAllByFullText(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IQuery_projection : public ::omero::api::AMD_IQuery_projection, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_projection(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::RTypeSeqSeq&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IQuery_refresh : public ::omero::api::AMD_IQuery_refresh, public ::IceInternal::IncomingAsync
{
public:

    AMD_IQuery_refresh(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::IObjectPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_IQuery_get_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_get_Base> Callback_IQuery_getPtr;

class Callback_IQuery_find_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_find_Base> Callback_IQuery_findPtr;

class Callback_IQuery_findAll_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_findAll_Base> Callback_IQuery_findAllPtr;

class Callback_IQuery_findByExample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_findByExample_Base> Callback_IQuery_findByExamplePtr;

class Callback_IQuery_findAllByExample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_findAllByExample_Base> Callback_IQuery_findAllByExamplePtr;

class Callback_IQuery_findByString_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_findByString_Base> Callback_IQuery_findByStringPtr;

class Callback_IQuery_findAllByString_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_findAllByString_Base> Callback_IQuery_findAllByStringPtr;

class Callback_IQuery_findByQuery_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_findByQuery_Base> Callback_IQuery_findByQueryPtr;

class Callback_IQuery_findAllByQuery_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_findAllByQuery_Base> Callback_IQuery_findAllByQueryPtr;

class Callback_IQuery_findAllByFullText_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_findAllByFullText_Base> Callback_IQuery_findAllByFullTextPtr;

class Callback_IQuery_projection_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_projection_Base> Callback_IQuery_projectionPtr;

class Callback_IQuery_refresh_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuery_refresh_Base> Callback_IQuery_refreshPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class IQuery : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    ::omero::model::IObjectPtr get(const ::std::string& klass, ::Ice::Long id)
    {
        return get(klass, id, 0);
    }
    ::omero::model::IObjectPtr get(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return get(klass, id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_get(const ::std::string& klass, ::Ice::Long id, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_get(klass, id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::std::string& klass, ::Ice::Long id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_get(klass, id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_get(klass, id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_get(klass, id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_get(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::IObjectPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::model::IObjectPtr __ret;
                try
                {
                    __ret = __proxy->end_get(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::IObjectPtr&)> _response;
        };
        return begin_get(klass, id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_get(const ::std::string& klass, ::Ice::Long id)
    {
        return begin_get(klass, id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_get(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return begin_get(klass, id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_get(const ::std::string& klass, ::Ice::Long id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(klass, id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(klass, id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::std::string& klass, ::Ice::Long id, const ::omero::api::Callback_IQuery_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(klass, id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(klass, id, &__ctx, __del, __cookie);
    }

    ::omero::model::IObjectPtr end_get(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::IObjectPtr get(const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_get(const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool get_async(const ::omero::api::AMI_IQuery_getPtr&, const ::std::string&, ::Ice::Long);
    bool get_async(const ::omero::api::AMI_IQuery_getPtr&, const ::std::string&, ::Ice::Long, const ::Ice::Context&);

    ::omero::model::IObjectPtr find(const ::std::string& klass, ::Ice::Long id)
    {
        return find(klass, id, 0);
    }
    ::omero::model::IObjectPtr find(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return find(klass, id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_find(const ::std::string& klass, ::Ice::Long id, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_find(klass, id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_find(const ::std::string& klass, ::Ice::Long id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_find(klass, id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_find(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_find(klass, id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_find(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_find(klass, id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_find(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::IObjectPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::model::IObjectPtr __ret;
                try
                {
                    __ret = __proxy->end_find(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::IObjectPtr&)> _response;
        };
        return begin_find(klass, id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_find(const ::std::string& klass, ::Ice::Long id)
    {
        return begin_find(klass, id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_find(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return begin_find(klass, id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_find(const ::std::string& klass, ::Ice::Long id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_find(klass, id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_find(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_find(klass, id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_find(const ::std::string& klass, ::Ice::Long id, const ::omero::api::Callback_IQuery_findPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_find(klass, id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_find(const ::std::string& klass, ::Ice::Long id, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_findPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_find(klass, id, &__ctx, __del, __cookie);
    }

    ::omero::model::IObjectPtr end_find(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::IObjectPtr find(const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_find(const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool find_async(const ::omero::api::AMI_IQuery_findPtr&, const ::std::string&, ::Ice::Long);
    bool find_async(const ::omero::api::AMI_IQuery_findPtr&, const ::std::string&, ::Ice::Long, const ::Ice::Context&);

    ::omero::api::IObjectList findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter)
    {
        return findAll(klass, filter, 0);
    }
    ::omero::api::IObjectList findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx)
    {
        return findAll(klass, filter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findAll(klass, filter, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findAll(klass, filter, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findAll(klass, filter, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findAll(klass, filter, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_findAll(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_findAll(klass, filter, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter)
    {
        return begin_findAll(klass, filter, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx)
    {
        return begin_findAll(klass, filter, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAll(klass, filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAll(klass, filter, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter, const ::omero::api::Callback_IQuery_findAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAll(klass, filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAll(const ::std::string& klass, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_findAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAll(klass, filter, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_findAll(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList findAll(const ::std::string&, const ::omero::sys::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findAll(const ::std::string&, const ::omero::sys::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool findAll_async(const ::omero::api::AMI_IQuery_findAllPtr&, const ::std::string&, const ::omero::sys::FilterPtr&);
    bool findAll_async(const ::omero::api::AMI_IQuery_findAllPtr&, const ::std::string&, const ::omero::sys::FilterPtr&, const ::Ice::Context&);

    ::omero::model::IObjectPtr findByExample(const ::omero::model::IObjectPtr& example)
    {
        return findByExample(example, 0);
    }
    ::omero::model::IObjectPtr findByExample(const ::omero::model::IObjectPtr& example, const ::Ice::Context& __ctx)
    {
        return findByExample(example, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findByExample(const ::omero::model::IObjectPtr& example, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findByExample(example, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findByExample(const ::omero::model::IObjectPtr& example, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findByExample(example, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findByExample(const ::omero::model::IObjectPtr& example, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findByExample(example, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findByExample(const ::omero::model::IObjectPtr& example, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findByExample(example, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findByExample(const ::omero::model::IObjectPtr& example, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::IObjectPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::model::IObjectPtr __ret;
                try
                {
                    __ret = __proxy->end_findByExample(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::IObjectPtr&)> _response;
        };
        return begin_findByExample(example, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findByExample(const ::omero::model::IObjectPtr& example)
    {
        return begin_findByExample(example, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByExample(const ::omero::model::IObjectPtr& example, const ::Ice::Context& __ctx)
    {
        return begin_findByExample(example, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByExample(const ::omero::model::IObjectPtr& example, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByExample(example, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByExample(const ::omero::model::IObjectPtr& example, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByExample(example, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByExample(const ::omero::model::IObjectPtr& example, const ::omero::api::Callback_IQuery_findByExamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByExample(example, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByExample(const ::omero::model::IObjectPtr& example, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_findByExamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByExample(example, &__ctx, __del, __cookie);
    }

    ::omero::model::IObjectPtr end_findByExample(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::IObjectPtr findByExample(const ::omero::model::IObjectPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findByExample(const ::omero::model::IObjectPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool findByExample_async(const ::omero::api::AMI_IQuery_findByExamplePtr&, const ::omero::model::IObjectPtr&);
    bool findByExample_async(const ::omero::api::AMI_IQuery_findByExamplePtr&, const ::omero::model::IObjectPtr&, const ::Ice::Context&);

    ::omero::api::IObjectList findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter)
    {
        return findAllByExample(example, filter, 0);
    }
    ::omero::api::IObjectList findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx)
    {
        return findAllByExample(example, filter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findAllByExample(example, filter, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findAllByExample(example, filter, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findAllByExample(example, filter, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findAllByExample(example, filter, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_findAllByExample(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_findAllByExample(example, filter, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter)
    {
        return begin_findAllByExample(example, filter, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx)
    {
        return begin_findAllByExample(example, filter, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByExample(example, filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByExample(example, filter, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter, const ::omero::api::Callback_IQuery_findAllByExamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByExample(example, filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByExample(const ::omero::model::IObjectPtr& example, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_findAllByExamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByExample(example, filter, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_findAllByExample(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList findAllByExample(const ::omero::model::IObjectPtr&, const ::omero::sys::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findAllByExample(const ::omero::model::IObjectPtr&, const ::omero::sys::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool findAllByExample_async(const ::omero::api::AMI_IQuery_findAllByExamplePtr&, const ::omero::model::IObjectPtr&, const ::omero::sys::FilterPtr&);
    bool findAllByExample_async(const ::omero::api::AMI_IQuery_findAllByExamplePtr&, const ::omero::model::IObjectPtr&, const ::omero::sys::FilterPtr&, const ::Ice::Context&);

    ::omero::model::IObjectPtr findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value)
    {
        return findByString(klass, field, value, 0);
    }
    ::omero::model::IObjectPtr findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return findByString(klass, field, value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findByString(klass, field, value, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findByString(klass, field, value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findByString(klass, field, value, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findByString(klass, field, value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::IObjectPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::model::IObjectPtr __ret;
                try
                {
                    __ret = __proxy->end_findByString(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::IObjectPtr&)> _response;
        };
        return begin_findByString(klass, field, value, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value)
    {
        return begin_findByString(klass, field, value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return begin_findByString(klass, field, value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByString(klass, field, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByString(klass, field, value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, const ::omero::api::Callback_IQuery_findByStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByString(klass, field, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_findByStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByString(klass, field, value, &__ctx, __del, __cookie);
    }

    ::omero::model::IObjectPtr end_findByString(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::IObjectPtr findByString(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findByString(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool findByString_async(const ::omero::api::AMI_IQuery_findByStringPtr&, const ::std::string&, const ::std::string&, const ::std::string&);
    bool findByString_async(const ::omero::api::AMI_IQuery_findByStringPtr&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    ::omero::api::IObjectList findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter)
    {
        return findAllByString(klass, field, value, caseSensitive, filter, 0);
    }
    ::omero::api::IObjectList findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx)
    {
        return findAllByString(klass, field, value, caseSensitive, filter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findAllByString(klass, field, value, caseSensitive, filter, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findAllByString(klass, field, value, caseSensitive, filter, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findAllByString(klass, field, value, caseSensitive, filter, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findAllByString(klass, field, value, caseSensitive, filter, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_findAllByString(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_findAllByString(klass, field, value, caseSensitive, filter, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter)
    {
        return begin_findAllByString(klass, field, value, caseSensitive, filter, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx)
    {
        return begin_findAllByString(klass, field, value, caseSensitive, filter, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByString(klass, field, value, caseSensitive, filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByString(klass, field, value, caseSensitive, filter, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter, const ::omero::api::Callback_IQuery_findAllByStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByString(klass, field, value, caseSensitive, filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByString(const ::std::string& klass, const ::std::string& field, const ::std::string& value, bool caseSensitive, const ::omero::sys::FilterPtr& filter, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_findAllByStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByString(klass, field, value, caseSensitive, filter, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_findAllByString(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList findAllByString(const ::std::string&, const ::std::string&, const ::std::string&, bool, const ::omero::sys::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findAllByString(const ::std::string&, const ::std::string&, const ::std::string&, bool, const ::omero::sys::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool findAllByString_async(const ::omero::api::AMI_IQuery_findAllByStringPtr&, const ::std::string&, const ::std::string&, const ::std::string&, bool, const ::omero::sys::FilterPtr&);
    bool findAllByString_async(const ::omero::api::AMI_IQuery_findAllByStringPtr&, const ::std::string&, const ::std::string&, const ::std::string&, bool, const ::omero::sys::FilterPtr&, const ::Ice::Context&);

    ::omero::model::IObjectPtr findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params)
    {
        return findByQuery(query, params, 0);
    }
    ::omero::model::IObjectPtr findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx)
    {
        return findByQuery(query, params, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findByQuery(query, params, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findByQuery(query, params, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findByQuery(query, params, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findByQuery(query, params, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::IObjectPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::model::IObjectPtr __ret;
                try
                {
                    __ret = __proxy->end_findByQuery(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::IObjectPtr&)> _response;
        };
        return begin_findByQuery(query, params, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params)
    {
        return begin_findByQuery(query, params, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx)
    {
        return begin_findByQuery(query, params, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByQuery(query, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByQuery(query, params, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::omero::api::Callback_IQuery_findByQueryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByQuery(query, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_findByQueryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByQuery(query, params, &__ctx, __del, __cookie);
    }

    ::omero::model::IObjectPtr end_findByQuery(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::IObjectPtr findByQuery(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findByQuery(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool findByQuery_async(const ::omero::api::AMI_IQuery_findByQueryPtr&, const ::std::string&, const ::omero::sys::ParametersPtr&);
    bool findByQuery_async(const ::omero::api::AMI_IQuery_findByQueryPtr&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::api::IObjectList findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params)
    {
        return findAllByQuery(query, params, 0);
    }
    ::omero::api::IObjectList findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx)
    {
        return findAllByQuery(query, params, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findAllByQuery(query, params, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findAllByQuery(query, params, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findAllByQuery(query, params, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findAllByQuery(query, params, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_findAllByQuery(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_findAllByQuery(query, params, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params)
    {
        return begin_findAllByQuery(query, params, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx)
    {
        return begin_findAllByQuery(query, params, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByQuery(query, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByQuery(query, params, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::omero::api::Callback_IQuery_findAllByQueryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByQuery(query, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByQuery(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_findAllByQueryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByQuery(query, params, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_findAllByQuery(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList findAllByQuery(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findAllByQuery(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool findAllByQuery_async(const ::omero::api::AMI_IQuery_findAllByQueryPtr&, const ::std::string&, const ::omero::sys::ParametersPtr&);
    bool findAllByQuery_async(const ::omero::api::AMI_IQuery_findAllByQueryPtr&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::api::IObjectList findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params)
    {
        return findAllByFullText(klass, query, params, 0);
    }
    ::omero::api::IObjectList findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx)
    {
        return findAllByFullText(klass, query, params, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findAllByFullText(klass, query, params, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findAllByFullText(klass, query, params, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findAllByFullText(klass, query, params, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findAllByFullText(klass, query, params, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_findAllByFullText(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_findAllByFullText(klass, query, params, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params)
    {
        return begin_findAllByFullText(klass, query, params, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx)
    {
        return begin_findAllByFullText(klass, query, params, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByFullText(klass, query, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByFullText(klass, query, params, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::omero::api::Callback_IQuery_findAllByFullTextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByFullText(klass, query, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findAllByFullText(const ::std::string& klass, const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_findAllByFullTextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findAllByFullText(klass, query, params, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_findAllByFullText(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList findAllByFullText(const ::std::string&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findAllByFullText(const ::std::string&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool findAllByFullText_async(const ::omero::api::AMI_IQuery_findAllByFullTextPtr&, const ::std::string&, const ::std::string&, const ::omero::sys::ParametersPtr&);
    bool findAllByFullText_async(const ::omero::api::AMI_IQuery_findAllByFullTextPtr&, const ::std::string&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::RTypeSeqSeq projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params)
    {
        return projection(query, params, 0);
    }
    ::omero::RTypeSeqSeq projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx)
    {
        return projection(query, params, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::IceInternal::Function<void (const ::omero::RTypeSeqSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_projection(query, params, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_projection(query, params, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTypeSeqSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_projection(query, params, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_projection(query, params, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTypeSeqSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTypeSeqSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::RTypeSeqSeq __ret;
                try
                {
                    __ret = __proxy->end_projection(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTypeSeqSeq&)> _response;
        };
        return begin_projection(query, params, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params)
    {
        return begin_projection(query, params, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx)
    {
        return begin_projection(query, params, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projection(query, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projection(query, params, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::omero::api::Callback_IQuery_projectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projection(query, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_projection(const ::std::string& query, const ::omero::sys::ParametersPtr& params, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_projectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projection(query, params, &__ctx, __del, __cookie);
    }

    ::omero::RTypeSeqSeq end_projection(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTypeSeqSeq projection(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_projection(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool projection_async(const ::omero::api::AMI_IQuery_projectionPtr&, const ::std::string&, const ::omero::sys::ParametersPtr&);
    bool projection_async(const ::omero::api::AMI_IQuery_projectionPtr&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context&);

    ::omero::model::IObjectPtr refresh(const ::omero::model::IObjectPtr& iObject)
    {
        return refresh(iObject, 0);
    }
    ::omero::model::IObjectPtr refresh(const ::omero::model::IObjectPtr& iObject, const ::Ice::Context& __ctx)
    {
        return refresh(iObject, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_refresh(const ::omero::model::IObjectPtr& iObject, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_refresh(iObject, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::omero::model::IObjectPtr& iObject, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refresh(iObject, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::omero::model::IObjectPtr& iObject, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_refresh(iObject, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::omero::model::IObjectPtr& iObject, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refresh(iObject, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_refresh(const ::omero::model::IObjectPtr& iObject, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::IObjectPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
                ::omero::model::IObjectPtr __ret;
                try
                {
                    __ret = __proxy->end_refresh(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::IObjectPtr&)> _response;
        };
        return begin_refresh(iObject, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_refresh(const ::omero::model::IObjectPtr& iObject)
    {
        return begin_refresh(iObject, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::omero::model::IObjectPtr& iObject, const ::Ice::Context& __ctx)
    {
        return begin_refresh(iObject, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::omero::model::IObjectPtr& iObject, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(iObject, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::omero::model::IObjectPtr& iObject, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(iObject, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::omero::model::IObjectPtr& iObject, const ::omero::api::Callback_IQuery_refreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(iObject, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::omero::model::IObjectPtr& iObject, const ::Ice::Context& __ctx, const ::omero::api::Callback_IQuery_refreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(iObject, &__ctx, __del, __cookie);
    }

    ::omero::model::IObjectPtr end_refresh(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::IObjectPtr refresh(const ::omero::model::IObjectPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_refresh(const ::omero::model::IObjectPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool refresh_async(const ::omero::api::AMI_IQuery_refreshPtr&, const ::omero::model::IObjectPtr&);
    bool refresh_async(const ::omero::api::AMI_IQuery_refreshPtr&, const ::omero::model::IObjectPtr&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<IQuery> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_secure(bool __secure) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_twoway() const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_oneway() const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_batchOneway() const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_datagram() const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_batchDatagram() const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_compress(bool __compress) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_timeout(int __timeout) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IQuery> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<IQuery*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class IQuery : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual ::omero::model::IObjectPtr get(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::IObjectPtr find(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList findAll(const ::std::string&, const ::omero::sys::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::IObjectPtr findByExample(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList findAllByExample(const ::omero::model::IObjectPtr&, const ::omero::sys::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::IObjectPtr findByString(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList findAllByString(const ::std::string&, const ::std::string&, const ::std::string&, bool, const ::omero::sys::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::IObjectPtr findByQuery(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList findAllByQuery(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList findAllByFullText(const ::std::string&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTypeSeqSeq projection(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::IObjectPtr refresh(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class IQuery : virtual public ::IceDelegate::omero::api::IQuery,
               virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual ::omero::model::IObjectPtr get(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr find(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList findAll(const ::std::string&, const ::omero::sys::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr findByExample(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList findAllByExample(const ::omero::model::IObjectPtr&, const ::omero::sys::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr findByString(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList findAllByString(const ::std::string&, const ::std::string&, const ::std::string&, bool, const ::omero::sys::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr findByQuery(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList findAllByQuery(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList findAllByFullText(const ::std::string&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTypeSeqSeq projection(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr refresh(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class IQuery : virtual public ::IceDelegate::omero::api::IQuery,
               virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual ::omero::model::IObjectPtr get(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr find(const ::std::string&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList findAll(const ::std::string&, const ::omero::sys::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr findByExample(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList findAllByExample(const ::omero::model::IObjectPtr&, const ::omero::sys::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr findByString(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList findAllByString(const ::std::string&, const ::std::string&, const ::std::string&, bool, const ::omero::sys::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr findByQuery(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList findAllByQuery(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList findAllByFullText(const ::std::string&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTypeSeqSeq projection(const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr refresh(const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class IQuery : virtual public ::omero::api::ServiceInterface
{
public:

    typedef IQueryPrx ProxyType;
    typedef IQueryPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void get_async(const ::omero::api::AMD_IQuery_getPtr&, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___get(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void find_async(const ::omero::api::AMD_IQuery_findPtr&, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___find(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void findAll_async(const ::omero::api::AMD_IQuery_findAllPtr&, const ::std::string&, const ::omero::sys::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findAll(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void findByExample_async(const ::omero::api::AMD_IQuery_findByExamplePtr&, const ::omero::model::IObjectPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findByExample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void findAllByExample_async(const ::omero::api::AMD_IQuery_findAllByExamplePtr&, const ::omero::model::IObjectPtr&, const ::omero::sys::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findAllByExample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void findByString_async(const ::omero::api::AMD_IQuery_findByStringPtr&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findByString(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void findAllByString_async(const ::omero::api::AMD_IQuery_findAllByStringPtr&, const ::std::string&, const ::std::string&, const ::std::string&, bool, const ::omero::sys::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findAllByString(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void findByQuery_async(const ::omero::api::AMD_IQuery_findByQueryPtr&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findByQuery(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void findAllByQuery_async(const ::omero::api::AMD_IQuery_findAllByQueryPtr&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findAllByQuery(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void findAllByFullText_async(const ::omero::api::AMD_IQuery_findAllByFullTextPtr&, const ::std::string&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findAllByFullText(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void projection_async(const ::omero::api::AMD_IQuery_projectionPtr&, const ::std::string&, const ::omero::sys::ParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___projection(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void refresh_async(const ::omero::api::AMD_IQuery_refreshPtr&, const ::omero::model::IObjectPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___refresh(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const IQuery& l, const IQuery& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IQuery& l, const IQuery& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_IQuery_get : public Callback_IQuery_get_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&);

    CallbackNC_IQuery_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_get(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_getPtr
newCallback_IQuery_get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_get<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_getPtr
newCallback_IQuery_get(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_get<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_get : public Callback_IQuery_get_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&, const CT&);

    Callback_IQuery_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_get(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_getPtr
newCallback_IQuery_get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_getPtr
newCallback_IQuery_get(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuery_find : public Callback_IQuery_find_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&);

    CallbackNC_IQuery_find(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_find(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_findPtr
newCallback_IQuery_find(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_find<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_findPtr
newCallback_IQuery_find(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_find<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_find : public Callback_IQuery_find_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&, const CT&);

    Callback_IQuery_find(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_find(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_findPtr
newCallback_IQuery_find(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_find<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_findPtr
newCallback_IQuery_find(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_find<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuery_findAll : public Callback_IQuery_findAll_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IQuery_findAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_findAll(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_findAllPtr
newCallback_IQuery_findAll(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findAll<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_findAllPtr
newCallback_IQuery_findAll(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findAll<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_findAll : public Callback_IQuery_findAll_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IQuery_findAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_findAll(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_findAllPtr
newCallback_IQuery_findAll(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_findAllPtr
newCallback_IQuery_findAll(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuery_findByExample : public Callback_IQuery_findByExample_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&);

    CallbackNC_IQuery_findByExample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_findByExample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_findByExamplePtr
newCallback_IQuery_findByExample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findByExample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_findByExamplePtr
newCallback_IQuery_findByExample(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findByExample<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_findByExample : public Callback_IQuery_findByExample_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&, const CT&);

    Callback_IQuery_findByExample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_findByExample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_findByExamplePtr
newCallback_IQuery_findByExample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findByExample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_findByExamplePtr
newCallback_IQuery_findByExample(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findByExample<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuery_findAllByExample : public Callback_IQuery_findAllByExample_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IQuery_findAllByExample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_findAllByExample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_findAllByExamplePtr
newCallback_IQuery_findAllByExample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findAllByExample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_findAllByExamplePtr
newCallback_IQuery_findAllByExample(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findAllByExample<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_findAllByExample : public Callback_IQuery_findAllByExample_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IQuery_findAllByExample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_findAllByExample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_findAllByExamplePtr
newCallback_IQuery_findAllByExample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findAllByExample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_findAllByExamplePtr
newCallback_IQuery_findAllByExample(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findAllByExample<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuery_findByString : public Callback_IQuery_findByString_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&);

    CallbackNC_IQuery_findByString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_findByString(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_findByStringPtr
newCallback_IQuery_findByString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findByString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_findByStringPtr
newCallback_IQuery_findByString(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findByString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_findByString : public Callback_IQuery_findByString_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&, const CT&);

    Callback_IQuery_findByString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_findByString(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_findByStringPtr
newCallback_IQuery_findByString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findByString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_findByStringPtr
newCallback_IQuery_findByString(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findByString<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuery_findAllByString : public Callback_IQuery_findAllByString_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IQuery_findAllByString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_findAllByString(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_findAllByStringPtr
newCallback_IQuery_findAllByString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findAllByString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_findAllByStringPtr
newCallback_IQuery_findAllByString(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findAllByString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_findAllByString : public Callback_IQuery_findAllByString_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IQuery_findAllByString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_findAllByString(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_findAllByStringPtr
newCallback_IQuery_findAllByString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findAllByString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_findAllByStringPtr
newCallback_IQuery_findAllByString(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findAllByString<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuery_findByQuery : public Callback_IQuery_findByQuery_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&);

    CallbackNC_IQuery_findByQuery(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_findByQuery(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_findByQueryPtr
newCallback_IQuery_findByQuery(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findByQuery<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_findByQueryPtr
newCallback_IQuery_findByQuery(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findByQuery<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_findByQuery : public Callback_IQuery_findByQuery_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&, const CT&);

    Callback_IQuery_findByQuery(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_findByQuery(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_findByQueryPtr
newCallback_IQuery_findByQuery(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findByQuery<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_findByQueryPtr
newCallback_IQuery_findByQuery(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findByQuery<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuery_findAllByQuery : public Callback_IQuery_findAllByQuery_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IQuery_findAllByQuery(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_findAllByQuery(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_findAllByQueryPtr
newCallback_IQuery_findAllByQuery(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findAllByQuery<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_findAllByQueryPtr
newCallback_IQuery_findAllByQuery(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findAllByQuery<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_findAllByQuery : public Callback_IQuery_findAllByQuery_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IQuery_findAllByQuery(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_findAllByQuery(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_findAllByQueryPtr
newCallback_IQuery_findAllByQuery(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findAllByQuery<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_findAllByQueryPtr
newCallback_IQuery_findAllByQuery(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findAllByQuery<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuery_findAllByFullText : public Callback_IQuery_findAllByFullText_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IQuery_findAllByFullText(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_findAllByFullText(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_findAllByFullTextPtr
newCallback_IQuery_findAllByFullText(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findAllByFullText<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_findAllByFullTextPtr
newCallback_IQuery_findAllByFullText(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_findAllByFullText<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_findAllByFullText : public Callback_IQuery_findAllByFullText_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IQuery_findAllByFullText(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_findAllByFullText(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_findAllByFullTextPtr
newCallback_IQuery_findAllByFullText(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findAllByFullText<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_findAllByFullTextPtr
newCallback_IQuery_findAllByFullText(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_findAllByFullText<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuery_projection : public Callback_IQuery_projection_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTypeSeqSeq&);

    CallbackNC_IQuery_projection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::RTypeSeqSeq __ret;
        try
        {
            __ret = __proxy->end_projection(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_projectionPtr
newCallback_IQuery_projection(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTypeSeqSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_projection<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_projectionPtr
newCallback_IQuery_projection(T* instance, void (T::*cb)(const ::omero::RTypeSeqSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_projection<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_projection : public Callback_IQuery_projection_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTypeSeqSeq&, const CT&);

    Callback_IQuery_projection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::RTypeSeqSeq __ret;
        try
        {
            __ret = __proxy->end_projection(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_projectionPtr
newCallback_IQuery_projection(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTypeSeqSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_projection<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_projectionPtr
newCallback_IQuery_projection(T* instance, void (T::*cb)(const ::omero::RTypeSeqSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_projection<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuery_refresh : public Callback_IQuery_refresh_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&);

    CallbackNC_IQuery_refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_refresh(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IQuery_refreshPtr
newCallback_IQuery_refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_refresh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuery_refreshPtr
newCallback_IQuery_refresh(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuery_refresh<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuery_refresh : public Callback_IQuery_refresh_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&, const CT&);

    Callback_IQuery_refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IQueryPrx __proxy = ::omero::api::IQueryPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_refresh(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuery_refreshPtr
newCallback_IQuery_refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_refresh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuery_refreshPtr
newCallback_IQuery_refresh(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuery_refresh<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
