// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Exporter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_Exporter_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_Exporter_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ServerErrors.h>
#include <omero/ServicesF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class Exporter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::Exporter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::Exporter*);

}

}

}

namespace omero
{

namespace api
{

class Exporter;
bool operator==(const Exporter&, const Exporter&);
bool operator<(const Exporter&, const Exporter&);
::Ice::Object* upCast(::omero::api::Exporter*);
typedef ::IceInternal::Handle< ::omero::api::Exporter> ExporterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::Exporter> ExporterPrx;
void __patch(ExporterPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_Exporter_addImage : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_Exporter_addImage> AMI_Exporter_addImagePtr;

class AMD_Exporter_addImage : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_Exporter_addImage> AMD_Exporter_addImagePtr;

class AMI_Exporter_generateXml : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_Exporter_generateXml> AMI_Exporter_generateXmlPtr;

class AMD_Exporter_generateXml : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_Exporter_generateXml> AMD_Exporter_generateXmlPtr;

class AMI_Exporter_generateTiff : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_Exporter_generateTiff> AMI_Exporter_generateTiffPtr;

class AMD_Exporter_generateTiff : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_Exporter_generateTiff> AMD_Exporter_generateTiffPtr;

class AMI_Exporter_read : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::Ice::ByteSeq&) = 0;

    void __response(const ::Ice::ByteSeq& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_Exporter_read> AMI_Exporter_readPtr;

class AMD_Exporter_read : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Ice::ByteSeq&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_Exporter_read> AMD_Exporter_readPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_Exporter_addImage : public ::omero::api::AMD_Exporter_addImage, public ::IceInternal::IncomingAsync
{
public:

    AMD_Exporter_addImage(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Exporter_generateXml : public ::omero::api::AMD_Exporter_generateXml, public ::IceInternal::IncomingAsync
{
public:

    AMD_Exporter_generateXml(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Exporter_generateTiff : public ::omero::api::AMD_Exporter_generateTiff, public ::IceInternal::IncomingAsync
{
public:

    AMD_Exporter_generateTiff(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Exporter_read : public ::omero::api::AMD_Exporter_read, public ::IceInternal::IncomingAsync
{
public:

    AMD_Exporter_read(::IceInternal::Incoming&);

    virtual void ice_response(const ::Ice::ByteSeq&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_Exporter_addImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Exporter_addImage_Base> Callback_Exporter_addImagePtr;

class Callback_Exporter_generateXml_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Exporter_generateXml_Base> Callback_Exporter_generateXmlPtr;

class Callback_Exporter_generateTiff_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Exporter_generateTiff_Base> Callback_Exporter_generateTiffPtr;

class Callback_Exporter_read_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Exporter_read_Base> Callback_Exporter_readPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class Exporter : virtual public ::IceProxy::omero::api::StatefulServiceInterface
{
public:

    void addImage(::Ice::Long id)
    {
        addImage(id, 0);
    }
    void addImage(::Ice::Long id, const ::Ice::Context& __ctx)
    {
        addImage(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addImage(::Ice::Long id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addImage(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addImage(::Ice::Long id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addImage(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addImage(::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addImage(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addImage(::Ice::Long id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addImage(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addImage(::Ice::Long id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_addImage(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_addImage(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addImage(::Ice::Long id)
    {
        return begin_addImage(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addImage(::Ice::Long id, const ::Ice::Context& __ctx)
    {
        return begin_addImage(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addImage(::Ice::Long id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImage(::Ice::Long id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImage(::Ice::Long id, const ::omero::api::Callback_Exporter_addImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImage(::Ice::Long id, const ::Ice::Context& __ctx, const ::omero::api::Callback_Exporter_addImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(id, &__ctx, __del, __cookie);
    }

    void end_addImage(const ::Ice::AsyncResultPtr&);
    
private:

    void addImage(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addImage(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addImage_async(const ::omero::api::AMI_Exporter_addImagePtr&, ::Ice::Long);
    bool addImage_async(const ::omero::api::AMI_Exporter_addImagePtr&, ::Ice::Long, const ::Ice::Context&);

    ::Ice::Long generateXml()
    {
        return generateXml(0);
    }
    ::Ice::Long generateXml(const ::Ice::Context& __ctx)
    {
        return generateXml(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_generateXml(const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_generateXml(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_generateXml(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_generateXml(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_generateXml(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_generateXml(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_generateXml(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_generateXml(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_generateXml(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_generateXml(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_generateXml(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_generateXml()
    {
        return begin_generateXml(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_generateXml(const ::Ice::Context& __ctx)
    {
        return begin_generateXml(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_generateXml(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateXml(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateXml(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateXml(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateXml(const ::omero::api::Callback_Exporter_generateXmlPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateXml(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateXml(const ::Ice::Context& __ctx, const ::omero::api::Callback_Exporter_generateXmlPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateXml(&__ctx, __del, __cookie);
    }

    ::Ice::Long end_generateXml(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long generateXml(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_generateXml(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool generateXml_async(const ::omero::api::AMI_Exporter_generateXmlPtr&);
    bool generateXml_async(const ::omero::api::AMI_Exporter_generateXmlPtr&, const ::Ice::Context&);

    ::Ice::Long generateTiff()
    {
        return generateTiff(0);
    }
    ::Ice::Long generateTiff(const ::Ice::Context& __ctx)
    {
        return generateTiff(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_generateTiff(const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_generateTiff(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_generateTiff(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_generateTiff(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_generateTiff(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_generateTiff(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_generateTiff(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_generateTiff(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_generateTiff(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_generateTiff(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_generateTiff(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_generateTiff()
    {
        return begin_generateTiff(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_generateTiff(const ::Ice::Context& __ctx)
    {
        return begin_generateTiff(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_generateTiff(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateTiff(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateTiff(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateTiff(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateTiff(const ::omero::api::Callback_Exporter_generateTiffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateTiff(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateTiff(const ::Ice::Context& __ctx, const ::omero::api::Callback_Exporter_generateTiffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateTiff(&__ctx, __del, __cookie);
    }

    ::Ice::Long end_generateTiff(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long generateTiff(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_generateTiff(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool generateTiff_async(const ::omero::api::AMI_Exporter_generateTiffPtr&);
    bool generateTiff_async(const ::omero::api::AMI_Exporter_generateTiffPtr&, const ::Ice::Context&);

    ::Ice::ByteSeq read(::Ice::Long position, ::Ice::Int length)
    {
        return read(position, length, 0);
    }
    ::Ice::ByteSeq read(::Ice::Long position, ::Ice::Int length, const ::Ice::Context& __ctx)
    {
        return read(position, length, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long position, ::Ice::Int length, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_read(position, length, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long position, ::Ice::Int length, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_read(position, length, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long position, ::Ice::Int length, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_read(position, length, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long position, ::Ice::Int length, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_read(position, length, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_read(::Ice::Long position, ::Ice::Int length, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
                ::Ice::ByteSeq __ret;
                try
                {
                    __ret = __proxy->end_read(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::ByteSeq&)> _response;
        };
        return begin_read(position, length, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_read(::Ice::Long position, ::Ice::Int length)
    {
        return begin_read(position, length, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long position, ::Ice::Int length, const ::Ice::Context& __ctx)
    {
        return begin_read(position, length, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long position, ::Ice::Int length, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(position, length, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long position, ::Ice::Int length, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(position, length, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long position, ::Ice::Int length, const ::omero::api::Callback_Exporter_readPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(position, length, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long position, ::Ice::Int length, const ::Ice::Context& __ctx, const ::omero::api::Callback_Exporter_readPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(position, length, &__ctx, __del, __cookie);
    }

    ::Ice::ByteSeq end_read(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ByteSeq read(::Ice::Long, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_read(::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool read_async(const ::omero::api::AMI_Exporter_readPtr&, ::Ice::Long, ::Ice::Int);
    bool read_async(const ::omero::api::AMI_Exporter_readPtr&, ::Ice::Long, ::Ice::Int, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<Exporter> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_secure(bool __secure) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_twoway() const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_oneway() const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_batchOneway() const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_datagram() const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_batchDatagram() const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_compress(bool __compress) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Exporter> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Exporter*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class Exporter : virtual public ::IceDelegate::omero::api::StatefulServiceInterface
{
public:

    virtual void addImage(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long generateXml(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long generateTiff(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::ByteSeq read(::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class Exporter : virtual public ::IceDelegate::omero::api::Exporter,
                 virtual public ::IceDelegateM::omero::api::StatefulServiceInterface
{
public:

    virtual void addImage(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long generateXml(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long generateTiff(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ByteSeq read(::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class Exporter : virtual public ::IceDelegate::omero::api::Exporter,
                 virtual public ::IceDelegateD::omero::api::StatefulServiceInterface
{
public:

    virtual void addImage(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long generateXml(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long generateTiff(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ByteSeq read(::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class Exporter : virtual public ::omero::api::StatefulServiceInterface
{
public:

    typedef ExporterPrx ProxyType;
    typedef ExporterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void addImage_async(const ::omero::api::AMD_Exporter_addImagePtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void generateXml_async(const ::omero::api::AMD_Exporter_generateXmlPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___generateXml(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void generateTiff_async(const ::omero::api::AMD_Exporter_generateTiffPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___generateTiff(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void read_async(const ::omero::api::AMD_Exporter_readPtr&, ::Ice::Long, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___read(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Exporter& l, const Exporter& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Exporter& l, const Exporter& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_Exporter_addImage : public Callback_Exporter_addImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Exporter_addImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Exporter_addImagePtr
newCallback_Exporter_addImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Exporter_addImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Exporter_addImagePtr
newCallback_Exporter_addImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Exporter_addImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Exporter_addImagePtr
newCallback_Exporter_addImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Exporter_addImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Exporter_addImagePtr
newCallback_Exporter_addImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Exporter_addImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Exporter_addImage : public Callback_Exporter_addImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Exporter_addImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Exporter_addImagePtr
newCallback_Exporter_addImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Exporter_addImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Exporter_addImagePtr
newCallback_Exporter_addImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Exporter_addImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Exporter_addImagePtr
newCallback_Exporter_addImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Exporter_addImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Exporter_addImagePtr
newCallback_Exporter_addImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Exporter_addImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Exporter_generateXml : public Callback_Exporter_generateXml_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_Exporter_generateXml(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_generateXml(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Exporter_generateXmlPtr
newCallback_Exporter_generateXml(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Exporter_generateXml<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Exporter_generateXmlPtr
newCallback_Exporter_generateXml(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Exporter_generateXml<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Exporter_generateXml : public Callback_Exporter_generateXml_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_Exporter_generateXml(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_generateXml(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Exporter_generateXmlPtr
newCallback_Exporter_generateXml(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Exporter_generateXml<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Exporter_generateXmlPtr
newCallback_Exporter_generateXml(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Exporter_generateXml<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Exporter_generateTiff : public Callback_Exporter_generateTiff_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_Exporter_generateTiff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_generateTiff(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Exporter_generateTiffPtr
newCallback_Exporter_generateTiff(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Exporter_generateTiff<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Exporter_generateTiffPtr
newCallback_Exporter_generateTiff(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Exporter_generateTiff<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Exporter_generateTiff : public Callback_Exporter_generateTiff_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_Exporter_generateTiff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_generateTiff(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Exporter_generateTiffPtr
newCallback_Exporter_generateTiff(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Exporter_generateTiff<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Exporter_generateTiffPtr
newCallback_Exporter_generateTiff(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Exporter_generateTiff<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Exporter_read : public Callback_Exporter_read_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ByteSeq&);

    CallbackNC_Exporter_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_read(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Exporter_readPtr
newCallback_Exporter_read(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Exporter_read<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Exporter_readPtr
newCallback_Exporter_read(T* instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Exporter_read<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Exporter_read : public Callback_Exporter_read_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ByteSeq&, const CT&);

    Callback_Exporter_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ExporterPrx __proxy = ::omero::api::ExporterPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_read(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Exporter_readPtr
newCallback_Exporter_read(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Exporter_read<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Exporter_readPtr
newCallback_Exporter_read(T* instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Exporter_read<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
