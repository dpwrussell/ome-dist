// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IProjection.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IProjection_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IProjection_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ModelF.h>
#include <omero/ServicesF.h>
#include <omero/Collections.h>
#include <omero/Constants.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class IProjection;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IProjection>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IProjection*);

}

}

}

namespace omero
{

namespace api
{

class IProjection;
bool operator==(const IProjection&, const IProjection&);
bool operator<(const IProjection&, const IProjection&);
::Ice::Object* upCast(::omero::api::IProjection*);
typedef ::IceInternal::Handle< ::omero::api::IProjection> IProjectionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IProjection> IProjectionPrx;
void __patch(IProjectionPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_IProjection_projectStack : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::Ice::ByteSeq&) = 0;

    void __response(const ::Ice::ByteSeq& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IProjection_projectStack> AMI_IProjection_projectStackPtr;

class AMD_IProjection_projectStack : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Ice::ByteSeq&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IProjection_projectStack> AMD_IProjection_projectStackPtr;

class AMI_IProjection_projectPixels : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IProjection_projectPixels> AMI_IProjection_projectPixelsPtr;

class AMD_IProjection_projectPixels : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IProjection_projectPixels> AMD_IProjection_projectPixelsPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_IProjection_projectStack : public ::omero::api::AMD_IProjection_projectStack, public ::IceInternal::IncomingAsync
{
public:

    AMD_IProjection_projectStack(::IceInternal::Incoming&);

    virtual void ice_response(const ::Ice::ByteSeq&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IProjection_projectPixels : public ::omero::api::AMD_IProjection_projectPixels, public ::IceInternal::IncomingAsync
{
public:

    AMD_IProjection_projectPixels(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_IProjection_projectStack_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IProjection_projectStack_Base> Callback_IProjection_projectStackPtr;

class Callback_IProjection_projectPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IProjection_projectPixels_Base> Callback_IProjection_projectPixelsPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class IProjection : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    ::Ice::ByteSeq projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end)
    {
        return projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, 0);
    }
    ::Ice::ByteSeq projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end, const ::Ice::Context& __ctx)
    {
        return projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IProjectionPrx __proxy = ::omero::api::IProjectionPrx::uncheckedCast(__result->getProxy());
                ::Ice::ByteSeq __ret;
                try
                {
                    __ret = __proxy->end_projectStack(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::ByteSeq&)> _response;
        };
        return begin_projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end)
    {
        return begin_projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end, const ::Ice::Context& __ctx)
    {
        return begin_projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end, const ::omero::api::Callback_IProjection_projectStackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_projectStack(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int timepoint, ::Ice::Int channelIndex, ::Ice::Int stepping, ::Ice::Int start, ::Ice::Int end, const ::Ice::Context& __ctx, const ::omero::api::Callback_IProjection_projectStackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projectStack(pixelsId, pixelsType, algorithm, timepoint, channelIndex, stepping, start, end, &__ctx, __del, __cookie);
    }

    ::Ice::ByteSeq end_projectStack(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ByteSeq projectStack(::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_projectStack(::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool projectStack_async(const ::omero::api::AMI_IProjection_projectStackPtr&, ::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int);
    bool projectStack_async(const ::omero::api::AMI_IProjection_projectStackPtr&, ::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&);

    ::Ice::Long projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name)
    {
        return projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, 0);
    }
    ::Ice::Long projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IProjectionPrx __proxy = ::omero::api::IProjectionPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_projectPixels(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name)
    {
        return begin_projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name, const ::omero::api::Callback_IProjection_projectPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_projectPixels(::Ice::Long pixelsId, const ::omero::model::PixelsTypePtr& pixelsType, ::omero::constants::projection::ProjectionType algorithm, ::Ice::Int tStart, ::Ice::Int tEnd, const ::omero::sys::IntList& channelList, ::Ice::Int stepping, ::Ice::Int zStart, ::Ice::Int zEnd, const ::std::string& name, const ::Ice::Context& __ctx, const ::omero::api::Callback_IProjection_projectPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_projectPixels(pixelsId, pixelsType, algorithm, tStart, tEnd, channelList, stepping, zStart, zEnd, name, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_projectPixels(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long projectPixels(::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_projectPixels(::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool projectPixels_async(const ::omero::api::AMI_IProjection_projectPixelsPtr&, ::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::std::string&);
    bool projectPixels_async(const ::omero::api::AMI_IProjection_projectPixelsPtr&, ::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<IProjection> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_secure(bool __secure) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_twoway() const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_oneway() const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_batchOneway() const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_datagram() const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_batchDatagram() const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_compress(bool __compress) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_timeout(int __timeout) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IProjection> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<IProjection*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class IProjection : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual ::Ice::ByteSeq projectStack(::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long projectPixels(::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class IProjection : virtual public ::IceDelegate::omero::api::IProjection,
                    virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual ::Ice::ByteSeq projectStack(::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long projectPixels(::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class IProjection : virtual public ::IceDelegate::omero::api::IProjection,
                    virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual ::Ice::ByteSeq projectStack(::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long projectPixels(::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class IProjection : virtual public ::omero::api::ServiceInterface
{
public:

    typedef IProjectionPrx ProxyType;
    typedef IProjectionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void projectStack_async(const ::omero::api::AMD_IProjection_projectStackPtr&, ::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___projectStack(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void projectPixels_async(const ::omero::api::AMD_IProjection_projectPixelsPtr&, ::Ice::Long, const ::omero::model::PixelsTypePtr&, ::omero::constants::projection::ProjectionType, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___projectPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const IProjection& l, const IProjection& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IProjection& l, const IProjection& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_IProjection_projectStack : public Callback_IProjection_projectStack_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ByteSeq&);

    CallbackNC_IProjection_projectStack(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IProjectionPrx __proxy = ::omero::api::IProjectionPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_projectStack(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IProjection_projectStackPtr
newCallback_IProjection_projectStack(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IProjection_projectStack<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IProjection_projectStackPtr
newCallback_IProjection_projectStack(T* instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IProjection_projectStack<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IProjection_projectStack : public Callback_IProjection_projectStack_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ByteSeq&, const CT&);

    Callback_IProjection_projectStack(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IProjectionPrx __proxy = ::omero::api::IProjectionPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_projectStack(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IProjection_projectStackPtr
newCallback_IProjection_projectStack(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IProjection_projectStack<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IProjection_projectStackPtr
newCallback_IProjection_projectStack(T* instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IProjection_projectStack<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IProjection_projectPixels : public Callback_IProjection_projectPixels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_IProjection_projectPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IProjectionPrx __proxy = ::omero::api::IProjectionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_projectPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IProjection_projectPixelsPtr
newCallback_IProjection_projectPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IProjection_projectPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IProjection_projectPixelsPtr
newCallback_IProjection_projectPixels(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IProjection_projectPixels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IProjection_projectPixels : public Callback_IProjection_projectPixels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_IProjection_projectPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IProjectionPrx __proxy = ::omero::api::IProjectionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_projectPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IProjection_projectPixelsPtr
newCallback_IProjection_projectPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IProjection_projectPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IProjection_projectPixelsPtr
newCallback_IProjection_projectPixels(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IProjection_projectPixels<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
