// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IPixels.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IPixels_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IPixels_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/Collections.h>
#include <omero/ServicesF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class IPixels;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IPixels>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IPixels*);

}

}

}

namespace omero
{

namespace api
{

class IPixels;
bool operator==(const IPixels&, const IPixels&);
bool operator<(const IPixels&, const IPixels&);
::Ice::Object* upCast(::omero::api::IPixels*);
typedef ::IceInternal::Handle< ::omero::api::IPixels> IPixelsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IPixels> IPixelsPrx;
void __patch(IPixelsPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_IPixels_retrievePixDescription : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::PixelsPtr&) = 0;

    void __response(const ::omero::model::PixelsPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_retrievePixDescription> AMI_IPixels_retrievePixDescriptionPtr;

class AMD_IPixels_retrievePixDescription : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::PixelsPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_retrievePixDescription> AMD_IPixels_retrievePixDescriptionPtr;

class AMI_IPixels_retrieveRndSettings : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::RenderingDefPtr&) = 0;

    void __response(const ::omero::model::RenderingDefPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_retrieveRndSettings> AMI_IPixels_retrieveRndSettingsPtr;

class AMD_IPixels_retrieveRndSettings : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::RenderingDefPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_retrieveRndSettings> AMD_IPixels_retrieveRndSettingsPtr;

class AMI_IPixels_retrieveRndSettingsFor : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::RenderingDefPtr&) = 0;

    void __response(const ::omero::model::RenderingDefPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_retrieveRndSettingsFor> AMI_IPixels_retrieveRndSettingsForPtr;

class AMD_IPixels_retrieveRndSettingsFor : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::RenderingDefPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_retrieveRndSettingsFor> AMD_IPixels_retrieveRndSettingsForPtr;

class AMI_IPixels_retrieveAllRndSettings : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_retrieveAllRndSettings> AMI_IPixels_retrieveAllRndSettingsPtr;

class AMD_IPixels_retrieveAllRndSettings : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_retrieveAllRndSettings> AMD_IPixels_retrieveAllRndSettingsPtr;

class AMI_IPixels_loadRndSettings : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::RenderingDefPtr&) = 0;

    void __response(const ::omero::model::RenderingDefPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_loadRndSettings> AMI_IPixels_loadRndSettingsPtr;

class AMD_IPixels_loadRndSettings : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::RenderingDefPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_loadRndSettings> AMD_IPixels_loadRndSettingsPtr;

class AMI_IPixels_saveRndSettings : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_saveRndSettings> AMI_IPixels_saveRndSettingsPtr;

class AMD_IPixels_saveRndSettings : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_saveRndSettings> AMD_IPixels_saveRndSettingsPtr;

class AMI_IPixels_getBitDepth : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Int) = 0;

    void __response(::Ice::Int __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_getBitDepth> AMI_IPixels_getBitDepthPtr;

class AMD_IPixels_getBitDepth : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_getBitDepth> AMD_IPixels_getBitDepthPtr;

class AMI_IPixels_getEnumeration : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;

    void __response(const ::omero::model::IObjectPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_getEnumeration> AMI_IPixels_getEnumerationPtr;

class AMD_IPixels_getEnumeration : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::IObjectPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_getEnumeration> AMD_IPixels_getEnumerationPtr;

class AMI_IPixels_getAllEnumerations : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_getAllEnumerations> AMI_IPixels_getAllEnumerationsPtr;

class AMD_IPixels_getAllEnumerations : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_getAllEnumerations> AMD_IPixels_getAllEnumerationsPtr;

class AMI_IPixels_copyAndResizePixels : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::RLongPtr&) = 0;

    void __response(const ::omero::RLongPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_copyAndResizePixels> AMI_IPixels_copyAndResizePixelsPtr;

class AMD_IPixels_copyAndResizePixels : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::RLongPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_copyAndResizePixels> AMD_IPixels_copyAndResizePixelsPtr;

class AMI_IPixels_copyAndResizeImage : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::RLongPtr&) = 0;

    void __response(const ::omero::RLongPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_copyAndResizeImage> AMI_IPixels_copyAndResizeImagePtr;

class AMD_IPixels_copyAndResizeImage : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::RLongPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_copyAndResizeImage> AMD_IPixels_copyAndResizeImagePtr;

class AMI_IPixels_createImage : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::RLongPtr&) = 0;

    void __response(const ::omero::RLongPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_createImage> AMI_IPixels_createImagePtr;

class AMD_IPixels_createImage : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::RLongPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_createImage> AMD_IPixels_createImagePtr;

class AMI_IPixels_setChannelGlobalMinMax : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IPixels_setChannelGlobalMinMax> AMI_IPixels_setChannelGlobalMinMaxPtr;

class AMD_IPixels_setChannelGlobalMinMax : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IPixels_setChannelGlobalMinMax> AMD_IPixels_setChannelGlobalMinMaxPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_IPixels_retrievePixDescription : public ::omero::api::AMD_IPixels_retrievePixDescription, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_retrievePixDescription(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::PixelsPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_retrieveRndSettings : public ::omero::api::AMD_IPixels_retrieveRndSettings, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_retrieveRndSettings(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::RenderingDefPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_retrieveRndSettingsFor : public ::omero::api::AMD_IPixels_retrieveRndSettingsFor, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_retrieveRndSettingsFor(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::RenderingDefPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_retrieveAllRndSettings : public ::omero::api::AMD_IPixels_retrieveAllRndSettings, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_retrieveAllRndSettings(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_loadRndSettings : public ::omero::api::AMD_IPixels_loadRndSettings, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_loadRndSettings(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::RenderingDefPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_saveRndSettings : public ::omero::api::AMD_IPixels_saveRndSettings, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_saveRndSettings(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_getBitDepth : public ::omero::api::AMD_IPixels_getBitDepth, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_getBitDepth(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_getEnumeration : public ::omero::api::AMD_IPixels_getEnumeration, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_getEnumeration(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::IObjectPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_getAllEnumerations : public ::omero::api::AMD_IPixels_getAllEnumerations, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_getAllEnumerations(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_copyAndResizePixels : public ::omero::api::AMD_IPixels_copyAndResizePixels, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_copyAndResizePixels(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::RLongPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_copyAndResizeImage : public ::omero::api::AMD_IPixels_copyAndResizeImage, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_copyAndResizeImage(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::RLongPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_createImage : public ::omero::api::AMD_IPixels_createImage, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_createImage(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::RLongPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IPixels_setChannelGlobalMinMax : public ::omero::api::AMD_IPixels_setChannelGlobalMinMax, public ::IceInternal::IncomingAsync
{
public:

    AMD_IPixels_setChannelGlobalMinMax(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_IPixels_retrievePixDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_retrievePixDescription_Base> Callback_IPixels_retrievePixDescriptionPtr;

class Callback_IPixels_retrieveRndSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_retrieveRndSettings_Base> Callback_IPixels_retrieveRndSettingsPtr;

class Callback_IPixels_retrieveRndSettingsFor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_retrieveRndSettingsFor_Base> Callback_IPixels_retrieveRndSettingsForPtr;

class Callback_IPixels_retrieveAllRndSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_retrieveAllRndSettings_Base> Callback_IPixels_retrieveAllRndSettingsPtr;

class Callback_IPixels_loadRndSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_loadRndSettings_Base> Callback_IPixels_loadRndSettingsPtr;

class Callback_IPixels_saveRndSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_saveRndSettings_Base> Callback_IPixels_saveRndSettingsPtr;

class Callback_IPixels_getBitDepth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_getBitDepth_Base> Callback_IPixels_getBitDepthPtr;

class Callback_IPixels_getEnumeration_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_getEnumeration_Base> Callback_IPixels_getEnumerationPtr;

class Callback_IPixels_getAllEnumerations_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_getAllEnumerations_Base> Callback_IPixels_getAllEnumerationsPtr;

class Callback_IPixels_copyAndResizePixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_copyAndResizePixels_Base> Callback_IPixels_copyAndResizePixelsPtr;

class Callback_IPixels_copyAndResizeImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_copyAndResizeImage_Base> Callback_IPixels_copyAndResizeImagePtr;

class Callback_IPixels_createImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_createImage_Base> Callback_IPixels_createImagePtr;

class Callback_IPixels_setChannelGlobalMinMax_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IPixels_setChannelGlobalMinMax_Base> Callback_IPixels_setChannelGlobalMinMaxPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class IPixels : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    ::omero::model::PixelsPtr retrievePixDescription(::Ice::Long pixId)
    {
        return retrievePixDescription(pixId, 0);
    }
    ::omero::model::PixelsPtr retrievePixDescription(::Ice::Long pixId, const ::Ice::Context& __ctx)
    {
        return retrievePixDescription(pixId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_retrievePixDescription(::Ice::Long pixId, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_retrievePixDescription(pixId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_retrievePixDescription(::Ice::Long pixId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_retrievePixDescription(pixId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_retrievePixDescription(::Ice::Long pixId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_retrievePixDescription(pixId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_retrievePixDescription(::Ice::Long pixId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_retrievePixDescription(pixId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_retrievePixDescription(::Ice::Long pixId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PixelsPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PixelsPtr __ret;
                try
                {
                    __ret = __proxy->end_retrievePixDescription(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PixelsPtr&)> _response;
        };
        return begin_retrievePixDescription(pixId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_retrievePixDescription(::Ice::Long pixId)
    {
        return begin_retrievePixDescription(pixId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_retrievePixDescription(::Ice::Long pixId, const ::Ice::Context& __ctx)
    {
        return begin_retrievePixDescription(pixId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_retrievePixDescription(::Ice::Long pixId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrievePixDescription(pixId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrievePixDescription(::Ice::Long pixId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrievePixDescription(pixId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrievePixDescription(::Ice::Long pixId, const ::omero::api::Callback_IPixels_retrievePixDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrievePixDescription(pixId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrievePixDescription(::Ice::Long pixId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_retrievePixDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrievePixDescription(pixId, &__ctx, __del, __cookie);
    }

    ::omero::model::PixelsPtr end_retrievePixDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsPtr retrievePixDescription(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_retrievePixDescription(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool retrievePixDescription_async(const ::omero::api::AMI_IPixels_retrievePixDescriptionPtr&, ::Ice::Long);
    bool retrievePixDescription_async(const ::omero::api::AMI_IPixels_retrievePixDescriptionPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::model::RenderingDefPtr retrieveRndSettings(::Ice::Long pixId)
    {
        return retrieveRndSettings(pixId, 0);
    }
    ::omero::model::RenderingDefPtr retrieveRndSettings(::Ice::Long pixId, const ::Ice::Context& __ctx)
    {
        return retrieveRndSettings(pixId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_retrieveRndSettings(::Ice::Long pixId, const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_retrieveRndSettings(pixId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_retrieveRndSettings(::Ice::Long pixId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_retrieveRndSettings(pixId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_retrieveRndSettings(::Ice::Long pixId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_retrieveRndSettings(pixId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_retrieveRndSettings(::Ice::Long pixId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_retrieveRndSettings(pixId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_retrieveRndSettings(::Ice::Long pixId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::RenderingDefPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                ::omero::model::RenderingDefPtr __ret;
                try
                {
                    __ret = __proxy->end_retrieveRndSettings(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::RenderingDefPtr&)> _response;
        };
        return begin_retrieveRndSettings(pixId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_retrieveRndSettings(::Ice::Long pixId)
    {
        return begin_retrieveRndSettings(pixId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_retrieveRndSettings(::Ice::Long pixId, const ::Ice::Context& __ctx)
    {
        return begin_retrieveRndSettings(pixId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_retrieveRndSettings(::Ice::Long pixId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveRndSettings(pixId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrieveRndSettings(::Ice::Long pixId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveRndSettings(pixId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrieveRndSettings(::Ice::Long pixId, const ::omero::api::Callback_IPixels_retrieveRndSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveRndSettings(pixId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrieveRndSettings(::Ice::Long pixId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_retrieveRndSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveRndSettings(pixId, &__ctx, __del, __cookie);
    }

    ::omero::model::RenderingDefPtr end_retrieveRndSettings(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::RenderingDefPtr retrieveRndSettings(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_retrieveRndSettings(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool retrieveRndSettings_async(const ::omero::api::AMI_IPixels_retrieveRndSettingsPtr&, ::Ice::Long);
    bool retrieveRndSettings_async(const ::omero::api::AMI_IPixels_retrieveRndSettingsPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::model::RenderingDefPtr retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId)
    {
        return retrieveRndSettingsFor(pixId, userId, 0);
    }
    ::omero::model::RenderingDefPtr retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx)
    {
        return retrieveRndSettingsFor(pixId, userId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId, const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_retrieveRndSettingsFor(pixId, userId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_retrieveRndSettingsFor(pixId, userId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_retrieveRndSettingsFor(pixId, userId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_retrieveRndSettingsFor(pixId, userId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::RenderingDefPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                ::omero::model::RenderingDefPtr __ret;
                try
                {
                    __ret = __proxy->end_retrieveRndSettingsFor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::RenderingDefPtr&)> _response;
        };
        return begin_retrieveRndSettingsFor(pixId, userId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId)
    {
        return begin_retrieveRndSettingsFor(pixId, userId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx)
    {
        return begin_retrieveRndSettingsFor(pixId, userId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveRndSettingsFor(pixId, userId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveRndSettingsFor(pixId, userId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId, const ::omero::api::Callback_IPixels_retrieveRndSettingsForPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveRndSettingsFor(pixId, userId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrieveRndSettingsFor(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_retrieveRndSettingsForPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveRndSettingsFor(pixId, userId, &__ctx, __del, __cookie);
    }

    ::omero::model::RenderingDefPtr end_retrieveRndSettingsFor(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::RenderingDefPtr retrieveRndSettingsFor(::Ice::Long, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_retrieveRndSettingsFor(::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool retrieveRndSettingsFor_async(const ::omero::api::AMI_IPixels_retrieveRndSettingsForPtr&, ::Ice::Long, ::Ice::Long);
    bool retrieveRndSettingsFor_async(const ::omero::api::AMI_IPixels_retrieveRndSettingsForPtr&, ::Ice::Long, ::Ice::Long, const ::Ice::Context&);

    ::omero::api::IObjectList retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId)
    {
        return retrieveAllRndSettings(pixId, userId, 0);
    }
    ::omero::api::IObjectList retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx)
    {
        return retrieveAllRndSettings(pixId, userId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_retrieveAllRndSettings(pixId, userId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_retrieveAllRndSettings(pixId, userId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_retrieveAllRndSettings(pixId, userId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_retrieveAllRndSettings(pixId, userId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_retrieveAllRndSettings(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_retrieveAllRndSettings(pixId, userId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId)
    {
        return begin_retrieveAllRndSettings(pixId, userId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx)
    {
        return begin_retrieveAllRndSettings(pixId, userId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveAllRndSettings(pixId, userId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveAllRndSettings(pixId, userId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId, const ::omero::api::Callback_IPixels_retrieveAllRndSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveAllRndSettings(pixId, userId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_retrieveAllRndSettings(::Ice::Long pixId, ::Ice::Long userId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_retrieveAllRndSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_retrieveAllRndSettings(pixId, userId, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_retrieveAllRndSettings(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList retrieveAllRndSettings(::Ice::Long, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_retrieveAllRndSettings(::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool retrieveAllRndSettings_async(const ::omero::api::AMI_IPixels_retrieveAllRndSettingsPtr&, ::Ice::Long, ::Ice::Long);
    bool retrieveAllRndSettings_async(const ::omero::api::AMI_IPixels_retrieveAllRndSettingsPtr&, ::Ice::Long, ::Ice::Long, const ::Ice::Context&);

    ::omero::model::RenderingDefPtr loadRndSettings(::Ice::Long renderingSettingsId)
    {
        return loadRndSettings(renderingSettingsId, 0);
    }
    ::omero::model::RenderingDefPtr loadRndSettings(::Ice::Long renderingSettingsId, const ::Ice::Context& __ctx)
    {
        return loadRndSettings(renderingSettingsId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadRndSettings(::Ice::Long renderingSettingsId, const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadRndSettings(renderingSettingsId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadRndSettings(::Ice::Long renderingSettingsId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadRndSettings(renderingSettingsId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadRndSettings(::Ice::Long renderingSettingsId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadRndSettings(renderingSettingsId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadRndSettings(::Ice::Long renderingSettingsId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadRndSettings(renderingSettingsId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadRndSettings(::Ice::Long renderingSettingsId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::RenderingDefPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                ::omero::model::RenderingDefPtr __ret;
                try
                {
                    __ret = __proxy->end_loadRndSettings(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::RenderingDefPtr&)> _response;
        };
        return begin_loadRndSettings(renderingSettingsId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadRndSettings(::Ice::Long renderingSettingsId)
    {
        return begin_loadRndSettings(renderingSettingsId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadRndSettings(::Ice::Long renderingSettingsId, const ::Ice::Context& __ctx)
    {
        return begin_loadRndSettings(renderingSettingsId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadRndSettings(::Ice::Long renderingSettingsId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadRndSettings(renderingSettingsId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadRndSettings(::Ice::Long renderingSettingsId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadRndSettings(renderingSettingsId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadRndSettings(::Ice::Long renderingSettingsId, const ::omero::api::Callback_IPixels_loadRndSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadRndSettings(renderingSettingsId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadRndSettings(::Ice::Long renderingSettingsId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_loadRndSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadRndSettings(renderingSettingsId, &__ctx, __del, __cookie);
    }

    ::omero::model::RenderingDefPtr end_loadRndSettings(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::RenderingDefPtr loadRndSettings(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadRndSettings(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool loadRndSettings_async(const ::omero::api::AMI_IPixels_loadRndSettingsPtr&, ::Ice::Long);
    bool loadRndSettings_async(const ::omero::api::AMI_IPixels_loadRndSettingsPtr&, ::Ice::Long, const ::Ice::Context&);

    void saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings)
    {
        saveRndSettings(rndSettings, 0);
    }
    void saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings, const ::Ice::Context& __ctx)
    {
        saveRndSettings(rndSettings, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveRndSettings(rndSettings, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveRndSettings(rndSettings, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saveRndSettings(rndSettings, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveRndSettings(rndSettings, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_saveRndSettings(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_saveRndSettings(rndSettings, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings)
    {
        return begin_saveRndSettings(rndSettings, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings, const ::Ice::Context& __ctx)
    {
        return begin_saveRndSettings(rndSettings, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveRndSettings(rndSettings, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveRndSettings(rndSettings, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings, const ::omero::api::Callback_IPixels_saveRndSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveRndSettings(rndSettings, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveRndSettings(const ::omero::model::RenderingDefPtr& rndSettings, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_saveRndSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveRndSettings(rndSettings, &__ctx, __del, __cookie);
    }

    void end_saveRndSettings(const ::Ice::AsyncResultPtr&);
    
private:

    void saveRndSettings(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saveRndSettings(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool saveRndSettings_async(const ::omero::api::AMI_IPixels_saveRndSettingsPtr&, const ::omero::model::RenderingDefPtr&);
    bool saveRndSettings_async(const ::omero::api::AMI_IPixels_saveRndSettingsPtr&, const ::omero::model::RenderingDefPtr&, const ::Ice::Context&);

    ::Ice::Int getBitDepth(const ::omero::model::PixelsTypePtr& type)
    {
        return getBitDepth(type, 0);
    }
    ::Ice::Int getBitDepth(const ::omero::model::PixelsTypePtr& type, const ::Ice::Context& __ctx)
    {
        return getBitDepth(type, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBitDepth(const ::omero::model::PixelsTypePtr& type, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBitDepth(type, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBitDepth(const ::omero::model::PixelsTypePtr& type, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBitDepth(type, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBitDepth(const ::omero::model::PixelsTypePtr& type, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBitDepth(type, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBitDepth(const ::omero::model::PixelsTypePtr& type, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBitDepth(type, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBitDepth(const ::omero::model::PixelsTypePtr& type, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getBitDepth(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getBitDepth(type, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBitDepth(const ::omero::model::PixelsTypePtr& type)
    {
        return begin_getBitDepth(type, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBitDepth(const ::omero::model::PixelsTypePtr& type, const ::Ice::Context& __ctx)
    {
        return begin_getBitDepth(type, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBitDepth(const ::omero::model::PixelsTypePtr& type, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBitDepth(type, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBitDepth(const ::omero::model::PixelsTypePtr& type, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBitDepth(type, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBitDepth(const ::omero::model::PixelsTypePtr& type, const ::omero::api::Callback_IPixels_getBitDepthPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBitDepth(type, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBitDepth(const ::omero::model::PixelsTypePtr& type, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_getBitDepthPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBitDepth(type, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_getBitDepth(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getBitDepth(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBitDepth(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getBitDepth_async(const ::omero::api::AMI_IPixels_getBitDepthPtr&, const ::omero::model::PixelsTypePtr&);
    bool getBitDepth_async(const ::omero::api::AMI_IPixels_getBitDepthPtr&, const ::omero::model::PixelsTypePtr&, const ::Ice::Context&);

    ::omero::model::IObjectPtr getEnumeration(const ::std::string& enumClass, const ::std::string& value)
    {
        return getEnumeration(enumClass, value, 0);
    }
    ::omero::model::IObjectPtr getEnumeration(const ::std::string& enumClass, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return getEnumeration(enumClass, value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEnumeration(const ::std::string& enumClass, const ::std::string& value, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEnumeration(enumClass, value, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEnumeration(const ::std::string& enumClass, const ::std::string& value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEnumeration(enumClass, value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEnumeration(const ::std::string& enumClass, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEnumeration(enumClass, value, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEnumeration(const ::std::string& enumClass, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEnumeration(enumClass, value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEnumeration(const ::std::string& enumClass, const ::std::string& value, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::IObjectPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::IObjectPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                ::omero::model::IObjectPtr __ret;
                try
                {
                    __ret = __proxy->end_getEnumeration(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::IObjectPtr&)> _response;
        };
        return begin_getEnumeration(enumClass, value, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEnumeration(const ::std::string& enumClass, const ::std::string& value)
    {
        return begin_getEnumeration(enumClass, value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEnumeration(const ::std::string& enumClass, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return begin_getEnumeration(enumClass, value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEnumeration(const ::std::string& enumClass, const ::std::string& value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEnumeration(enumClass, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEnumeration(const ::std::string& enumClass, const ::std::string& value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEnumeration(enumClass, value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEnumeration(const ::std::string& enumClass, const ::std::string& value, const ::omero::api::Callback_IPixels_getEnumerationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEnumeration(enumClass, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEnumeration(const ::std::string& enumClass, const ::std::string& value, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_getEnumerationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEnumeration(enumClass, value, &__ctx, __del, __cookie);
    }

    ::omero::model::IObjectPtr end_getEnumeration(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::IObjectPtr getEnumeration(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEnumeration(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getEnumeration_async(const ::omero::api::AMI_IPixels_getEnumerationPtr&, const ::std::string&, const ::std::string&);
    bool getEnumeration_async(const ::omero::api::AMI_IPixels_getEnumerationPtr&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    ::omero::api::IObjectList getAllEnumerations(const ::std::string& enumClass)
    {
        return getAllEnumerations(enumClass, 0);
    }
    ::omero::api::IObjectList getAllEnumerations(const ::std::string& enumClass, const ::Ice::Context& __ctx)
    {
        return getAllEnumerations(enumClass, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAllEnumerations(const ::std::string& enumClass, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllEnumerations(enumClass, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllEnumerations(const ::std::string& enumClass, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllEnumerations(enumClass, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAllEnumerations(const ::std::string& enumClass, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllEnumerations(enumClass, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllEnumerations(const ::std::string& enumClass, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllEnumerations(enumClass, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAllEnumerations(const ::std::string& enumClass, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_getAllEnumerations(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_getAllEnumerations(enumClass, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAllEnumerations(const ::std::string& enumClass)
    {
        return begin_getAllEnumerations(enumClass, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllEnumerations(const ::std::string& enumClass, const ::Ice::Context& __ctx)
    {
        return begin_getAllEnumerations(enumClass, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllEnumerations(const ::std::string& enumClass, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllEnumerations(enumClass, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllEnumerations(const ::std::string& enumClass, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllEnumerations(enumClass, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllEnumerations(const ::std::string& enumClass, const ::omero::api::Callback_IPixels_getAllEnumerationsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllEnumerations(enumClass, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllEnumerations(const ::std::string& enumClass, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_getAllEnumerationsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllEnumerations(enumClass, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_getAllEnumerations(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList getAllEnumerations(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAllEnumerations(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getAllEnumerations_async(const ::omero::api::AMI_IPixels_getAllEnumerationsPtr&, const ::std::string&);
    bool getAllEnumerations_async(const ::omero::api::AMI_IPixels_getAllEnumerationsPtr&, const ::std::string&, const ::Ice::Context&);

    ::omero::RLongPtr copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats)
    {
        return copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0);
    }
    ::omero::RLongPtr copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx)
    {
        return copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RLongPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                ::omero::RLongPtr __ret;
                try
                {
                    __ret = __proxy->end_copyAndResizePixels(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RLongPtr&)> _response;
        };
        return begin_copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats)
    {
        return begin_copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx)
    {
        return begin_copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::omero::api::Callback_IPixels_copyAndResizePixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAndResizePixels(::Ice::Long pixelsId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_copyAndResizePixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAndResizePixels(pixelsId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx, __del, __cookie);
    }

    ::omero::RLongPtr end_copyAndResizePixels(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RLongPtr copyAndResizePixels(::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAndResizePixels(::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool copyAndResizePixels_async(const ::omero::api::AMI_IPixels_copyAndResizePixelsPtr&, ::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool);
    bool copyAndResizePixels_async(const ::omero::api::AMI_IPixels_copyAndResizePixelsPtr&, ::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context&);

    ::omero::RLongPtr copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats)
    {
        return copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0);
    }
    ::omero::RLongPtr copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx)
    {
        return copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RLongPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                ::omero::RLongPtr __ret;
                try
                {
                    __ret = __proxy->end_copyAndResizeImage(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RLongPtr&)> _response;
        };
        return begin_copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats)
    {
        return begin_copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx)
    {
        return begin_copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::omero::api::Callback_IPixels_copyAndResizeImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAndResizeImage(::Ice::Long imageId, const ::omero::RIntPtr& sizeX, const ::omero::RIntPtr& sizeY, const ::omero::RIntPtr& sizeZ, const ::omero::RIntPtr& sizeT, const ::omero::sys::IntList& channelList, const ::std::string& methodology, bool copyStats, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_copyAndResizeImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAndResizeImage(imageId, sizeX, sizeY, sizeZ, sizeT, channelList, methodology, copyStats, &__ctx, __del, __cookie);
    }

    ::omero::RLongPtr end_copyAndResizeImage(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RLongPtr copyAndResizeImage(::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAndResizeImage(::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool copyAndResizeImage_async(const ::omero::api::AMI_IPixels_copyAndResizeImagePtr&, ::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool);
    bool copyAndResizeImage_async(const ::omero::api::AMI_IPixels_copyAndResizeImagePtr&, ::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context&);

    ::omero::RLongPtr createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description)
    {
        return createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, 0);
    }
    ::omero::RLongPtr createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description, const ::Ice::Context& __ctx)
    {
        return createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RLongPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                ::omero::RLongPtr __ret;
                try
                {
                    __ret = __proxy->end_createImage(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RLongPtr&)> _response;
        };
        return begin_createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description)
    {
        return begin_createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description, const ::Ice::Context& __ctx)
    {
        return begin_createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description, const ::omero::api::Callback_IPixels_createImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createImage(::Ice::Int sizeX, ::Ice::Int sizeY, ::Ice::Int sizeZ, ::Ice::Int sizeT, const ::omero::sys::IntList& channelList, const ::omero::model::PixelsTypePtr& pixelsType, const ::std::string& name, const ::std::string& description, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_createImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createImage(sizeX, sizeY, sizeZ, sizeT, channelList, pixelsType, name, description, &__ctx, __del, __cookie);
    }

    ::omero::RLongPtr end_createImage(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RLongPtr createImage(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, const ::omero::model::PixelsTypePtr&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createImage(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, const ::omero::model::PixelsTypePtr&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool createImage_async(const ::omero::api::AMI_IPixels_createImagePtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, const ::omero::model::PixelsTypePtr&, const ::std::string&, const ::std::string&);
    bool createImage_async(const ::omero::api::AMI_IPixels_createImagePtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, const ::omero::model::PixelsTypePtr&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    void setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max)
    {
        setChannelGlobalMinMax(pixelsId, channelIndex, min, max, 0);
    }
    void setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max, const ::Ice::Context& __ctx)
    {
        setChannelGlobalMinMax(pixelsId, channelIndex, min, max, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setChannelGlobalMinMax(pixelsId, channelIndex, min, max, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setChannelGlobalMinMax(pixelsId, channelIndex, min, max, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setChannelGlobalMinMax(pixelsId, channelIndex, min, max, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setChannelGlobalMinMax(pixelsId, channelIndex, min, max, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setChannelGlobalMinMax(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setChannelGlobalMinMax(pixelsId, channelIndex, min, max, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max)
    {
        return begin_setChannelGlobalMinMax(pixelsId, channelIndex, min, max, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max, const ::Ice::Context& __ctx)
    {
        return begin_setChannelGlobalMinMax(pixelsId, channelIndex, min, max, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChannelGlobalMinMax(pixelsId, channelIndex, min, max, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChannelGlobalMinMax(pixelsId, channelIndex, min, max, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max, const ::omero::api::Callback_IPixels_setChannelGlobalMinMaxPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChannelGlobalMinMax(pixelsId, channelIndex, min, max, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChannelGlobalMinMax(::Ice::Long pixelsId, ::Ice::Int channelIndex, ::Ice::Double min, ::Ice::Double max, const ::Ice::Context& __ctx, const ::omero::api::Callback_IPixels_setChannelGlobalMinMaxPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChannelGlobalMinMax(pixelsId, channelIndex, min, max, &__ctx, __del, __cookie);
    }

    void end_setChannelGlobalMinMax(const ::Ice::AsyncResultPtr&);
    
private:

    void setChannelGlobalMinMax(::Ice::Long, ::Ice::Int, ::Ice::Double, ::Ice::Double, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setChannelGlobalMinMax(::Ice::Long, ::Ice::Int, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool setChannelGlobalMinMax_async(const ::omero::api::AMI_IPixels_setChannelGlobalMinMaxPtr&, ::Ice::Long, ::Ice::Int, ::Ice::Double, ::Ice::Double);
    bool setChannelGlobalMinMax_async(const ::omero::api::AMI_IPixels_setChannelGlobalMinMaxPtr&, ::Ice::Long, ::Ice::Int, ::Ice::Double, ::Ice::Double, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<IPixels> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_secure(bool __secure) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_twoway() const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_oneway() const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_batchOneway() const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_datagram() const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_batchDatagram() const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_compress(bool __compress) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_timeout(int __timeout) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IPixels> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<IPixels*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class IPixels : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual ::omero::model::PixelsPtr retrievePixDescription(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::RenderingDefPtr retrieveRndSettings(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::RenderingDefPtr retrieveRndSettingsFor(::Ice::Long, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList retrieveAllRndSettings(::Ice::Long, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::RenderingDefPtr loadRndSettings(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void saveRndSettings(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getBitDepth(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::IObjectPtr getEnumeration(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList getAllEnumerations(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RLongPtr copyAndResizePixels(::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RLongPtr copyAndResizeImage(::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RLongPtr createImage(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, const ::omero::model::PixelsTypePtr&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setChannelGlobalMinMax(::Ice::Long, ::Ice::Int, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class IPixels : virtual public ::IceDelegate::omero::api::IPixels,
                virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual ::omero::model::PixelsPtr retrievePixDescription(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::RenderingDefPtr retrieveRndSettings(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::RenderingDefPtr retrieveRndSettingsFor(::Ice::Long, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList retrieveAllRndSettings(::Ice::Long, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::RenderingDefPtr loadRndSettings(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void saveRndSettings(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getBitDepth(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr getEnumeration(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList getAllEnumerations(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr copyAndResizePixels(::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr copyAndResizeImage(::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr createImage(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, const ::omero::model::PixelsTypePtr&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setChannelGlobalMinMax(::Ice::Long, ::Ice::Int, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class IPixels : virtual public ::IceDelegate::omero::api::IPixels,
                virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual ::omero::model::PixelsPtr retrievePixDescription(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::RenderingDefPtr retrieveRndSettings(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::RenderingDefPtr retrieveRndSettingsFor(::Ice::Long, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList retrieveAllRndSettings(::Ice::Long, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::RenderingDefPtr loadRndSettings(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void saveRndSettings(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getBitDepth(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::IObjectPtr getEnumeration(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList getAllEnumerations(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr copyAndResizePixels(::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr copyAndResizeImage(::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr createImage(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, const ::omero::model::PixelsTypePtr&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setChannelGlobalMinMax(::Ice::Long, ::Ice::Int, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class IPixels : virtual public ::omero::api::ServiceInterface
{
public:

    typedef IPixelsPrx ProxyType;
    typedef IPixelsPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void retrievePixDescription_async(const ::omero::api::AMD_IPixels_retrievePixDescriptionPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___retrievePixDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void retrieveRndSettings_async(const ::omero::api::AMD_IPixels_retrieveRndSettingsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___retrieveRndSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void retrieveRndSettingsFor_async(const ::omero::api::AMD_IPixels_retrieveRndSettingsForPtr&, ::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___retrieveRndSettingsFor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void retrieveAllRndSettings_async(const ::omero::api::AMD_IPixels_retrieveAllRndSettingsPtr&, ::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___retrieveAllRndSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadRndSettings_async(const ::omero::api::AMD_IPixels_loadRndSettingsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadRndSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saveRndSettings_async(const ::omero::api::AMD_IPixels_saveRndSettingsPtr&, const ::omero::model::RenderingDefPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saveRndSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getBitDepth_async(const ::omero::api::AMD_IPixels_getBitDepthPtr&, const ::omero::model::PixelsTypePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBitDepth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getEnumeration_async(const ::omero::api::AMD_IPixels_getEnumerationPtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEnumeration(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getAllEnumerations_async(const ::omero::api::AMD_IPixels_getAllEnumerationsPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAllEnumerations(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void copyAndResizePixels_async(const ::omero::api::AMD_IPixels_copyAndResizePixelsPtr&, ::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAndResizePixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void copyAndResizeImage_async(const ::omero::api::AMD_IPixels_copyAndResizeImagePtr&, ::Ice::Long, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::sys::IntList&, const ::std::string&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAndResizeImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createImage_async(const ::omero::api::AMD_IPixels_createImagePtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::omero::sys::IntList&, const ::omero::model::PixelsTypePtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setChannelGlobalMinMax_async(const ::omero::api::AMD_IPixels_setChannelGlobalMinMaxPtr&, ::Ice::Long, ::Ice::Int, ::Ice::Double, ::Ice::Double, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setChannelGlobalMinMax(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const IPixels& l, const IPixels& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IPixels& l, const IPixels& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_IPixels_retrievePixDescription : public Callback_IPixels_retrievePixDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&);

    CallbackNC_IPixels_retrievePixDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_retrievePixDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IPixels_retrievePixDescriptionPtr
newCallback_IPixels_retrievePixDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_retrievePixDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_retrievePixDescriptionPtr
newCallback_IPixels_retrievePixDescription(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_retrievePixDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_retrievePixDescription : public Callback_IPixels_retrievePixDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&, const CT&);

    Callback_IPixels_retrievePixDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_retrievePixDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_retrievePixDescriptionPtr
newCallback_IPixels_retrievePixDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_retrievePixDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_retrievePixDescriptionPtr
newCallback_IPixels_retrievePixDescription(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_retrievePixDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_retrieveRndSettings : public Callback_IPixels_retrieveRndSettings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::RenderingDefPtr&);

    CallbackNC_IPixels_retrieveRndSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::RenderingDefPtr __ret;
        try
        {
            __ret = __proxy->end_retrieveRndSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IPixels_retrieveRndSettingsPtr
newCallback_IPixels_retrieveRndSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_retrieveRndSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_retrieveRndSettingsPtr
newCallback_IPixels_retrieveRndSettings(T* instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_retrieveRndSettings<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_retrieveRndSettings : public Callback_IPixels_retrieveRndSettings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::RenderingDefPtr&, const CT&);

    Callback_IPixels_retrieveRndSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::RenderingDefPtr __ret;
        try
        {
            __ret = __proxy->end_retrieveRndSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_retrieveRndSettingsPtr
newCallback_IPixels_retrieveRndSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_retrieveRndSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_retrieveRndSettingsPtr
newCallback_IPixels_retrieveRndSettings(T* instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_retrieveRndSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_retrieveRndSettingsFor : public Callback_IPixels_retrieveRndSettingsFor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::RenderingDefPtr&);

    CallbackNC_IPixels_retrieveRndSettingsFor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::RenderingDefPtr __ret;
        try
        {
            __ret = __proxy->end_retrieveRndSettingsFor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IPixels_retrieveRndSettingsForPtr
newCallback_IPixels_retrieveRndSettingsFor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_retrieveRndSettingsFor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_retrieveRndSettingsForPtr
newCallback_IPixels_retrieveRndSettingsFor(T* instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_retrieveRndSettingsFor<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_retrieveRndSettingsFor : public Callback_IPixels_retrieveRndSettingsFor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::RenderingDefPtr&, const CT&);

    Callback_IPixels_retrieveRndSettingsFor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::RenderingDefPtr __ret;
        try
        {
            __ret = __proxy->end_retrieveRndSettingsFor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_retrieveRndSettingsForPtr
newCallback_IPixels_retrieveRndSettingsFor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_retrieveRndSettingsFor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_retrieveRndSettingsForPtr
newCallback_IPixels_retrieveRndSettingsFor(T* instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_retrieveRndSettingsFor<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_retrieveAllRndSettings : public Callback_IPixels_retrieveAllRndSettings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IPixels_retrieveAllRndSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_retrieveAllRndSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IPixels_retrieveAllRndSettingsPtr
newCallback_IPixels_retrieveAllRndSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_retrieveAllRndSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_retrieveAllRndSettingsPtr
newCallback_IPixels_retrieveAllRndSettings(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_retrieveAllRndSettings<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_retrieveAllRndSettings : public Callback_IPixels_retrieveAllRndSettings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IPixels_retrieveAllRndSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_retrieveAllRndSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_retrieveAllRndSettingsPtr
newCallback_IPixels_retrieveAllRndSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_retrieveAllRndSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_retrieveAllRndSettingsPtr
newCallback_IPixels_retrieveAllRndSettings(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_retrieveAllRndSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_loadRndSettings : public Callback_IPixels_loadRndSettings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::RenderingDefPtr&);

    CallbackNC_IPixels_loadRndSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::RenderingDefPtr __ret;
        try
        {
            __ret = __proxy->end_loadRndSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IPixels_loadRndSettingsPtr
newCallback_IPixels_loadRndSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_loadRndSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_loadRndSettingsPtr
newCallback_IPixels_loadRndSettings(T* instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_loadRndSettings<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_loadRndSettings : public Callback_IPixels_loadRndSettings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::RenderingDefPtr&, const CT&);

    Callback_IPixels_loadRndSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::RenderingDefPtr __ret;
        try
        {
            __ret = __proxy->end_loadRndSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_loadRndSettingsPtr
newCallback_IPixels_loadRndSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_loadRndSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_loadRndSettingsPtr
newCallback_IPixels_loadRndSettings(T* instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_loadRndSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_saveRndSettings : public Callback_IPixels_saveRndSettings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IPixels_saveRndSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saveRndSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IPixels_saveRndSettingsPtr
newCallback_IPixels_saveRndSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_saveRndSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_saveRndSettingsPtr
newCallback_IPixels_saveRndSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_saveRndSettings<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IPixels_saveRndSettingsPtr
newCallback_IPixels_saveRndSettings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_saveRndSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_saveRndSettingsPtr
newCallback_IPixels_saveRndSettings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_saveRndSettings<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_saveRndSettings : public Callback_IPixels_saveRndSettings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IPixels_saveRndSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saveRndSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_saveRndSettingsPtr
newCallback_IPixels_saveRndSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_saveRndSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_saveRndSettingsPtr
newCallback_IPixels_saveRndSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_saveRndSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_saveRndSettingsPtr
newCallback_IPixels_saveRndSettings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_saveRndSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_saveRndSettingsPtr
newCallback_IPixels_saveRndSettings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_saveRndSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_getBitDepth : public Callback_IPixels_getBitDepth_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_IPixels_getBitDepth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getBitDepth(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IPixels_getBitDepthPtr
newCallback_IPixels_getBitDepth(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_getBitDepth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_getBitDepthPtr
newCallback_IPixels_getBitDepth(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_getBitDepth<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_getBitDepth : public Callback_IPixels_getBitDepth_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_IPixels_getBitDepth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getBitDepth(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_getBitDepthPtr
newCallback_IPixels_getBitDepth(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_getBitDepth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_getBitDepthPtr
newCallback_IPixels_getBitDepth(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_getBitDepth<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_getEnumeration : public Callback_IPixels_getEnumeration_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&);

    CallbackNC_IPixels_getEnumeration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_getEnumeration(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IPixels_getEnumerationPtr
newCallback_IPixels_getEnumeration(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_getEnumeration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_getEnumerationPtr
newCallback_IPixels_getEnumeration(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_getEnumeration<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_getEnumeration : public Callback_IPixels_getEnumeration_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&, const CT&);

    Callback_IPixels_getEnumeration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_getEnumeration(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_getEnumerationPtr
newCallback_IPixels_getEnumeration(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_getEnumeration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_getEnumerationPtr
newCallback_IPixels_getEnumeration(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_getEnumeration<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_getAllEnumerations : public Callback_IPixels_getAllEnumerations_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IPixels_getAllEnumerations(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getAllEnumerations(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IPixels_getAllEnumerationsPtr
newCallback_IPixels_getAllEnumerations(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_getAllEnumerations<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_getAllEnumerationsPtr
newCallback_IPixels_getAllEnumerations(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_getAllEnumerations<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_getAllEnumerations : public Callback_IPixels_getAllEnumerations_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IPixels_getAllEnumerations(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getAllEnumerations(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_getAllEnumerationsPtr
newCallback_IPixels_getAllEnumerations(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_getAllEnumerations<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_getAllEnumerationsPtr
newCallback_IPixels_getAllEnumerations(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_getAllEnumerations<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_copyAndResizePixels : public Callback_IPixels_copyAndResizePixels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RLongPtr&);

    CallbackNC_IPixels_copyAndResizePixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_copyAndResizePixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IPixels_copyAndResizePixelsPtr
newCallback_IPixels_copyAndResizePixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_copyAndResizePixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_copyAndResizePixelsPtr
newCallback_IPixels_copyAndResizePixels(T* instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_copyAndResizePixels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_copyAndResizePixels : public Callback_IPixels_copyAndResizePixels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RLongPtr&, const CT&);

    Callback_IPixels_copyAndResizePixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_copyAndResizePixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_copyAndResizePixelsPtr
newCallback_IPixels_copyAndResizePixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_copyAndResizePixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_copyAndResizePixelsPtr
newCallback_IPixels_copyAndResizePixels(T* instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_copyAndResizePixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_copyAndResizeImage : public Callback_IPixels_copyAndResizeImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RLongPtr&);

    CallbackNC_IPixels_copyAndResizeImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_copyAndResizeImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IPixels_copyAndResizeImagePtr
newCallback_IPixels_copyAndResizeImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_copyAndResizeImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_copyAndResizeImagePtr
newCallback_IPixels_copyAndResizeImage(T* instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_copyAndResizeImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_copyAndResizeImage : public Callback_IPixels_copyAndResizeImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RLongPtr&, const CT&);

    Callback_IPixels_copyAndResizeImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_copyAndResizeImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_copyAndResizeImagePtr
newCallback_IPixels_copyAndResizeImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_copyAndResizeImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_copyAndResizeImagePtr
newCallback_IPixels_copyAndResizeImage(T* instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_copyAndResizeImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_createImage : public Callback_IPixels_createImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RLongPtr&);

    CallbackNC_IPixels_createImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_createImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IPixels_createImagePtr
newCallback_IPixels_createImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_createImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_createImagePtr
newCallback_IPixels_createImage(T* instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_createImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_createImage : public Callback_IPixels_createImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RLongPtr&, const CT&);

    Callback_IPixels_createImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_createImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_createImagePtr
newCallback_IPixels_createImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_createImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_createImagePtr
newCallback_IPixels_createImage(T* instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_createImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IPixels_setChannelGlobalMinMax : public Callback_IPixels_setChannelGlobalMinMax_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IPixels_setChannelGlobalMinMax(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setChannelGlobalMinMax(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IPixels_setChannelGlobalMinMaxPtr
newCallback_IPixels_setChannelGlobalMinMax(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_setChannelGlobalMinMax<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_setChannelGlobalMinMaxPtr
newCallback_IPixels_setChannelGlobalMinMax(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_setChannelGlobalMinMax<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IPixels_setChannelGlobalMinMaxPtr
newCallback_IPixels_setChannelGlobalMinMax(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_setChannelGlobalMinMax<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IPixels_setChannelGlobalMinMaxPtr
newCallback_IPixels_setChannelGlobalMinMax(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IPixels_setChannelGlobalMinMax<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IPixels_setChannelGlobalMinMax : public Callback_IPixels_setChannelGlobalMinMax_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IPixels_setChannelGlobalMinMax(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::IPixelsPrx __proxy = ::omero::api::IPixelsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setChannelGlobalMinMax(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IPixels_setChannelGlobalMinMaxPtr
newCallback_IPixels_setChannelGlobalMinMax(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_setChannelGlobalMinMax<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_setChannelGlobalMinMaxPtr
newCallback_IPixels_setChannelGlobalMinMax(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_setChannelGlobalMinMax<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_setChannelGlobalMinMaxPtr
newCallback_IPixels_setChannelGlobalMinMax(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_setChannelGlobalMinMax<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IPixels_setChannelGlobalMinMaxPtr
newCallback_IPixels_setChannelGlobalMinMax(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IPixels_setChannelGlobalMinMax<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
