// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IShare.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IShare_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_IShare_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ModelF.h>
#include <omero/ServicesF.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class IShare;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IShare>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IShare*);

}

}

}

namespace omero
{

namespace api
{

class IShare;
bool operator==(const IShare&, const IShare&);
bool operator<(const IShare&, const IShare&);
::Ice::Object* upCast(::omero::api::IShare*);
typedef ::IceInternal::Handle< ::omero::api::IShare> ISharePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IShare> ISharePrx;
void __patch(ISharePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_IShare_activate : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_activate> AMI_IShare_activatePtr;

class AMD_IShare_activate : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_activate> AMD_IShare_activatePtr;

class AMI_IShare_deactivate : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_deactivate> AMI_IShare_deactivatePtr;

class AMD_IShare_deactivate : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_deactivate> AMD_IShare_deactivatePtr;

class AMI_IShare_getShare : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::SharePtr&) = 0;

    void __response(const ::omero::model::SharePtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getShare> AMI_IShare_getSharePtr;

class AMD_IShare_getShare : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::SharePtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getShare> AMD_IShare_getSharePtr;

class AMI_IShare_getMemberCount : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::sys::CountMap&) = 0;

    void __response(const ::omero::sys::CountMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getMemberCount> AMI_IShare_getMemberCountPtr;

class AMD_IShare_getMemberCount : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::sys::CountMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getMemberCount> AMD_IShare_getMemberCountPtr;

class AMI_IShare_getOwnShares : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::SessionList&) = 0;

    void __response(const ::omero::api::SessionList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getOwnShares> AMI_IShare_getOwnSharesPtr;

class AMD_IShare_getOwnShares : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::SessionList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getOwnShares> AMD_IShare_getOwnSharesPtr;

class AMI_IShare_getMemberShares : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::SessionList&) = 0;

    void __response(const ::omero::api::SessionList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getMemberShares> AMI_IShare_getMemberSharesPtr;

class AMD_IShare_getMemberShares : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::SessionList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getMemberShares> AMD_IShare_getMemberSharesPtr;

class AMI_IShare_getSharesOwnedBy : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::SessionList&) = 0;

    void __response(const ::omero::api::SessionList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getSharesOwnedBy> AMI_IShare_getSharesOwnedByPtr;

class AMD_IShare_getSharesOwnedBy : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::SessionList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getSharesOwnedBy> AMD_IShare_getSharesOwnedByPtr;

class AMI_IShare_getMemberSharesFor : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::SessionList&) = 0;

    void __response(const ::omero::api::SessionList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getMemberSharesFor> AMI_IShare_getMemberSharesForPtr;

class AMD_IShare_getMemberSharesFor : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::SessionList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getMemberSharesFor> AMD_IShare_getMemberSharesForPtr;

class AMI_IShare_getContents : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getContents> AMI_IShare_getContentsPtr;

class AMD_IShare_getContents : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getContents> AMD_IShare_getContentsPtr;

class AMI_IShare_getContentSubList : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getContentSubList> AMI_IShare_getContentSubListPtr;

class AMD_IShare_getContentSubList : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getContentSubList> AMD_IShare_getContentSubListPtr;

class AMI_IShare_getContentSize : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Int) = 0;

    void __response(::Ice::Int __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getContentSize> AMI_IShare_getContentSizePtr;

class AMD_IShare_getContentSize : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getContentSize> AMD_IShare_getContentSizePtr;

class AMI_IShare_getContentMap : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IdListMap&) = 0;

    void __response(const ::omero::api::IdListMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getContentMap> AMI_IShare_getContentMapPtr;

class AMD_IShare_getContentMap : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IdListMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getContentMap> AMD_IShare_getContentMapPtr;

class AMI_IShare_createShare : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_createShare> AMI_IShare_createSharePtr;

class AMD_IShare_createShare : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_createShare> AMD_IShare_createSharePtr;

class AMI_IShare_setDescription : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_setDescription> AMI_IShare_setDescriptionPtr;

class AMD_IShare_setDescription : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_setDescription> AMD_IShare_setDescriptionPtr;

class AMI_IShare_setExpiration : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_setExpiration> AMI_IShare_setExpirationPtr;

class AMD_IShare_setExpiration : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_setExpiration> AMD_IShare_setExpirationPtr;

class AMI_IShare_setActive : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_setActive> AMI_IShare_setActivePtr;

class AMD_IShare_setActive : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_setActive> AMD_IShare_setActivePtr;

class AMI_IShare_closeShare : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_closeShare> AMI_IShare_closeSharePtr;

class AMD_IShare_closeShare : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_closeShare> AMD_IShare_closeSharePtr;

class AMI_IShare_addObjects : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_addObjects> AMI_IShare_addObjectsPtr;

class AMD_IShare_addObjects : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_addObjects> AMD_IShare_addObjectsPtr;

class AMI_IShare_addObject : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_addObject> AMI_IShare_addObjectPtr;

class AMD_IShare_addObject : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_addObject> AMD_IShare_addObjectPtr;

class AMI_IShare_removeObjects : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_removeObjects> AMI_IShare_removeObjectsPtr;

class AMD_IShare_removeObjects : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_removeObjects> AMD_IShare_removeObjectsPtr;

class AMI_IShare_removeObject : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_removeObject> AMI_IShare_removeObjectPtr;

class AMD_IShare_removeObject : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_removeObject> AMD_IShare_removeObjectPtr;

class AMI_IShare_getCommentCount : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::sys::CountMap&) = 0;

    void __response(const ::omero::sys::CountMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getCommentCount> AMI_IShare_getCommentCountPtr;

class AMD_IShare_getCommentCount : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::sys::CountMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getCommentCount> AMD_IShare_getCommentCountPtr;

class AMI_IShare_getComments : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::AnnotationList&) = 0;

    void __response(const ::omero::api::AnnotationList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getComments> AMI_IShare_getCommentsPtr;

class AMD_IShare_getComments : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::AnnotationList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getComments> AMD_IShare_getCommentsPtr;

class AMI_IShare_addComment : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::TextAnnotationPtr&) = 0;

    void __response(const ::omero::model::TextAnnotationPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_addComment> AMI_IShare_addCommentPtr;

class AMD_IShare_addComment : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::TextAnnotationPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_addComment> AMD_IShare_addCommentPtr;

class AMI_IShare_addReply : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::TextAnnotationPtr&) = 0;

    void __response(const ::omero::model::TextAnnotationPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_addReply> AMI_IShare_addReplyPtr;

class AMD_IShare_addReply : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::TextAnnotationPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_addReply> AMD_IShare_addReplyPtr;

class AMI_IShare_deleteComment : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_deleteComment> AMI_IShare_deleteCommentPtr;

class AMD_IShare_deleteComment : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_deleteComment> AMD_IShare_deleteCommentPtr;

class AMI_IShare_getAllMembers : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;

    void __response(const ::omero::api::ExperimenterList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getAllMembers> AMI_IShare_getAllMembersPtr;

class AMD_IShare_getAllMembers : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getAllMembers> AMD_IShare_getAllMembersPtr;

class AMI_IShare_getAllGuests : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::StringSet&) = 0;

    void __response(const ::omero::api::StringSet& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getAllGuests> AMI_IShare_getAllGuestsPtr;

class AMD_IShare_getAllGuests : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::StringSet&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getAllGuests> AMD_IShare_getAllGuestsPtr;

class AMI_IShare_getAllUsers : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::StringSet&) = 0;

    void __response(const ::omero::api::StringSet& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getAllUsers> AMI_IShare_getAllUsersPtr;

class AMD_IShare_getAllUsers : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::StringSet&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getAllUsers> AMD_IShare_getAllUsersPtr;

class AMI_IShare_addUsers : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_addUsers> AMI_IShare_addUsersPtr;

class AMD_IShare_addUsers : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_addUsers> AMD_IShare_addUsersPtr;

class AMI_IShare_addGuests : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_addGuests> AMI_IShare_addGuestsPtr;

class AMD_IShare_addGuests : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_addGuests> AMD_IShare_addGuestsPtr;

class AMI_IShare_removeUsers : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_removeUsers> AMI_IShare_removeUsersPtr;

class AMD_IShare_removeUsers : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_removeUsers> AMD_IShare_removeUsersPtr;

class AMI_IShare_removeGuests : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_removeGuests> AMI_IShare_removeGuestsPtr;

class AMD_IShare_removeGuests : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_removeGuests> AMD_IShare_removeGuestsPtr;

class AMI_IShare_addUser : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_addUser> AMI_IShare_addUserPtr;

class AMD_IShare_addUser : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_addUser> AMD_IShare_addUserPtr;

class AMI_IShare_addGuest : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_addGuest> AMI_IShare_addGuestPtr;

class AMD_IShare_addGuest : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_addGuest> AMD_IShare_addGuestPtr;

class AMI_IShare_removeUser : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_removeUser> AMI_IShare_removeUserPtr;

class AMD_IShare_removeUser : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_removeUser> AMD_IShare_removeUserPtr;

class AMI_IShare_removeGuest : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_removeGuest> AMI_IShare_removeGuestPtr;

class AMD_IShare_removeGuest : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_removeGuest> AMD_IShare_removeGuestPtr;

class AMI_IShare_getActiveConnections : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::UserMap&) = 0;

    void __response(const ::omero::api::UserMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getActiveConnections> AMI_IShare_getActiveConnectionsPtr;

class AMD_IShare_getActiveConnections : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::UserMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getActiveConnections> AMD_IShare_getActiveConnectionsPtr;

class AMI_IShare_getPastConnections : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::UserMap&) = 0;

    void __response(const ::omero::api::UserMap& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getPastConnections> AMI_IShare_getPastConnectionsPtr;

class AMD_IShare_getPastConnections : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::UserMap&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getPastConnections> AMD_IShare_getPastConnectionsPtr;

class AMI_IShare_invalidateConnection : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_invalidateConnection> AMI_IShare_invalidateConnectionPtr;

class AMD_IShare_invalidateConnection : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_invalidateConnection> AMD_IShare_invalidateConnectionPtr;

class AMI_IShare_getEvents : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;

    void __response(const ::omero::api::IObjectList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_IShare_getEvents> AMI_IShare_getEventsPtr;

class AMD_IShare_getEvents : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::IObjectList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_IShare_getEvents> AMD_IShare_getEventsPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_IShare_activate : public ::omero::api::AMD_IShare_activate, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_activate(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_deactivate : public ::omero::api::AMD_IShare_deactivate, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_deactivate(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getShare : public ::omero::api::AMD_IShare_getShare, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getShare(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::SharePtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getMemberCount : public ::omero::api::AMD_IShare_getMemberCount, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getMemberCount(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::sys::CountMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getOwnShares : public ::omero::api::AMD_IShare_getOwnShares, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getOwnShares(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::SessionList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getMemberShares : public ::omero::api::AMD_IShare_getMemberShares, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getMemberShares(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::SessionList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getSharesOwnedBy : public ::omero::api::AMD_IShare_getSharesOwnedBy, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getSharesOwnedBy(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::SessionList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getMemberSharesFor : public ::omero::api::AMD_IShare_getMemberSharesFor, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getMemberSharesFor(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::SessionList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getContents : public ::omero::api::AMD_IShare_getContents, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getContents(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getContentSubList : public ::omero::api::AMD_IShare_getContentSubList, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getContentSubList(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getContentSize : public ::omero::api::AMD_IShare_getContentSize, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getContentSize(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getContentMap : public ::omero::api::AMD_IShare_getContentMap, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getContentMap(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IdListMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_createShare : public ::omero::api::AMD_IShare_createShare, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_createShare(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_setDescription : public ::omero::api::AMD_IShare_setDescription, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_setDescription(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_setExpiration : public ::omero::api::AMD_IShare_setExpiration, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_setExpiration(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_setActive : public ::omero::api::AMD_IShare_setActive, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_setActive(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_closeShare : public ::omero::api::AMD_IShare_closeShare, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_closeShare(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_addObjects : public ::omero::api::AMD_IShare_addObjects, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_addObjects(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_addObject : public ::omero::api::AMD_IShare_addObject, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_addObject(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_removeObjects : public ::omero::api::AMD_IShare_removeObjects, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_removeObjects(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_removeObject : public ::omero::api::AMD_IShare_removeObject, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_removeObject(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getCommentCount : public ::omero::api::AMD_IShare_getCommentCount, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getCommentCount(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::sys::CountMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getComments : public ::omero::api::AMD_IShare_getComments, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getComments(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::AnnotationList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_addComment : public ::omero::api::AMD_IShare_addComment, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_addComment(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::TextAnnotationPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_addReply : public ::omero::api::AMD_IShare_addReply, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_addReply(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::TextAnnotationPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_deleteComment : public ::omero::api::AMD_IShare_deleteComment, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_deleteComment(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getAllMembers : public ::omero::api::AMD_IShare_getAllMembers, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getAllMembers(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::ExperimenterList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getAllGuests : public ::omero::api::AMD_IShare_getAllGuests, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getAllGuests(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::StringSet&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getAllUsers : public ::omero::api::AMD_IShare_getAllUsers, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getAllUsers(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::StringSet&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_addUsers : public ::omero::api::AMD_IShare_addUsers, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_addUsers(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_addGuests : public ::omero::api::AMD_IShare_addGuests, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_addGuests(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_removeUsers : public ::omero::api::AMD_IShare_removeUsers, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_removeUsers(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_removeGuests : public ::omero::api::AMD_IShare_removeGuests, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_removeGuests(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_addUser : public ::omero::api::AMD_IShare_addUser, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_addUser(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_addGuest : public ::omero::api::AMD_IShare_addGuest, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_addGuest(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_removeUser : public ::omero::api::AMD_IShare_removeUser, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_removeUser(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_removeGuest : public ::omero::api::AMD_IShare_removeGuest, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_removeGuest(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getActiveConnections : public ::omero::api::AMD_IShare_getActiveConnections, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getActiveConnections(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::UserMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getPastConnections : public ::omero::api::AMD_IShare_getPastConnections, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getPastConnections(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::UserMap&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_invalidateConnection : public ::omero::api::AMD_IShare_invalidateConnection, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_invalidateConnection(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_IShare_getEvents : public ::omero::api::AMD_IShare_getEvents, public ::IceInternal::IncomingAsync
{
public:

    AMD_IShare_getEvents(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::IObjectList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_IShare_activate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_activate_Base> Callback_IShare_activatePtr;

class Callback_IShare_deactivate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_deactivate_Base> Callback_IShare_deactivatePtr;

class Callback_IShare_getShare_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getShare_Base> Callback_IShare_getSharePtr;

class Callback_IShare_getMemberCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getMemberCount_Base> Callback_IShare_getMemberCountPtr;

class Callback_IShare_getOwnShares_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getOwnShares_Base> Callback_IShare_getOwnSharesPtr;

class Callback_IShare_getMemberShares_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getMemberShares_Base> Callback_IShare_getMemberSharesPtr;

class Callback_IShare_getSharesOwnedBy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getSharesOwnedBy_Base> Callback_IShare_getSharesOwnedByPtr;

class Callback_IShare_getMemberSharesFor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getMemberSharesFor_Base> Callback_IShare_getMemberSharesForPtr;

class Callback_IShare_getContents_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getContents_Base> Callback_IShare_getContentsPtr;

class Callback_IShare_getContentSubList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getContentSubList_Base> Callback_IShare_getContentSubListPtr;

class Callback_IShare_getContentSize_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getContentSize_Base> Callback_IShare_getContentSizePtr;

class Callback_IShare_getContentMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getContentMap_Base> Callback_IShare_getContentMapPtr;

class Callback_IShare_createShare_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_createShare_Base> Callback_IShare_createSharePtr;

class Callback_IShare_setDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_setDescription_Base> Callback_IShare_setDescriptionPtr;

class Callback_IShare_setExpiration_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_setExpiration_Base> Callback_IShare_setExpirationPtr;

class Callback_IShare_setActive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_setActive_Base> Callback_IShare_setActivePtr;

class Callback_IShare_closeShare_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_closeShare_Base> Callback_IShare_closeSharePtr;

class Callback_IShare_addObjects_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_addObjects_Base> Callback_IShare_addObjectsPtr;

class Callback_IShare_addObject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_addObject_Base> Callback_IShare_addObjectPtr;

class Callback_IShare_removeObjects_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_removeObjects_Base> Callback_IShare_removeObjectsPtr;

class Callback_IShare_removeObject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_removeObject_Base> Callback_IShare_removeObjectPtr;

class Callback_IShare_getCommentCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getCommentCount_Base> Callback_IShare_getCommentCountPtr;

class Callback_IShare_getComments_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getComments_Base> Callback_IShare_getCommentsPtr;

class Callback_IShare_addComment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_addComment_Base> Callback_IShare_addCommentPtr;

class Callback_IShare_addReply_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_addReply_Base> Callback_IShare_addReplyPtr;

class Callback_IShare_deleteComment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_deleteComment_Base> Callback_IShare_deleteCommentPtr;

class Callback_IShare_getAllMembers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getAllMembers_Base> Callback_IShare_getAllMembersPtr;

class Callback_IShare_getAllGuests_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getAllGuests_Base> Callback_IShare_getAllGuestsPtr;

class Callback_IShare_getAllUsers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getAllUsers_Base> Callback_IShare_getAllUsersPtr;

class Callback_IShare_addUsers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_addUsers_Base> Callback_IShare_addUsersPtr;

class Callback_IShare_addGuests_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_addGuests_Base> Callback_IShare_addGuestsPtr;

class Callback_IShare_removeUsers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_removeUsers_Base> Callback_IShare_removeUsersPtr;

class Callback_IShare_removeGuests_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_removeGuests_Base> Callback_IShare_removeGuestsPtr;

class Callback_IShare_addUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_addUser_Base> Callback_IShare_addUserPtr;

class Callback_IShare_addGuest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_addGuest_Base> Callback_IShare_addGuestPtr;

class Callback_IShare_removeUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_removeUser_Base> Callback_IShare_removeUserPtr;

class Callback_IShare_removeGuest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_removeGuest_Base> Callback_IShare_removeGuestPtr;

class Callback_IShare_getActiveConnections_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getActiveConnections_Base> Callback_IShare_getActiveConnectionsPtr;

class Callback_IShare_getPastConnections_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getPastConnections_Base> Callback_IShare_getPastConnectionsPtr;

class Callback_IShare_invalidateConnection_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_invalidateConnection_Base> Callback_IShare_invalidateConnectionPtr;

class Callback_IShare_getEvents_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IShare_getEvents_Base> Callback_IShare_getEventsPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class IShare : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    void activate(::Ice::Long shareId)
    {
        activate(shareId, 0);
    }
    void activate(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        activate(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_activate(::Ice::Long shareId, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_activate(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_activate(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activate(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_activate(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_activate(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_activate(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activate(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_activate(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_activate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_activate(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_activate(::Ice::Long shareId)
    {
        return begin_activate(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activate(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_activate(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activate(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(::Ice::Long shareId, const ::omero::api::Callback_IShare_activatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_activatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(shareId, &__ctx, __del, __cookie);
    }

    void end_activate(const ::Ice::AsyncResultPtr&);
    
private:

    void activate(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_activate(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool activate_async(const ::omero::api::AMI_IShare_activatePtr&, ::Ice::Long);
    bool activate_async(const ::omero::api::AMI_IShare_activatePtr&, ::Ice::Long, const ::Ice::Context&);

    void deactivate()
    {
        deactivate(0);
    }
    void deactivate(const ::Ice::Context& __ctx)
    {
        deactivate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deactivate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deactivate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deactivate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deactivate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deactivate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deactivate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deactivate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deactivate()
    {
        return begin_deactivate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& __ctx)
    {
        return begin_deactivate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::omero::api::Callback_IShare_deactivatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_deactivatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(&__ctx, __del, __cookie);
    }

    void end_deactivate(const ::Ice::AsyncResultPtr&);
    
private:

    void deactivate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool deactivate_async(const ::omero::api::AMI_IShare_deactivatePtr&);
    bool deactivate_async(const ::omero::api::AMI_IShare_deactivatePtr&, const ::Ice::Context&);

    ::omero::model::SharePtr getShare(::Ice::Long shareId)
    {
        return getShare(shareId, 0);
    }
    ::omero::model::SharePtr getShare(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return getShare(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getShare(::Ice::Long shareId, const ::IceInternal::Function<void (const ::omero::model::SharePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getShare(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getShare(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getShare(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getShare(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::SharePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getShare(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getShare(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getShare(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getShare(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::SharePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::SharePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::model::SharePtr __ret;
                try
                {
                    __ret = __proxy->end_getShare(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::SharePtr&)> _response;
        };
        return begin_getShare(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getShare(::Ice::Long shareId)
    {
        return begin_getShare(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getShare(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_getShare(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getShare(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getShare(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getShare(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getShare(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getShare(::Ice::Long shareId, const ::omero::api::Callback_IShare_getSharePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getShare(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getShare(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getSharePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getShare(shareId, &__ctx, __del, __cookie);
    }

    ::omero::model::SharePtr end_getShare(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::SharePtr getShare(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getShare(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getShare_async(const ::omero::api::AMI_IShare_getSharePtr&, ::Ice::Long);
    bool getShare_async(const ::omero::api::AMI_IShare_getSharePtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::sys::CountMap getMemberCount(const ::omero::sys::LongList& shareIds)
    {
        return getMemberCount(shareIds, 0);
    }
    ::omero::sys::CountMap getMemberCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx)
    {
        return getMemberCount(shareIds, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMemberCount(const ::omero::sys::LongList& shareIds, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMemberCount(shareIds, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberCount(const ::omero::sys::LongList& shareIds, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMemberCount(shareIds, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMemberCount(shareIds, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMemberCount(shareIds, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMemberCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getMemberCount(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getMemberCount(shareIds, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMemberCount(const ::omero::sys::LongList& shareIds)
    {
        return begin_getMemberCount(shareIds, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMemberCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx)
    {
        return begin_getMemberCount(shareIds, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMemberCount(const ::omero::sys::LongList& shareIds, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberCount(shareIds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberCount(shareIds, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberCount(const ::omero::sys::LongList& shareIds, const ::omero::api::Callback_IShare_getMemberCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberCount(shareIds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getMemberCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberCount(shareIds, &__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getMemberCount(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getMemberCount(const ::omero::sys::LongList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMemberCount(const ::omero::sys::LongList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getMemberCount_async(const ::omero::api::AMI_IShare_getMemberCountPtr&, const ::omero::sys::LongList&);
    bool getMemberCount_async(const ::omero::api::AMI_IShare_getMemberCountPtr&, const ::omero::sys::LongList&, const ::Ice::Context&);

    ::omero::api::SessionList getOwnShares(bool active)
    {
        return getOwnShares(active, 0);
    }
    ::omero::api::SessionList getOwnShares(bool active, const ::Ice::Context& __ctx)
    {
        return getOwnShares(active, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOwnShares(bool active, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOwnShares(active, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOwnShares(bool active, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOwnShares(active, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOwnShares(bool active, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOwnShares(active, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOwnShares(bool active, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOwnShares(active, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOwnShares(bool active, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::SessionList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::SessionList __ret;
                try
                {
                    __ret = __proxy->end_getOwnShares(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::SessionList&)> _response;
        };
        return begin_getOwnShares(active, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOwnShares(bool active)
    {
        return begin_getOwnShares(active, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOwnShares(bool active, const ::Ice::Context& __ctx)
    {
        return begin_getOwnShares(active, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOwnShares(bool active, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwnShares(active, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOwnShares(bool active, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwnShares(active, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOwnShares(bool active, const ::omero::api::Callback_IShare_getOwnSharesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwnShares(active, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOwnShares(bool active, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getOwnSharesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwnShares(active, &__ctx, __del, __cookie);
    }

    ::omero::api::SessionList end_getOwnShares(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::SessionList getOwnShares(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOwnShares(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getOwnShares_async(const ::omero::api::AMI_IShare_getOwnSharesPtr&, bool);
    bool getOwnShares_async(const ::omero::api::AMI_IShare_getOwnSharesPtr&, bool, const ::Ice::Context&);

    ::omero::api::SessionList getMemberShares(bool active)
    {
        return getMemberShares(active, 0);
    }
    ::omero::api::SessionList getMemberShares(bool active, const ::Ice::Context& __ctx)
    {
        return getMemberShares(active, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMemberShares(bool active, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMemberShares(active, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberShares(bool active, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMemberShares(active, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberShares(bool active, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMemberShares(active, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberShares(bool active, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMemberShares(active, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMemberShares(bool active, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::SessionList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::SessionList __ret;
                try
                {
                    __ret = __proxy->end_getMemberShares(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::SessionList&)> _response;
        };
        return begin_getMemberShares(active, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMemberShares(bool active)
    {
        return begin_getMemberShares(active, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMemberShares(bool active, const ::Ice::Context& __ctx)
    {
        return begin_getMemberShares(active, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMemberShares(bool active, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberShares(active, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberShares(bool active, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberShares(active, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberShares(bool active, const ::omero::api::Callback_IShare_getMemberSharesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberShares(active, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberShares(bool active, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getMemberSharesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberShares(active, &__ctx, __del, __cookie);
    }

    ::omero::api::SessionList end_getMemberShares(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::SessionList getMemberShares(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMemberShares(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getMemberShares_async(const ::omero::api::AMI_IShare_getMemberSharesPtr&, bool);
    bool getMemberShares_async(const ::omero::api::AMI_IShare_getMemberSharesPtr&, bool, const ::Ice::Context&);

    ::omero::api::SessionList getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active)
    {
        return getSharesOwnedBy(user, active, 0);
    }
    ::omero::api::SessionList getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx)
    {
        return getSharesOwnedBy(user, active, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSharesOwnedBy(user, active, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSharesOwnedBy(user, active, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSharesOwnedBy(user, active, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSharesOwnedBy(user, active, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::SessionList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::SessionList __ret;
                try
                {
                    __ret = __proxy->end_getSharesOwnedBy(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::SessionList&)> _response;
        };
        return begin_getSharesOwnedBy(user, active, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active)
    {
        return begin_getSharesOwnedBy(user, active, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx)
    {
        return begin_getSharesOwnedBy(user, active, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSharesOwnedBy(user, active, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSharesOwnedBy(user, active, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active, const ::omero::api::Callback_IShare_getSharesOwnedByPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSharesOwnedBy(user, active, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getSharesOwnedByPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSharesOwnedBy(user, active, &__ctx, __del, __cookie);
    }

    ::omero::api::SessionList end_getSharesOwnedBy(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::SessionList getSharesOwnedBy(const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSharesOwnedBy(const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getSharesOwnedBy_async(const ::omero::api::AMI_IShare_getSharesOwnedByPtr&, const ::omero::model::ExperimenterPtr&, bool);
    bool getSharesOwnedBy_async(const ::omero::api::AMI_IShare_getSharesOwnedByPtr&, const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context&);

    ::omero::api::SessionList getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active)
    {
        return getMemberSharesFor(user, active, 0);
    }
    ::omero::api::SessionList getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx)
    {
        return getMemberSharesFor(user, active, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMemberSharesFor(user, active, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMemberSharesFor(user, active, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMemberSharesFor(user, active, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMemberSharesFor(user, active, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::SessionList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::SessionList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::SessionList __ret;
                try
                {
                    __ret = __proxy->end_getMemberSharesFor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::SessionList&)> _response;
        };
        return begin_getMemberSharesFor(user, active, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active)
    {
        return begin_getMemberSharesFor(user, active, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx)
    {
        return begin_getMemberSharesFor(user, active, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberSharesFor(user, active, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberSharesFor(user, active, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active, const ::omero::api::Callback_IShare_getMemberSharesForPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberSharesFor(user, active, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr& user, bool active, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getMemberSharesForPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMemberSharesFor(user, active, &__ctx, __del, __cookie);
    }

    ::omero::api::SessionList end_getMemberSharesFor(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::SessionList getMemberSharesFor(const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMemberSharesFor(const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getMemberSharesFor_async(const ::omero::api::AMI_IShare_getMemberSharesForPtr&, const ::omero::model::ExperimenterPtr&, bool);
    bool getMemberSharesFor_async(const ::omero::api::AMI_IShare_getMemberSharesForPtr&, const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context&);

    ::omero::api::IObjectList getContents(::Ice::Long shareId)
    {
        return getContents(shareId, 0);
    }
    ::omero::api::IObjectList getContents(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return getContents(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getContents(::Ice::Long shareId, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContents(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContents(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContents(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getContents(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContents(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContents(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContents(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getContents(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_getContents(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_getContents(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getContents(::Ice::Long shareId)
    {
        return begin_getContents(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContents(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_getContents(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContents(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContents(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContents(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContents(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContents(::Ice::Long shareId, const ::omero::api::Callback_IShare_getContentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContents(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContents(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getContentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContents(shareId, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_getContents(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList getContents(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getContents(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getContents_async(const ::omero::api::AMI_IShare_getContentsPtr&, ::Ice::Long);
    bool getContents_async(const ::omero::api::AMI_IShare_getContentsPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::api::IObjectList getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish)
    {
        return getContentSubList(shareId, start, finish, 0);
    }
    ::omero::api::IObjectList getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish, const ::Ice::Context& __ctx)
    {
        return getContentSubList(shareId, start, finish, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContentSubList(shareId, start, finish, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContentSubList(shareId, start, finish, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContentSubList(shareId, start, finish, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContentSubList(shareId, start, finish, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_getContentSubList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_getContentSubList(shareId, start, finish, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish)
    {
        return begin_getContentSubList(shareId, start, finish, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish, const ::Ice::Context& __ctx)
    {
        return begin_getContentSubList(shareId, start, finish, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentSubList(shareId, start, finish, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentSubList(shareId, start, finish, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish, const ::omero::api::Callback_IShare_getContentSubListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentSubList(shareId, start, finish, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentSubList(::Ice::Long shareId, ::Ice::Int start, ::Ice::Int finish, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getContentSubListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentSubList(shareId, start, finish, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_getContentSubList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList getContentSubList(::Ice::Long, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getContentSubList(::Ice::Long, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getContentSubList_async(const ::omero::api::AMI_IShare_getContentSubListPtr&, ::Ice::Long, ::Ice::Int, ::Ice::Int);
    bool getContentSubList_async(const ::omero::api::AMI_IShare_getContentSubListPtr&, ::Ice::Long, ::Ice::Int, ::Ice::Int, const ::Ice::Context&);

    ::Ice::Int getContentSize(::Ice::Long shareId)
    {
        return getContentSize(shareId, 0);
    }
    ::Ice::Int getContentSize(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return getContentSize(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getContentSize(::Ice::Long shareId, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContentSize(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContentSize(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContentSize(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getContentSize(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContentSize(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContentSize(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContentSize(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getContentSize(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getContentSize(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getContentSize(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getContentSize(::Ice::Long shareId)
    {
        return begin_getContentSize(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContentSize(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_getContentSize(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContentSize(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentSize(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentSize(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentSize(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentSize(::Ice::Long shareId, const ::omero::api::Callback_IShare_getContentSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentSize(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentSize(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getContentSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentSize(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_getContentSize(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getContentSize(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getContentSize(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getContentSize_async(const ::omero::api::AMI_IShare_getContentSizePtr&, ::Ice::Long);
    bool getContentSize_async(const ::omero::api::AMI_IShare_getContentSizePtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::api::IdListMap getContentMap(::Ice::Long shareId)
    {
        return getContentMap(shareId, 0);
    }
    ::omero::api::IdListMap getContentMap(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return getContentMap(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getContentMap(::Ice::Long shareId, const ::IceInternal::Function<void (const ::omero::api::IdListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContentMap(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContentMap(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContentMap(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getContentMap(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IdListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContentMap(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContentMap(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContentMap(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getContentMap(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IdListMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IdListMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::IdListMap __ret;
                try
                {
                    __ret = __proxy->end_getContentMap(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IdListMap&)> _response;
        };
        return begin_getContentMap(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getContentMap(::Ice::Long shareId)
    {
        return begin_getContentMap(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContentMap(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_getContentMap(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContentMap(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentMap(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentMap(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentMap(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentMap(::Ice::Long shareId, const ::omero::api::Callback_IShare_getContentMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentMap(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentMap(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getContentMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentMap(shareId, &__ctx, __del, __cookie);
    }

    ::omero::api::IdListMap end_getContentMap(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IdListMap getContentMap(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getContentMap(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getContentMap_async(const ::omero::api::AMI_IShare_getContentMapPtr&, ::Ice::Long);
    bool getContentMap_async(const ::omero::api::AMI_IShare_getContentMapPtr&, ::Ice::Long, const ::Ice::Context&);

    ::Ice::Long createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled)
    {
        return createShare(description, expiration, items, exps, guests, enabled, 0);
    }
    ::Ice::Long createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled, const ::Ice::Context& __ctx)
    {
        return createShare(description, expiration, items, exps, guests, enabled, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createShare(description, expiration, items, exps, guests, enabled, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createShare(description, expiration, items, exps, guests, enabled, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createShare(description, expiration, items, exps, guests, enabled, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createShare(description, expiration, items, exps, guests, enabled, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_createShare(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_createShare(description, expiration, items, exps, guests, enabled, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled)
    {
        return begin_createShare(description, expiration, items, exps, guests, enabled, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled, const ::Ice::Context& __ctx)
    {
        return begin_createShare(description, expiration, items, exps, guests, enabled, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createShare(description, expiration, items, exps, guests, enabled, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createShare(description, expiration, items, exps, guests, enabled, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled, const ::omero::api::Callback_IShare_createSharePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createShare(description, expiration, items, exps, guests, enabled, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createShare(const ::std::string& description, const ::omero::RTimePtr& expiration, const ::omero::api::IObjectList& items, const ::omero::api::ExperimenterList& exps, const ::omero::api::StringSet& guests, bool enabled, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_createSharePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createShare(description, expiration, items, exps, guests, enabled, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_createShare(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long createShare(const ::std::string&, const ::omero::RTimePtr&, const ::omero::api::IObjectList&, const ::omero::api::ExperimenterList&, const ::omero::api::StringSet&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createShare(const ::std::string&, const ::omero::RTimePtr&, const ::omero::api::IObjectList&, const ::omero::api::ExperimenterList&, const ::omero::api::StringSet&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool createShare_async(const ::omero::api::AMI_IShare_createSharePtr&, const ::std::string&, const ::omero::RTimePtr&, const ::omero::api::IObjectList&, const ::omero::api::ExperimenterList&, const ::omero::api::StringSet&, bool);
    bool createShare_async(const ::omero::api::AMI_IShare_createSharePtr&, const ::std::string&, const ::omero::RTimePtr&, const ::omero::api::IObjectList&, const ::omero::api::ExperimenterList&, const ::omero::api::StringSet&, bool, const ::Ice::Context&);

    void setDescription(::Ice::Long shareId, const ::std::string& description)
    {
        setDescription(shareId, description, 0);
    }
    void setDescription(::Ice::Long shareId, const ::std::string& description, const ::Ice::Context& __ctx)
    {
        setDescription(shareId, description, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDescription(::Ice::Long shareId, const ::std::string& description, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDescription(shareId, description, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(::Ice::Long shareId, const ::std::string& description, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(shareId, description, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(::Ice::Long shareId, const ::std::string& description, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDescription(shareId, description, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(::Ice::Long shareId, const ::std::string& description, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(shareId, description, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setDescription(::Ice::Long shareId, const ::std::string& description, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setDescription(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setDescription(shareId, description, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setDescription(::Ice::Long shareId, const ::std::string& description)
    {
        return begin_setDescription(shareId, description, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(::Ice::Long shareId, const ::std::string& description, const ::Ice::Context& __ctx)
    {
        return begin_setDescription(shareId, description, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(::Ice::Long shareId, const ::std::string& description, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(shareId, description, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(::Ice::Long shareId, const ::std::string& description, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(shareId, description, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(::Ice::Long shareId, const ::std::string& description, const ::omero::api::Callback_IShare_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(shareId, description, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(::Ice::Long shareId, const ::std::string& description, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(shareId, description, &__ctx, __del, __cookie);
    }

    void end_setDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setDescription(::Ice::Long, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDescription(::Ice::Long, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool setDescription_async(const ::omero::api::AMI_IShare_setDescriptionPtr&, ::Ice::Long, const ::std::string&);
    bool setDescription_async(const ::omero::api::AMI_IShare_setDescriptionPtr&, ::Ice::Long, const ::std::string&, const ::Ice::Context&);

    void setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration)
    {
        setExpiration(shareId, expiration, 0);
    }
    void setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration, const ::Ice::Context& __ctx)
    {
        setExpiration(shareId, expiration, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setExpiration(shareId, expiration, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExpiration(shareId, expiration, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setExpiration(shareId, expiration, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExpiration(shareId, expiration, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setExpiration(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setExpiration(shareId, expiration, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration)
    {
        return begin_setExpiration(shareId, expiration, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration, const ::Ice::Context& __ctx)
    {
        return begin_setExpiration(shareId, expiration, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExpiration(shareId, expiration, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExpiration(shareId, expiration, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration, const ::omero::api::Callback_IShare_setExpirationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExpiration(shareId, expiration, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExpiration(::Ice::Long shareId, const ::omero::RTimePtr& expiration, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_setExpirationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExpiration(shareId, expiration, &__ctx, __del, __cookie);
    }

    void end_setExpiration(const ::Ice::AsyncResultPtr&);
    
private:

    void setExpiration(::Ice::Long, const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setExpiration(::Ice::Long, const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool setExpiration_async(const ::omero::api::AMI_IShare_setExpirationPtr&, ::Ice::Long, const ::omero::RTimePtr&);
    bool setExpiration_async(const ::omero::api::AMI_IShare_setExpirationPtr&, ::Ice::Long, const ::omero::RTimePtr&, const ::Ice::Context&);

    void setActive(::Ice::Long shareId, bool active)
    {
        setActive(shareId, active, 0);
    }
    void setActive(::Ice::Long shareId, bool active, const ::Ice::Context& __ctx)
    {
        setActive(shareId, active, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setActive(::Ice::Long shareId, bool active, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setActive(shareId, active, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setActive(::Ice::Long shareId, bool active, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setActive(shareId, active, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setActive(::Ice::Long shareId, bool active, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setActive(shareId, active, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setActive(::Ice::Long shareId, bool active, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setActive(shareId, active, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setActive(::Ice::Long shareId, bool active, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setActive(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setActive(shareId, active, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setActive(::Ice::Long shareId, bool active)
    {
        return begin_setActive(shareId, active, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setActive(::Ice::Long shareId, bool active, const ::Ice::Context& __ctx)
    {
        return begin_setActive(shareId, active, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setActive(::Ice::Long shareId, bool active, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(shareId, active, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setActive(::Ice::Long shareId, bool active, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(shareId, active, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setActive(::Ice::Long shareId, bool active, const ::omero::api::Callback_IShare_setActivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(shareId, active, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setActive(::Ice::Long shareId, bool active, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_setActivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(shareId, active, &__ctx, __del, __cookie);
    }

    void end_setActive(const ::Ice::AsyncResultPtr&);
    
private:

    void setActive(::Ice::Long, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setActive(::Ice::Long, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool setActive_async(const ::omero::api::AMI_IShare_setActivePtr&, ::Ice::Long, bool);
    bool setActive_async(const ::omero::api::AMI_IShare_setActivePtr&, ::Ice::Long, bool, const ::Ice::Context&);

    void closeShare(::Ice::Long shareId)
    {
        closeShare(shareId, 0);
    }
    void closeShare(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        closeShare(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_closeShare(::Ice::Long shareId, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_closeShare(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_closeShare(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_closeShare(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_closeShare(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_closeShare(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_closeShare(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_closeShare(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_closeShare(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_closeShare(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_closeShare(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_closeShare(::Ice::Long shareId)
    {
        return begin_closeShare(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_closeShare(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_closeShare(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_closeShare(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeShare(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_closeShare(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeShare(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_closeShare(::Ice::Long shareId, const ::omero::api::Callback_IShare_closeSharePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeShare(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_closeShare(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_closeSharePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeShare(shareId, &__ctx, __del, __cookie);
    }

    void end_closeShare(const ::Ice::AsyncResultPtr&);
    
private:

    void closeShare(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_closeShare(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool closeShare_async(const ::omero::api::AMI_IShare_closeSharePtr&, ::Ice::Long);
    bool closeShare_async(const ::omero::api::AMI_IShare_closeSharePtr&, ::Ice::Long, const ::Ice::Context&);

    void addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects)
    {
        addObjects(shareId, iobjects, 0);
    }
    void addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx)
    {
        addObjects(shareId, iobjects, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addObjects(shareId, iobjects, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addObjects(shareId, iobjects, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addObjects(shareId, iobjects, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addObjects(shareId, iobjects, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_addObjects(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_addObjects(shareId, iobjects, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects)
    {
        return begin_addObjects(shareId, iobjects, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx)
    {
        return begin_addObjects(shareId, iobjects, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObjects(shareId, iobjects, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObjects(shareId, iobjects, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::omero::api::Callback_IShare_addObjectsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObjects(shareId, iobjects, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_addObjectsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObjects(shareId, iobjects, &__ctx, __del, __cookie);
    }

    void end_addObjects(const ::Ice::AsyncResultPtr&);
    
private:

    void addObjects(::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addObjects(::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addObjects_async(const ::omero::api::AMI_IShare_addObjectsPtr&, ::Ice::Long, const ::omero::api::IObjectList&);
    bool addObjects_async(const ::omero::api::AMI_IShare_addObjectsPtr&, ::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context&);

    void addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject)
    {
        addObject(shareId, iobject, 0);
    }
    void addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx)
    {
        addObject(shareId, iobject, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addObject(shareId, iobject, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addObject(shareId, iobject, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addObject(shareId, iobject, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addObject(shareId, iobject, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_addObject(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_addObject(shareId, iobject, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject)
    {
        return begin_addObject(shareId, iobject, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx)
    {
        return begin_addObject(shareId, iobject, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObject(shareId, iobject, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObject(shareId, iobject, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::omero::api::Callback_IShare_addObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObject(shareId, iobject, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_addObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObject(shareId, iobject, &__ctx, __del, __cookie);
    }

    void end_addObject(const ::Ice::AsyncResultPtr&);
    
private:

    void addObject(::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addObject(::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addObject_async(const ::omero::api::AMI_IShare_addObjectPtr&, ::Ice::Long, const ::omero::model::IObjectPtr&);
    bool addObject_async(const ::omero::api::AMI_IShare_addObjectPtr&, ::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context&);

    void removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects)
    {
        removeObjects(shareId, iobjects, 0);
    }
    void removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx)
    {
        removeObjects(shareId, iobjects, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeObjects(shareId, iobjects, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeObjects(shareId, iobjects, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeObjects(shareId, iobjects, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeObjects(shareId, iobjects, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_removeObjects(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_removeObjects(shareId, iobjects, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects)
    {
        return begin_removeObjects(shareId, iobjects, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx)
    {
        return begin_removeObjects(shareId, iobjects, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObjects(shareId, iobjects, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObjects(shareId, iobjects, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::omero::api::Callback_IShare_removeObjectsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObjects(shareId, iobjects, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeObjects(::Ice::Long shareId, const ::omero::api::IObjectList& iobjects, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_removeObjectsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObjects(shareId, iobjects, &__ctx, __del, __cookie);
    }

    void end_removeObjects(const ::Ice::AsyncResultPtr&);
    
private:

    void removeObjects(::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeObjects(::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool removeObjects_async(const ::omero::api::AMI_IShare_removeObjectsPtr&, ::Ice::Long, const ::omero::api::IObjectList&);
    bool removeObjects_async(const ::omero::api::AMI_IShare_removeObjectsPtr&, ::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context&);

    void removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject)
    {
        removeObject(shareId, iobject, 0);
    }
    void removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx)
    {
        removeObject(shareId, iobject, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeObject(shareId, iobject, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeObject(shareId, iobject, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeObject(shareId, iobject, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeObject(shareId, iobject, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_removeObject(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_removeObject(shareId, iobject, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject)
    {
        return begin_removeObject(shareId, iobject, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx)
    {
        return begin_removeObject(shareId, iobject, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObject(shareId, iobject, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObject(shareId, iobject, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::omero::api::Callback_IShare_removeObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObject(shareId, iobject, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeObject(::Ice::Long shareId, const ::omero::model::IObjectPtr& iobject, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_removeObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObject(shareId, iobject, &__ctx, __del, __cookie);
    }

    void end_removeObject(const ::Ice::AsyncResultPtr&);
    
private:

    void removeObject(::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeObject(::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool removeObject_async(const ::omero::api::AMI_IShare_removeObjectPtr&, ::Ice::Long, const ::omero::model::IObjectPtr&);
    bool removeObject_async(const ::omero::api::AMI_IShare_removeObjectPtr&, ::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context&);

    ::omero::sys::CountMap getCommentCount(const ::omero::sys::LongList& shareIds)
    {
        return getCommentCount(shareIds, 0);
    }
    ::omero::sys::CountMap getCommentCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx)
    {
        return getCommentCount(shareIds, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCommentCount(const ::omero::sys::LongList& shareIds, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCommentCount(shareIds, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCommentCount(const ::omero::sys::LongList& shareIds, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCommentCount(shareIds, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCommentCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCommentCount(shareIds, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCommentCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCommentCount(shareIds, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCommentCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getCommentCount(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getCommentCount(shareIds, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCommentCount(const ::omero::sys::LongList& shareIds)
    {
        return begin_getCommentCount(shareIds, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCommentCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx)
    {
        return begin_getCommentCount(shareIds, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCommentCount(const ::omero::sys::LongList& shareIds, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCommentCount(shareIds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCommentCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCommentCount(shareIds, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCommentCount(const ::omero::sys::LongList& shareIds, const ::omero::api::Callback_IShare_getCommentCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCommentCount(shareIds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCommentCount(const ::omero::sys::LongList& shareIds, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getCommentCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCommentCount(shareIds, &__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getCommentCount(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getCommentCount(const ::omero::sys::LongList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCommentCount(const ::omero::sys::LongList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getCommentCount_async(const ::omero::api::AMI_IShare_getCommentCountPtr&, const ::omero::sys::LongList&);
    bool getCommentCount_async(const ::omero::api::AMI_IShare_getCommentCountPtr&, const ::omero::sys::LongList&, const ::Ice::Context&);

    ::omero::api::AnnotationList getComments(::Ice::Long shareId)
    {
        return getComments(shareId, 0);
    }
    ::omero::api::AnnotationList getComments(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return getComments(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getComments(::Ice::Long shareId, const ::IceInternal::Function<void (const ::omero::api::AnnotationList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getComments(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getComments(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getComments(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getComments(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::AnnotationList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getComments(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getComments(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getComments(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getComments(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::AnnotationList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::AnnotationList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::AnnotationList __ret;
                try
                {
                    __ret = __proxy->end_getComments(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::AnnotationList&)> _response;
        };
        return begin_getComments(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getComments(::Ice::Long shareId)
    {
        return begin_getComments(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getComments(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_getComments(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getComments(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComments(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComments(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComments(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComments(::Ice::Long shareId, const ::omero::api::Callback_IShare_getCommentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComments(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComments(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getCommentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComments(shareId, &__ctx, __del, __cookie);
    }

    ::omero::api::AnnotationList end_getComments(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::AnnotationList getComments(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getComments(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getComments_async(const ::omero::api::AMI_IShare_getCommentsPtr&, ::Ice::Long);
    bool getComments_async(const ::omero::api::AMI_IShare_getCommentsPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::model::TextAnnotationPtr addComment(::Ice::Long shareId, const ::std::string& comment)
    {
        return addComment(shareId, comment, 0);
    }
    ::omero::model::TextAnnotationPtr addComment(::Ice::Long shareId, const ::std::string& comment, const ::Ice::Context& __ctx)
    {
        return addComment(shareId, comment, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addComment(::Ice::Long shareId, const ::std::string& comment, const ::IceInternal::Function<void (const ::omero::model::TextAnnotationPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addComment(shareId, comment, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addComment(::Ice::Long shareId, const ::std::string& comment, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addComment(shareId, comment, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addComment(::Ice::Long shareId, const ::std::string& comment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::TextAnnotationPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addComment(shareId, comment, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addComment(::Ice::Long shareId, const ::std::string& comment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addComment(shareId, comment, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addComment(::Ice::Long shareId, const ::std::string& comment, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::TextAnnotationPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::TextAnnotationPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::model::TextAnnotationPtr __ret;
                try
                {
                    __ret = __proxy->end_addComment(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::TextAnnotationPtr&)> _response;
        };
        return begin_addComment(shareId, comment, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addComment(::Ice::Long shareId, const ::std::string& comment)
    {
        return begin_addComment(shareId, comment, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addComment(::Ice::Long shareId, const ::std::string& comment, const ::Ice::Context& __ctx)
    {
        return begin_addComment(shareId, comment, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addComment(::Ice::Long shareId, const ::std::string& comment, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addComment(shareId, comment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addComment(::Ice::Long shareId, const ::std::string& comment, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addComment(shareId, comment, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addComment(::Ice::Long shareId, const ::std::string& comment, const ::omero::api::Callback_IShare_addCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addComment(shareId, comment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addComment(::Ice::Long shareId, const ::std::string& comment, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_addCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addComment(shareId, comment, &__ctx, __del, __cookie);
    }

    ::omero::model::TextAnnotationPtr end_addComment(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::TextAnnotationPtr addComment(::Ice::Long, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addComment(::Ice::Long, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addComment_async(const ::omero::api::AMI_IShare_addCommentPtr&, ::Ice::Long, const ::std::string&);
    bool addComment_async(const ::omero::api::AMI_IShare_addCommentPtr&, ::Ice::Long, const ::std::string&, const ::Ice::Context&);

    ::omero::model::TextAnnotationPtr addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo)
    {
        return addReply(shareId, comment, replyTo, 0);
    }
    ::omero::model::TextAnnotationPtr addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo, const ::Ice::Context& __ctx)
    {
        return addReply(shareId, comment, replyTo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo, const ::IceInternal::Function<void (const ::omero::model::TextAnnotationPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addReply(shareId, comment, replyTo, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addReply(shareId, comment, replyTo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::TextAnnotationPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addReply(shareId, comment, replyTo, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addReply(shareId, comment, replyTo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::TextAnnotationPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::TextAnnotationPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::model::TextAnnotationPtr __ret;
                try
                {
                    __ret = __proxy->end_addReply(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::TextAnnotationPtr&)> _response;
        };
        return begin_addReply(shareId, comment, replyTo, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo)
    {
        return begin_addReply(shareId, comment, replyTo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo, const ::Ice::Context& __ctx)
    {
        return begin_addReply(shareId, comment, replyTo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReply(shareId, comment, replyTo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReply(shareId, comment, replyTo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo, const ::omero::api::Callback_IShare_addReplyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReply(shareId, comment, replyTo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReply(::Ice::Long shareId, const ::std::string& comment, const ::omero::model::TextAnnotationPtr& replyTo, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_addReplyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReply(shareId, comment, replyTo, &__ctx, __del, __cookie);
    }

    ::omero::model::TextAnnotationPtr end_addReply(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::TextAnnotationPtr addReply(::Ice::Long, const ::std::string&, const ::omero::model::TextAnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addReply(::Ice::Long, const ::std::string&, const ::omero::model::TextAnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addReply_async(const ::omero::api::AMI_IShare_addReplyPtr&, ::Ice::Long, const ::std::string&, const ::omero::model::TextAnnotationPtr&);
    bool addReply_async(const ::omero::api::AMI_IShare_addReplyPtr&, ::Ice::Long, const ::std::string&, const ::omero::model::TextAnnotationPtr&, const ::Ice::Context&);

    void deleteComment(const ::omero::model::AnnotationPtr& comment)
    {
        deleteComment(comment, 0);
    }
    void deleteComment(const ::omero::model::AnnotationPtr& comment, const ::Ice::Context& __ctx)
    {
        deleteComment(comment, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteComment(const ::omero::model::AnnotationPtr& comment, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteComment(comment, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteComment(const ::omero::model::AnnotationPtr& comment, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteComment(comment, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteComment(const ::omero::model::AnnotationPtr& comment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteComment(comment, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteComment(const ::omero::model::AnnotationPtr& comment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteComment(comment, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteComment(const ::omero::model::AnnotationPtr& comment, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deleteComment(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deleteComment(comment, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteComment(const ::omero::model::AnnotationPtr& comment)
    {
        return begin_deleteComment(comment, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteComment(const ::omero::model::AnnotationPtr& comment, const ::Ice::Context& __ctx)
    {
        return begin_deleteComment(comment, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteComment(const ::omero::model::AnnotationPtr& comment, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteComment(comment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteComment(const ::omero::model::AnnotationPtr& comment, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteComment(comment, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteComment(const ::omero::model::AnnotationPtr& comment, const ::omero::api::Callback_IShare_deleteCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteComment(comment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteComment(const ::omero::model::AnnotationPtr& comment, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_deleteCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteComment(comment, &__ctx, __del, __cookie);
    }

    void end_deleteComment(const ::Ice::AsyncResultPtr&);
    
private:

    void deleteComment(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteComment(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool deleteComment_async(const ::omero::api::AMI_IShare_deleteCommentPtr&, const ::omero::model::AnnotationPtr&);
    bool deleteComment_async(const ::omero::api::AMI_IShare_deleteCommentPtr&, const ::omero::model::AnnotationPtr&, const ::Ice::Context&);

    ::omero::api::ExperimenterList getAllMembers(::Ice::Long shareId)
    {
        return getAllMembers(shareId, 0);
    }
    ::omero::api::ExperimenterList getAllMembers(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return getAllMembers(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAllMembers(::Ice::Long shareId, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllMembers(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllMembers(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllMembers(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAllMembers(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllMembers(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllMembers(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllMembers(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAllMembers(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::ExperimenterList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::ExperimenterList __ret;
                try
                {
                    __ret = __proxy->end_getAllMembers(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::ExperimenterList&)> _response;
        };
        return begin_getAllMembers(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAllMembers(::Ice::Long shareId)
    {
        return begin_getAllMembers(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllMembers(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_getAllMembers(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllMembers(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMembers(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMembers(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMembers(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMembers(::Ice::Long shareId, const ::omero::api::Callback_IShare_getAllMembersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMembers(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMembers(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getAllMembersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMembers(shareId, &__ctx, __del, __cookie);
    }

    ::omero::api::ExperimenterList end_getAllMembers(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::ExperimenterList getAllMembers(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAllMembers(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getAllMembers_async(const ::omero::api::AMI_IShare_getAllMembersPtr&, ::Ice::Long);
    bool getAllMembers_async(const ::omero::api::AMI_IShare_getAllMembersPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::api::StringSet getAllGuests(::Ice::Long shareId)
    {
        return getAllGuests(shareId, 0);
    }
    ::omero::api::StringSet getAllGuests(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return getAllGuests(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAllGuests(::Ice::Long shareId, const ::IceInternal::Function<void (const ::omero::api::StringSet&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllGuests(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllGuests(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllGuests(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAllGuests(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::StringSet&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllGuests(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllGuests(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllGuests(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAllGuests(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::StringSet&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::StringSet&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::StringSet __ret;
                try
                {
                    __ret = __proxy->end_getAllGuests(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::StringSet&)> _response;
        };
        return begin_getAllGuests(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAllGuests(::Ice::Long shareId)
    {
        return begin_getAllGuests(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllGuests(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_getAllGuests(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllGuests(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllGuests(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllGuests(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllGuests(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllGuests(::Ice::Long shareId, const ::omero::api::Callback_IShare_getAllGuestsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllGuests(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllGuests(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getAllGuestsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllGuests(shareId, &__ctx, __del, __cookie);
    }

    ::omero::api::StringSet end_getAllGuests(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::StringSet getAllGuests(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAllGuests(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getAllGuests_async(const ::omero::api::AMI_IShare_getAllGuestsPtr&, ::Ice::Long);
    bool getAllGuests_async(const ::omero::api::AMI_IShare_getAllGuestsPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::api::StringSet getAllUsers(::Ice::Long shareId)
    {
        return getAllUsers(shareId, 0);
    }
    ::omero::api::StringSet getAllUsers(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return getAllUsers(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAllUsers(::Ice::Long shareId, const ::IceInternal::Function<void (const ::omero::api::StringSet&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllUsers(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllUsers(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllUsers(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAllUsers(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::StringSet&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllUsers(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllUsers(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllUsers(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAllUsers(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::StringSet&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::StringSet&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::StringSet __ret;
                try
                {
                    __ret = __proxy->end_getAllUsers(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::StringSet&)> _response;
        };
        return begin_getAllUsers(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAllUsers(::Ice::Long shareId)
    {
        return begin_getAllUsers(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllUsers(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_getAllUsers(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllUsers(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllUsers(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllUsers(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllUsers(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllUsers(::Ice::Long shareId, const ::omero::api::Callback_IShare_getAllUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllUsers(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllUsers(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getAllUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllUsers(shareId, &__ctx, __del, __cookie);
    }

    ::omero::api::StringSet end_getAllUsers(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::StringSet getAllUsers(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAllUsers(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getAllUsers_async(const ::omero::api::AMI_IShare_getAllUsersPtr&, ::Ice::Long);
    bool getAllUsers_async(const ::omero::api::AMI_IShare_getAllUsersPtr&, ::Ice::Long, const ::Ice::Context&);

    void addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps)
    {
        addUsers(shareId, exps, 0);
    }
    void addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx)
    {
        addUsers(shareId, exps, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addUsers(shareId, exps, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addUsers(shareId, exps, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addUsers(shareId, exps, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addUsers(shareId, exps, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_addUsers(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_addUsers(shareId, exps, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps)
    {
        return begin_addUsers(shareId, exps, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx)
    {
        return begin_addUsers(shareId, exps, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addUsers(shareId, exps, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addUsers(shareId, exps, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::omero::api::Callback_IShare_addUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addUsers(shareId, exps, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_addUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addUsers(shareId, exps, &__ctx, __del, __cookie);
    }

    void end_addUsers(const ::Ice::AsyncResultPtr&);
    
private:

    void addUsers(::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addUsers(::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addUsers_async(const ::omero::api::AMI_IShare_addUsersPtr&, ::Ice::Long, const ::omero::api::ExperimenterList&);
    bool addUsers_async(const ::omero::api::AMI_IShare_addUsersPtr&, ::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context&);

    void addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses)
    {
        addGuests(shareId, emailAddresses, 0);
    }
    void addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx)
    {
        addGuests(shareId, emailAddresses, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addGuests(shareId, emailAddresses, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addGuests(shareId, emailAddresses, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addGuests(shareId, emailAddresses, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addGuests(shareId, emailAddresses, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_addGuests(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_addGuests(shareId, emailAddresses, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses)
    {
        return begin_addGuests(shareId, emailAddresses, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx)
    {
        return begin_addGuests(shareId, emailAddresses, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGuests(shareId, emailAddresses, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGuests(shareId, emailAddresses, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::omero::api::Callback_IShare_addGuestsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGuests(shareId, emailAddresses, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_addGuestsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGuests(shareId, emailAddresses, &__ctx, __del, __cookie);
    }

    void end_addGuests(const ::Ice::AsyncResultPtr&);
    
private:

    void addGuests(::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addGuests(::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addGuests_async(const ::omero::api::AMI_IShare_addGuestsPtr&, ::Ice::Long, const ::omero::api::StringSet&);
    bool addGuests_async(const ::omero::api::AMI_IShare_addGuestsPtr&, ::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context&);

    void removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps)
    {
        removeUsers(shareId, exps, 0);
    }
    void removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx)
    {
        removeUsers(shareId, exps, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeUsers(shareId, exps, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeUsers(shareId, exps, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeUsers(shareId, exps, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeUsers(shareId, exps, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_removeUsers(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_removeUsers(shareId, exps, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps)
    {
        return begin_removeUsers(shareId, exps, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx)
    {
        return begin_removeUsers(shareId, exps, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUsers(shareId, exps, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUsers(shareId, exps, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::omero::api::Callback_IShare_removeUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUsers(shareId, exps, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUsers(::Ice::Long shareId, const ::omero::api::ExperimenterList& exps, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_removeUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUsers(shareId, exps, &__ctx, __del, __cookie);
    }

    void end_removeUsers(const ::Ice::AsyncResultPtr&);
    
private:

    void removeUsers(::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeUsers(::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool removeUsers_async(const ::omero::api::AMI_IShare_removeUsersPtr&, ::Ice::Long, const ::omero::api::ExperimenterList&);
    bool removeUsers_async(const ::omero::api::AMI_IShare_removeUsersPtr&, ::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context&);

    void removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses)
    {
        removeGuests(shareId, emailAddresses, 0);
    }
    void removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx)
    {
        removeGuests(shareId, emailAddresses, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeGuests(shareId, emailAddresses, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeGuests(shareId, emailAddresses, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeGuests(shareId, emailAddresses, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeGuests(shareId, emailAddresses, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_removeGuests(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_removeGuests(shareId, emailAddresses, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses)
    {
        return begin_removeGuests(shareId, emailAddresses, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx)
    {
        return begin_removeGuests(shareId, emailAddresses, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGuests(shareId, emailAddresses, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGuests(shareId, emailAddresses, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::omero::api::Callback_IShare_removeGuestsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGuests(shareId, emailAddresses, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGuests(::Ice::Long shareId, const ::omero::api::StringSet& emailAddresses, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_removeGuestsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGuests(shareId, emailAddresses, &__ctx, __del, __cookie);
    }

    void end_removeGuests(const ::Ice::AsyncResultPtr&);
    
private:

    void removeGuests(::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeGuests(::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool removeGuests_async(const ::omero::api::AMI_IShare_removeGuestsPtr&, ::Ice::Long, const ::omero::api::StringSet&);
    bool removeGuests_async(const ::omero::api::AMI_IShare_removeGuestsPtr&, ::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context&);

    void addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp)
    {
        addUser(shareId, exp, 0);
    }
    void addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx)
    {
        addUser(shareId, exp, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addUser(shareId, exp, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addUser(shareId, exp, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addUser(shareId, exp, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addUser(shareId, exp, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_addUser(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_addUser(shareId, exp, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp)
    {
        return begin_addUser(shareId, exp, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx)
    {
        return begin_addUser(shareId, exp, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addUser(shareId, exp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addUser(shareId, exp, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::api::Callback_IShare_addUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addUser(shareId, exp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_addUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addUser(shareId, exp, &__ctx, __del, __cookie);
    }

    void end_addUser(const ::Ice::AsyncResultPtr&);
    
private:

    void addUser(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addUser(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addUser_async(const ::omero::api::AMI_IShare_addUserPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&);
    bool addUser_async(const ::omero::api::AMI_IShare_addUserPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context&);

    void addGuest(::Ice::Long shareId, const ::std::string& emailAddress)
    {
        addGuest(shareId, emailAddress, 0);
    }
    void addGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx)
    {
        addGuest(shareId, emailAddress, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addGuest(shareId, emailAddress, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addGuest(shareId, emailAddress, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addGuest(shareId, emailAddress, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addGuest(shareId, emailAddress, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_addGuest(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_addGuest(shareId, emailAddress, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addGuest(::Ice::Long shareId, const ::std::string& emailAddress)
    {
        return begin_addGuest(shareId, emailAddress, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx)
    {
        return begin_addGuest(shareId, emailAddress, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGuest(shareId, emailAddress, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGuest(shareId, emailAddress, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::omero::api::Callback_IShare_addGuestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGuest(shareId, emailAddress, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_addGuestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGuest(shareId, emailAddress, &__ctx, __del, __cookie);
    }

    void end_addGuest(const ::Ice::AsyncResultPtr&);
    
private:

    void addGuest(::Ice::Long, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addGuest(::Ice::Long, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addGuest_async(const ::omero::api::AMI_IShare_addGuestPtr&, ::Ice::Long, const ::std::string&);
    bool addGuest_async(const ::omero::api::AMI_IShare_addGuestPtr&, ::Ice::Long, const ::std::string&, const ::Ice::Context&);

    void removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp)
    {
        removeUser(shareId, exp, 0);
    }
    void removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx)
    {
        removeUser(shareId, exp, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeUser(shareId, exp, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeUser(shareId, exp, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeUser(shareId, exp, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeUser(shareId, exp, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_removeUser(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_removeUser(shareId, exp, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp)
    {
        return begin_removeUser(shareId, exp, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx)
    {
        return begin_removeUser(shareId, exp, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUser(shareId, exp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUser(shareId, exp, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::api::Callback_IShare_removeUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUser(shareId, exp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_removeUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUser(shareId, exp, &__ctx, __del, __cookie);
    }

    void end_removeUser(const ::Ice::AsyncResultPtr&);
    
private:

    void removeUser(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeUser(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool removeUser_async(const ::omero::api::AMI_IShare_removeUserPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&);
    bool removeUser_async(const ::omero::api::AMI_IShare_removeUserPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context&);

    void removeGuest(::Ice::Long shareId, const ::std::string& emailAddress)
    {
        removeGuest(shareId, emailAddress, 0);
    }
    void removeGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx)
    {
        removeGuest(shareId, emailAddress, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeGuest(shareId, emailAddress, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeGuest(shareId, emailAddress, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeGuest(shareId, emailAddress, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeGuest(shareId, emailAddress, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_removeGuest(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_removeGuest(shareId, emailAddress, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeGuest(::Ice::Long shareId, const ::std::string& emailAddress)
    {
        return begin_removeGuest(shareId, emailAddress, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx)
    {
        return begin_removeGuest(shareId, emailAddress, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGuest(shareId, emailAddress, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGuest(shareId, emailAddress, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::omero::api::Callback_IShare_removeGuestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGuest(shareId, emailAddress, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGuest(::Ice::Long shareId, const ::std::string& emailAddress, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_removeGuestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGuest(shareId, emailAddress, &__ctx, __del, __cookie);
    }

    void end_removeGuest(const ::Ice::AsyncResultPtr&);
    
private:

    void removeGuest(::Ice::Long, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeGuest(::Ice::Long, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool removeGuest_async(const ::omero::api::AMI_IShare_removeGuestPtr&, ::Ice::Long, const ::std::string&);
    bool removeGuest_async(const ::omero::api::AMI_IShare_removeGuestPtr&, ::Ice::Long, const ::std::string&, const ::Ice::Context&);

    ::omero::api::UserMap getActiveConnections(::Ice::Long shareId)
    {
        return getActiveConnections(shareId, 0);
    }
    ::omero::api::UserMap getActiveConnections(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return getActiveConnections(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getActiveConnections(::Ice::Long shareId, const ::IceInternal::Function<void (const ::omero::api::UserMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getActiveConnections(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getActiveConnections(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getActiveConnections(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getActiveConnections(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::UserMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getActiveConnections(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getActiveConnections(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getActiveConnections(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getActiveConnections(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::UserMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::UserMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::UserMap __ret;
                try
                {
                    __ret = __proxy->end_getActiveConnections(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::UserMap&)> _response;
        };
        return begin_getActiveConnections(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getActiveConnections(::Ice::Long shareId)
    {
        return begin_getActiveConnections(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getActiveConnections(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_getActiveConnections(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getActiveConnections(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActiveConnections(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActiveConnections(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActiveConnections(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActiveConnections(::Ice::Long shareId, const ::omero::api::Callback_IShare_getActiveConnectionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActiveConnections(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActiveConnections(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getActiveConnectionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActiveConnections(shareId, &__ctx, __del, __cookie);
    }

    ::omero::api::UserMap end_getActiveConnections(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::UserMap getActiveConnections(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getActiveConnections(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getActiveConnections_async(const ::omero::api::AMI_IShare_getActiveConnectionsPtr&, ::Ice::Long);
    bool getActiveConnections_async(const ::omero::api::AMI_IShare_getActiveConnectionsPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::api::UserMap getPastConnections(::Ice::Long shareId)
    {
        return getPastConnections(shareId, 0);
    }
    ::omero::api::UserMap getPastConnections(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return getPastConnections(shareId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPastConnections(::Ice::Long shareId, const ::IceInternal::Function<void (const ::omero::api::UserMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPastConnections(shareId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPastConnections(::Ice::Long shareId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPastConnections(shareId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPastConnections(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::UserMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPastConnections(shareId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPastConnections(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPastConnections(shareId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPastConnections(::Ice::Long shareId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::UserMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::UserMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::UserMap __ret;
                try
                {
                    __ret = __proxy->end_getPastConnections(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::UserMap&)> _response;
        };
        return begin_getPastConnections(shareId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPastConnections(::Ice::Long shareId)
    {
        return begin_getPastConnections(shareId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPastConnections(::Ice::Long shareId, const ::Ice::Context& __ctx)
    {
        return begin_getPastConnections(shareId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPastConnections(::Ice::Long shareId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPastConnections(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPastConnections(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPastConnections(shareId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPastConnections(::Ice::Long shareId, const ::omero::api::Callback_IShare_getPastConnectionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPastConnections(shareId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPastConnections(::Ice::Long shareId, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getPastConnectionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPastConnections(shareId, &__ctx, __del, __cookie);
    }

    ::omero::api::UserMap end_getPastConnections(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::UserMap getPastConnections(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPastConnections(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getPastConnections_async(const ::omero::api::AMI_IShare_getPastConnectionsPtr&, ::Ice::Long);
    bool getPastConnections_async(const ::omero::api::AMI_IShare_getPastConnectionsPtr&, ::Ice::Long, const ::Ice::Context&);

    void invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp)
    {
        invalidateConnection(shareId, exp, 0);
    }
    void invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx)
    {
        invalidateConnection(shareId, exp, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_invalidateConnection(shareId, exp, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invalidateConnection(shareId, exp, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_invalidateConnection(shareId, exp, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invalidateConnection(shareId, exp, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_invalidateConnection(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_invalidateConnection(shareId, exp, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp)
    {
        return begin_invalidateConnection(shareId, exp, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx)
    {
        return begin_invalidateConnection(shareId, exp, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invalidateConnection(shareId, exp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invalidateConnection(shareId, exp, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::api::Callback_IShare_invalidateConnectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invalidateConnection(shareId, exp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invalidateConnection(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_invalidateConnectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invalidateConnection(shareId, exp, &__ctx, __del, __cookie);
    }

    void end_invalidateConnection(const ::Ice::AsyncResultPtr&);
    
private:

    void invalidateConnection(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_invalidateConnection(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool invalidateConnection_async(const ::omero::api::AMI_IShare_invalidateConnectionPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&);
    bool invalidateConnection_async(const ::omero::api::AMI_IShare_invalidateConnectionPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context&);

    ::omero::api::IObjectList getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to)
    {
        return getEvents(shareId, exp, from, to, 0);
    }
    ::omero::api::IObjectList getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to, const ::Ice::Context& __ctx)
    {
        return getEvents(shareId, exp, from, to, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEvents(shareId, exp, from, to, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEvents(shareId, exp, from, to, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEvents(shareId, exp, from, to, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEvents(shareId, exp, from, to, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::IObjectList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::IObjectList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
                ::omero::api::IObjectList __ret;
                try
                {
                    __ret = __proxy->end_getEvents(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::IObjectList&)> _response;
        };
        return begin_getEvents(shareId, exp, from, to, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to)
    {
        return begin_getEvents(shareId, exp, from, to, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to, const ::Ice::Context& __ctx)
    {
        return begin_getEvents(shareId, exp, from, to, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEvents(shareId, exp, from, to, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEvents(shareId, exp, from, to, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to, const ::omero::api::Callback_IShare_getEventsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEvents(shareId, exp, from, to, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEvents(::Ice::Long shareId, const ::omero::model::ExperimenterPtr& exp, const ::omero::RTimePtr& from, const ::omero::RTimePtr& to, const ::Ice::Context& __ctx, const ::omero::api::Callback_IShare_getEventsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEvents(shareId, exp, from, to, &__ctx, __del, __cookie);
    }

    ::omero::api::IObjectList end_getEvents(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::IObjectList getEvents(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEvents(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getEvents_async(const ::omero::api::AMI_IShare_getEventsPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::omero::RTimePtr&, const ::omero::RTimePtr&);
    bool getEvents_async(const ::omero::api::AMI_IShare_getEventsPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<IShare> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_secure(bool __secure) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_twoway() const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_oneway() const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_batchOneway() const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_datagram() const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_batchDatagram() const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_compress(bool __compress) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_timeout(int __timeout) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IShare> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<IShare*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class IShare : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual void activate(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deactivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::SharePtr getShare(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getMemberCount(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::SessionList getOwnShares(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::SessionList getMemberShares(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::SessionList getSharesOwnedBy(const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::SessionList getMemberSharesFor(const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList getContents(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList getContentSubList(::Ice::Long, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getContentSize(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IdListMap getContentMap(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long createShare(const ::std::string&, const ::omero::RTimePtr&, const ::omero::api::IObjectList&, const ::omero::api::ExperimenterList&, const ::omero::api::StringSet&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDescription(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setExpiration(::Ice::Long, const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setActive(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void closeShare(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addObjects(::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addObject(::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeObjects(::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeObject(::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getCommentCount(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::AnnotationList getComments(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::TextAnnotationPtr addComment(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::TextAnnotationPtr addReply(::Ice::Long, const ::std::string&, const ::omero::model::TextAnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deleteComment(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::ExperimenterList getAllMembers(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::StringSet getAllGuests(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::StringSet getAllUsers(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addUsers(::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addGuests(::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeUsers(::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeGuests(::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addUser(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addGuest(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeUser(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeGuest(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::UserMap getActiveConnections(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::UserMap getPastConnections(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void invalidateConnection(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::IObjectList getEvents(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class IShare : virtual public ::IceDelegate::omero::api::IShare,
               virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual void activate(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deactivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::SharePtr getShare(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getMemberCount(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::SessionList getOwnShares(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::SessionList getMemberShares(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::SessionList getSharesOwnedBy(const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::SessionList getMemberSharesFor(const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList getContents(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList getContentSubList(::Ice::Long, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getContentSize(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IdListMap getContentMap(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createShare(const ::std::string&, const ::omero::RTimePtr&, const ::omero::api::IObjectList&, const ::omero::api::ExperimenterList&, const ::omero::api::StringSet&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDescription(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExpiration(::Ice::Long, const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setActive(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void closeShare(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addObjects(::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addObject(::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeObjects(::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeObject(::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getCommentCount(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::AnnotationList getComments(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::TextAnnotationPtr addComment(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::TextAnnotationPtr addReply(::Ice::Long, const ::std::string&, const ::omero::model::TextAnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteComment(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterList getAllMembers(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::StringSet getAllGuests(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::StringSet getAllUsers(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addUsers(::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addGuests(::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeUsers(::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeGuests(::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addUser(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addGuest(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeUser(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeGuest(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::UserMap getActiveConnections(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::UserMap getPastConnections(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void invalidateConnection(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList getEvents(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class IShare : virtual public ::IceDelegate::omero::api::IShare,
               virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual void activate(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deactivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::SharePtr getShare(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getMemberCount(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::SessionList getOwnShares(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::SessionList getMemberShares(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::SessionList getSharesOwnedBy(const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::SessionList getMemberSharesFor(const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList getContents(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList getContentSubList(::Ice::Long, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getContentSize(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IdListMap getContentMap(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long createShare(const ::std::string&, const ::omero::RTimePtr&, const ::omero::api::IObjectList&, const ::omero::api::ExperimenterList&, const ::omero::api::StringSet&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDescription(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExpiration(::Ice::Long, const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setActive(::Ice::Long, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void closeShare(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addObjects(::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addObject(::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeObjects(::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeObject(::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getCommentCount(const ::omero::sys::LongList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::AnnotationList getComments(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::TextAnnotationPtr addComment(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::TextAnnotationPtr addReply(::Ice::Long, const ::std::string&, const ::omero::model::TextAnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deleteComment(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterList getAllMembers(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::StringSet getAllGuests(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::StringSet getAllUsers(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addUsers(::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addGuests(::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeUsers(::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeGuests(::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addUser(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addGuest(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeUser(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeGuest(::Ice::Long, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::UserMap getActiveConnections(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::UserMap getPastConnections(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void invalidateConnection(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::IObjectList getEvents(::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class IShare : virtual public ::omero::api::ServiceInterface
{
public:

    typedef ISharePrx ProxyType;
    typedef ISharePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void activate_async(const ::omero::api::AMD_IShare_activatePtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___activate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void deactivate_async(const ::omero::api::AMD_IShare_deactivatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deactivate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getShare_async(const ::omero::api::AMD_IShare_getSharePtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getShare(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getMemberCount_async(const ::omero::api::AMD_IShare_getMemberCountPtr&, const ::omero::sys::LongList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMemberCount(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getOwnShares_async(const ::omero::api::AMD_IShare_getOwnSharesPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOwnShares(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getMemberShares_async(const ::omero::api::AMD_IShare_getMemberSharesPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMemberShares(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getSharesOwnedBy_async(const ::omero::api::AMD_IShare_getSharesOwnedByPtr&, const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSharesOwnedBy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getMemberSharesFor_async(const ::omero::api::AMD_IShare_getMemberSharesForPtr&, const ::omero::model::ExperimenterPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMemberSharesFor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getContents_async(const ::omero::api::AMD_IShare_getContentsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getContents(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getContentSubList_async(const ::omero::api::AMD_IShare_getContentSubListPtr&, ::Ice::Long, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getContentSubList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getContentSize_async(const ::omero::api::AMD_IShare_getContentSizePtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getContentSize(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getContentMap_async(const ::omero::api::AMD_IShare_getContentMapPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getContentMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createShare_async(const ::omero::api::AMD_IShare_createSharePtr&, const ::std::string&, const ::omero::RTimePtr&, const ::omero::api::IObjectList&, const ::omero::api::ExperimenterList&, const ::omero::api::StringSet&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createShare(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDescription_async(const ::omero::api::AMD_IShare_setDescriptionPtr&, ::Ice::Long, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setExpiration_async(const ::omero::api::AMD_IShare_setExpirationPtr&, ::Ice::Long, const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setExpiration(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setActive_async(const ::omero::api::AMD_IShare_setActivePtr&, ::Ice::Long, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setActive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void closeShare_async(const ::omero::api::AMD_IShare_closeSharePtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___closeShare(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addObjects_async(const ::omero::api::AMD_IShare_addObjectsPtr&, ::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addObjects(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addObject_async(const ::omero::api::AMD_IShare_addObjectPtr&, ::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addObject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeObjects_async(const ::omero::api::AMD_IShare_removeObjectsPtr&, ::Ice::Long, const ::omero::api::IObjectList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeObjects(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeObject_async(const ::omero::api::AMD_IShare_removeObjectPtr&, ::Ice::Long, const ::omero::model::IObjectPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeObject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getCommentCount_async(const ::omero::api::AMD_IShare_getCommentCountPtr&, const ::omero::sys::LongList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCommentCount(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getComments_async(const ::omero::api::AMD_IShare_getCommentsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getComments(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addComment_async(const ::omero::api::AMD_IShare_addCommentPtr&, ::Ice::Long, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addComment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addReply_async(const ::omero::api::AMD_IShare_addReplyPtr&, ::Ice::Long, const ::std::string&, const ::omero::model::TextAnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addReply(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void deleteComment_async(const ::omero::api::AMD_IShare_deleteCommentPtr&, const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteComment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getAllMembers_async(const ::omero::api::AMD_IShare_getAllMembersPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAllMembers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getAllGuests_async(const ::omero::api::AMD_IShare_getAllGuestsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAllGuests(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getAllUsers_async(const ::omero::api::AMD_IShare_getAllUsersPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAllUsers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addUsers_async(const ::omero::api::AMD_IShare_addUsersPtr&, ::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addUsers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addGuests_async(const ::omero::api::AMD_IShare_addGuestsPtr&, ::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addGuests(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeUsers_async(const ::omero::api::AMD_IShare_removeUsersPtr&, ::Ice::Long, const ::omero::api::ExperimenterList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeUsers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeGuests_async(const ::omero::api::AMD_IShare_removeGuestsPtr&, ::Ice::Long, const ::omero::api::StringSet&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeGuests(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addUser_async(const ::omero::api::AMD_IShare_addUserPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addGuest_async(const ::omero::api::AMD_IShare_addGuestPtr&, ::Ice::Long, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addGuest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeUser_async(const ::omero::api::AMD_IShare_removeUserPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeGuest_async(const ::omero::api::AMD_IShare_removeGuestPtr&, ::Ice::Long, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeGuest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getActiveConnections_async(const ::omero::api::AMD_IShare_getActiveConnectionsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getActiveConnections(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getPastConnections_async(const ::omero::api::AMD_IShare_getPastConnectionsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPastConnections(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void invalidateConnection_async(const ::omero::api::AMD_IShare_invalidateConnectionPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___invalidateConnection(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getEvents_async(const ::omero::api::AMD_IShare_getEventsPtr&, ::Ice::Long, const ::omero::model::ExperimenterPtr&, const ::omero::RTimePtr&, const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEvents(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const IShare& l, const IShare& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IShare& l, const IShare& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_IShare_activate : public Callback_IShare_activate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_activate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_activatePtr
newCallback_IShare_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_activate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_activatePtr
newCallback_IShare_activate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_activate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_activatePtr
newCallback_IShare_activate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_activate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_activatePtr
newCallback_IShare_activate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_activate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_activate : public Callback_IShare_activate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_activate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_activatePtr
newCallback_IShare_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_activate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_activatePtr
newCallback_IShare_activate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_activate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_activatePtr
newCallback_IShare_activate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_activate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_activatePtr
newCallback_IShare_activate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_activate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_deactivate : public Callback_IShare_deactivate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_deactivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deactivate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_deactivatePtr
newCallback_IShare_deactivate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_deactivate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_deactivatePtr
newCallback_IShare_deactivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_deactivate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_deactivatePtr
newCallback_IShare_deactivate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_deactivate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_deactivatePtr
newCallback_IShare_deactivate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_deactivate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_deactivate : public Callback_IShare_deactivate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_deactivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deactivate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_deactivatePtr
newCallback_IShare_deactivate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_deactivate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_deactivatePtr
newCallback_IShare_deactivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_deactivate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_deactivatePtr
newCallback_IShare_deactivate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_deactivate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_deactivatePtr
newCallback_IShare_deactivate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_deactivate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getShare : public Callback_IShare_getShare_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::SharePtr&);

    CallbackNC_IShare_getShare(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::model::SharePtr __ret;
        try
        {
            __ret = __proxy->end_getShare(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getSharePtr
newCallback_IShare_getShare(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::SharePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getShare<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getSharePtr
newCallback_IShare_getShare(T* instance, void (T::*cb)(const ::omero::model::SharePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getShare<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getShare : public Callback_IShare_getShare_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::SharePtr&, const CT&);

    Callback_IShare_getShare(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::model::SharePtr __ret;
        try
        {
            __ret = __proxy->end_getShare(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getSharePtr
newCallback_IShare_getShare(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::SharePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getShare<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getSharePtr
newCallback_IShare_getShare(T* instance, void (T::*cb)(const ::omero::model::SharePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getShare<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getMemberCount : public Callback_IShare_getMemberCount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_IShare_getMemberCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getMemberCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getMemberCountPtr
newCallback_IShare_getMemberCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getMemberCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getMemberCountPtr
newCallback_IShare_getMemberCount(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getMemberCount<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getMemberCount : public Callback_IShare_getMemberCount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_IShare_getMemberCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getMemberCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getMemberCountPtr
newCallback_IShare_getMemberCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getMemberCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getMemberCountPtr
newCallback_IShare_getMemberCount(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getMemberCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getOwnShares : public Callback_IShare_getOwnShares_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::SessionList&);

    CallbackNC_IShare_getOwnShares(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::SessionList __ret;
        try
        {
            __ret = __proxy->end_getOwnShares(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getOwnSharesPtr
newCallback_IShare_getOwnShares(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::SessionList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getOwnShares<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getOwnSharesPtr
newCallback_IShare_getOwnShares(T* instance, void (T::*cb)(const ::omero::api::SessionList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getOwnShares<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getOwnShares : public Callback_IShare_getOwnShares_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::SessionList&, const CT&);

    Callback_IShare_getOwnShares(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::SessionList __ret;
        try
        {
            __ret = __proxy->end_getOwnShares(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getOwnSharesPtr
newCallback_IShare_getOwnShares(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::SessionList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getOwnShares<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getOwnSharesPtr
newCallback_IShare_getOwnShares(T* instance, void (T::*cb)(const ::omero::api::SessionList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getOwnShares<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getMemberShares : public Callback_IShare_getMemberShares_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::SessionList&);

    CallbackNC_IShare_getMemberShares(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::SessionList __ret;
        try
        {
            __ret = __proxy->end_getMemberShares(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getMemberSharesPtr
newCallback_IShare_getMemberShares(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::SessionList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getMemberShares<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getMemberSharesPtr
newCallback_IShare_getMemberShares(T* instance, void (T::*cb)(const ::omero::api::SessionList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getMemberShares<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getMemberShares : public Callback_IShare_getMemberShares_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::SessionList&, const CT&);

    Callback_IShare_getMemberShares(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::SessionList __ret;
        try
        {
            __ret = __proxy->end_getMemberShares(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getMemberSharesPtr
newCallback_IShare_getMemberShares(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::SessionList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getMemberShares<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getMemberSharesPtr
newCallback_IShare_getMemberShares(T* instance, void (T::*cb)(const ::omero::api::SessionList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getMemberShares<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getSharesOwnedBy : public Callback_IShare_getSharesOwnedBy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::SessionList&);

    CallbackNC_IShare_getSharesOwnedBy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::SessionList __ret;
        try
        {
            __ret = __proxy->end_getSharesOwnedBy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getSharesOwnedByPtr
newCallback_IShare_getSharesOwnedBy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::SessionList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getSharesOwnedBy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getSharesOwnedByPtr
newCallback_IShare_getSharesOwnedBy(T* instance, void (T::*cb)(const ::omero::api::SessionList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getSharesOwnedBy<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getSharesOwnedBy : public Callback_IShare_getSharesOwnedBy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::SessionList&, const CT&);

    Callback_IShare_getSharesOwnedBy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::SessionList __ret;
        try
        {
            __ret = __proxy->end_getSharesOwnedBy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getSharesOwnedByPtr
newCallback_IShare_getSharesOwnedBy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::SessionList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getSharesOwnedBy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getSharesOwnedByPtr
newCallback_IShare_getSharesOwnedBy(T* instance, void (T::*cb)(const ::omero::api::SessionList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getSharesOwnedBy<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getMemberSharesFor : public Callback_IShare_getMemberSharesFor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::SessionList&);

    CallbackNC_IShare_getMemberSharesFor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::SessionList __ret;
        try
        {
            __ret = __proxy->end_getMemberSharesFor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getMemberSharesForPtr
newCallback_IShare_getMemberSharesFor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::SessionList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getMemberSharesFor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getMemberSharesForPtr
newCallback_IShare_getMemberSharesFor(T* instance, void (T::*cb)(const ::omero::api::SessionList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getMemberSharesFor<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getMemberSharesFor : public Callback_IShare_getMemberSharesFor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::SessionList&, const CT&);

    Callback_IShare_getMemberSharesFor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::SessionList __ret;
        try
        {
            __ret = __proxy->end_getMemberSharesFor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getMemberSharesForPtr
newCallback_IShare_getMemberSharesFor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::SessionList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getMemberSharesFor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getMemberSharesForPtr
newCallback_IShare_getMemberSharesFor(T* instance, void (T::*cb)(const ::omero::api::SessionList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getMemberSharesFor<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getContents : public Callback_IShare_getContents_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IShare_getContents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getContents(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getContentsPtr
newCallback_IShare_getContents(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getContents<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getContentsPtr
newCallback_IShare_getContents(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getContents<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getContents : public Callback_IShare_getContents_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IShare_getContents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getContents(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getContentsPtr
newCallback_IShare_getContents(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getContents<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getContentsPtr
newCallback_IShare_getContents(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getContents<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getContentSubList : public Callback_IShare_getContentSubList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IShare_getContentSubList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getContentSubList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getContentSubListPtr
newCallback_IShare_getContentSubList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getContentSubList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getContentSubListPtr
newCallback_IShare_getContentSubList(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getContentSubList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getContentSubList : public Callback_IShare_getContentSubList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IShare_getContentSubList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getContentSubList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getContentSubListPtr
newCallback_IShare_getContentSubList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getContentSubList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getContentSubListPtr
newCallback_IShare_getContentSubList(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getContentSubList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getContentSize : public Callback_IShare_getContentSize_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_IShare_getContentSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getContentSize(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getContentSizePtr
newCallback_IShare_getContentSize(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getContentSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getContentSizePtr
newCallback_IShare_getContentSize(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getContentSize<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getContentSize : public Callback_IShare_getContentSize_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_IShare_getContentSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getContentSize(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getContentSizePtr
newCallback_IShare_getContentSize(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getContentSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getContentSizePtr
newCallback_IShare_getContentSize(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getContentSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getContentMap : public Callback_IShare_getContentMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IdListMap&);

    CallbackNC_IShare_getContentMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IdListMap __ret;
        try
        {
            __ret = __proxy->end_getContentMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getContentMapPtr
newCallback_IShare_getContentMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IdListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getContentMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getContentMapPtr
newCallback_IShare_getContentMap(T* instance, void (T::*cb)(const ::omero::api::IdListMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getContentMap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getContentMap : public Callback_IShare_getContentMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IdListMap&, const CT&);

    Callback_IShare_getContentMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IdListMap __ret;
        try
        {
            __ret = __proxy->end_getContentMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getContentMapPtr
newCallback_IShare_getContentMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IdListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getContentMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getContentMapPtr
newCallback_IShare_getContentMap(T* instance, void (T::*cb)(const ::omero::api::IdListMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getContentMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_createShare : public Callback_IShare_createShare_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_IShare_createShare(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createShare(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_createSharePtr
newCallback_IShare_createShare(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_createShare<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_createSharePtr
newCallback_IShare_createShare(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_createShare<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_createShare : public Callback_IShare_createShare_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_IShare_createShare(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_createShare(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_createSharePtr
newCallback_IShare_createShare(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_createShare<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_createSharePtr
newCallback_IShare_createShare(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_createShare<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_setDescription : public Callback_IShare_setDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_setDescriptionPtr
newCallback_IShare_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_setDescriptionPtr
newCallback_IShare_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_setDescriptionPtr
newCallback_IShare_setDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_setDescriptionPtr
newCallback_IShare_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_setDescription : public Callback_IShare_setDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_setDescriptionPtr
newCallback_IShare_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_setDescriptionPtr
newCallback_IShare_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_setDescriptionPtr
newCallback_IShare_setDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_setDescriptionPtr
newCallback_IShare_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_setExpiration : public Callback_IShare_setExpiration_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_setExpiration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setExpiration(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_setExpirationPtr
newCallback_IShare_setExpiration(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setExpiration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_setExpirationPtr
newCallback_IShare_setExpiration(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setExpiration<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_setExpirationPtr
newCallback_IShare_setExpiration(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setExpiration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_setExpirationPtr
newCallback_IShare_setExpiration(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setExpiration<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_setExpiration : public Callback_IShare_setExpiration_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_setExpiration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setExpiration(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_setExpirationPtr
newCallback_IShare_setExpiration(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setExpiration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_setExpirationPtr
newCallback_IShare_setExpiration(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setExpiration<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_setExpirationPtr
newCallback_IShare_setExpiration(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setExpiration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_setExpirationPtr
newCallback_IShare_setExpiration(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setExpiration<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_setActive : public Callback_IShare_setActive_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_setActive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setActive(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_setActivePtr
newCallback_IShare_setActive(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setActive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_setActivePtr
newCallback_IShare_setActive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setActive<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_setActivePtr
newCallback_IShare_setActive(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setActive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_setActivePtr
newCallback_IShare_setActive(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_setActive<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_setActive : public Callback_IShare_setActive_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_setActive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setActive(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_setActivePtr
newCallback_IShare_setActive(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setActive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_setActivePtr
newCallback_IShare_setActive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setActive<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_setActivePtr
newCallback_IShare_setActive(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setActive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_setActivePtr
newCallback_IShare_setActive(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_setActive<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_closeShare : public Callback_IShare_closeShare_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_closeShare(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_closeShare(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_closeSharePtr
newCallback_IShare_closeShare(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_closeShare<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_closeSharePtr
newCallback_IShare_closeShare(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_closeShare<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_closeSharePtr
newCallback_IShare_closeShare(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_closeShare<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_closeSharePtr
newCallback_IShare_closeShare(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_closeShare<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_closeShare : public Callback_IShare_closeShare_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_closeShare(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_closeShare(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_closeSharePtr
newCallback_IShare_closeShare(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_closeShare<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_closeSharePtr
newCallback_IShare_closeShare(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_closeShare<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_closeSharePtr
newCallback_IShare_closeShare(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_closeShare<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_closeSharePtr
newCallback_IShare_closeShare(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_closeShare<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_addObjects : public Callback_IShare_addObjects_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_addObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addObjects(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_addObjectsPtr
newCallback_IShare_addObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addObjects<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addObjectsPtr
newCallback_IShare_addObjects(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addObjects<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_addObjectsPtr
newCallback_IShare_addObjects(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addObjects<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addObjectsPtr
newCallback_IShare_addObjects(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addObjects<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_addObjects : public Callback_IShare_addObjects_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_addObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addObjects(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_addObjectsPtr
newCallback_IShare_addObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addObjects<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addObjectsPtr
newCallback_IShare_addObjects(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addObjects<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addObjectsPtr
newCallback_IShare_addObjects(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addObjects<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addObjectsPtr
newCallback_IShare_addObjects(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addObjects<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_addObject : public Callback_IShare_addObject_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_addObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_addObjectPtr
newCallback_IShare_addObject(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addObjectPtr
newCallback_IShare_addObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addObject<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_addObjectPtr
newCallback_IShare_addObject(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addObjectPtr
newCallback_IShare_addObject(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addObject<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_addObject : public Callback_IShare_addObject_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_addObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_addObjectPtr
newCallback_IShare_addObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addObjectPtr
newCallback_IShare_addObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addObjectPtr
newCallback_IShare_addObject(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addObjectPtr
newCallback_IShare_addObject(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_removeObjects : public Callback_IShare_removeObjects_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_removeObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeObjects(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_removeObjectsPtr
newCallback_IShare_removeObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeObjects<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeObjectsPtr
newCallback_IShare_removeObjects(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeObjects<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_removeObjectsPtr
newCallback_IShare_removeObjects(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeObjects<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeObjectsPtr
newCallback_IShare_removeObjects(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeObjects<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_removeObjects : public Callback_IShare_removeObjects_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_removeObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeObjects(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_removeObjectsPtr
newCallback_IShare_removeObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeObjects<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeObjectsPtr
newCallback_IShare_removeObjects(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeObjects<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeObjectsPtr
newCallback_IShare_removeObjects(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeObjects<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeObjectsPtr
newCallback_IShare_removeObjects(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeObjects<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_removeObject : public Callback_IShare_removeObject_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_removeObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_removeObjectPtr
newCallback_IShare_removeObject(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeObjectPtr
newCallback_IShare_removeObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeObject<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_removeObjectPtr
newCallback_IShare_removeObject(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeObjectPtr
newCallback_IShare_removeObject(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeObject<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_removeObject : public Callback_IShare_removeObject_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_removeObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeObject(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_removeObjectPtr
newCallback_IShare_removeObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeObjectPtr
newCallback_IShare_removeObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeObjectPtr
newCallback_IShare_removeObject(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeObjectPtr
newCallback_IShare_removeObject(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getCommentCount : public Callback_IShare_getCommentCount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_IShare_getCommentCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getCommentCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getCommentCountPtr
newCallback_IShare_getCommentCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getCommentCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getCommentCountPtr
newCallback_IShare_getCommentCount(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getCommentCount<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getCommentCount : public Callback_IShare_getCommentCount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_IShare_getCommentCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getCommentCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getCommentCountPtr
newCallback_IShare_getCommentCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getCommentCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getCommentCountPtr
newCallback_IShare_getCommentCount(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getCommentCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getComments : public Callback_IShare_getComments_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::AnnotationList&);

    CallbackNC_IShare_getComments(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::AnnotationList __ret;
        try
        {
            __ret = __proxy->end_getComments(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getCommentsPtr
newCallback_IShare_getComments(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::AnnotationList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getComments<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getCommentsPtr
newCallback_IShare_getComments(T* instance, void (T::*cb)(const ::omero::api::AnnotationList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getComments<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getComments : public Callback_IShare_getComments_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::AnnotationList&, const CT&);

    Callback_IShare_getComments(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::AnnotationList __ret;
        try
        {
            __ret = __proxy->end_getComments(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getCommentsPtr
newCallback_IShare_getComments(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::AnnotationList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getComments<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getCommentsPtr
newCallback_IShare_getComments(T* instance, void (T::*cb)(const ::omero::api::AnnotationList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getComments<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_addComment : public Callback_IShare_addComment_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::TextAnnotationPtr&);

    CallbackNC_IShare_addComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::model::TextAnnotationPtr __ret;
        try
        {
            __ret = __proxy->end_addComment(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_addCommentPtr
newCallback_IShare_addComment(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::TextAnnotationPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addComment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addCommentPtr
newCallback_IShare_addComment(T* instance, void (T::*cb)(const ::omero::model::TextAnnotationPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addComment<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_addComment : public Callback_IShare_addComment_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::TextAnnotationPtr&, const CT&);

    Callback_IShare_addComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::model::TextAnnotationPtr __ret;
        try
        {
            __ret = __proxy->end_addComment(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_addCommentPtr
newCallback_IShare_addComment(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::TextAnnotationPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addComment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addCommentPtr
newCallback_IShare_addComment(T* instance, void (T::*cb)(const ::omero::model::TextAnnotationPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addComment<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_addReply : public Callback_IShare_addReply_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::TextAnnotationPtr&);

    CallbackNC_IShare_addReply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::model::TextAnnotationPtr __ret;
        try
        {
            __ret = __proxy->end_addReply(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_addReplyPtr
newCallback_IShare_addReply(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::TextAnnotationPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addReply<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addReplyPtr
newCallback_IShare_addReply(T* instance, void (T::*cb)(const ::omero::model::TextAnnotationPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addReply<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_addReply : public Callback_IShare_addReply_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::TextAnnotationPtr&, const CT&);

    Callback_IShare_addReply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::model::TextAnnotationPtr __ret;
        try
        {
            __ret = __proxy->end_addReply(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_addReplyPtr
newCallback_IShare_addReply(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::TextAnnotationPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addReply<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addReplyPtr
newCallback_IShare_addReply(T* instance, void (T::*cb)(const ::omero::model::TextAnnotationPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addReply<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_deleteComment : public Callback_IShare_deleteComment_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_deleteComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteComment(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_deleteCommentPtr
newCallback_IShare_deleteComment(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_deleteComment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_deleteCommentPtr
newCallback_IShare_deleteComment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_deleteComment<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_deleteCommentPtr
newCallback_IShare_deleteComment(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_deleteComment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_deleteCommentPtr
newCallback_IShare_deleteComment(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_deleteComment<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_deleteComment : public Callback_IShare_deleteComment_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_deleteComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deleteComment(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_deleteCommentPtr
newCallback_IShare_deleteComment(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_deleteComment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_deleteCommentPtr
newCallback_IShare_deleteComment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_deleteComment<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_deleteCommentPtr
newCallback_IShare_deleteComment(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_deleteComment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_deleteCommentPtr
newCallback_IShare_deleteComment(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_deleteComment<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getAllMembers : public Callback_IShare_getAllMembers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&);

    CallbackNC_IShare_getAllMembers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_getAllMembers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getAllMembersPtr
newCallback_IShare_getAllMembers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getAllMembers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getAllMembersPtr
newCallback_IShare_getAllMembers(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getAllMembers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getAllMembers : public Callback_IShare_getAllMembers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&, const CT&);

    Callback_IShare_getAllMembers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_getAllMembers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getAllMembersPtr
newCallback_IShare_getAllMembers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getAllMembers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getAllMembersPtr
newCallback_IShare_getAllMembers(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getAllMembers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getAllGuests : public Callback_IShare_getAllGuests_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::StringSet&);

    CallbackNC_IShare_getAllGuests(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::StringSet __ret;
        try
        {
            __ret = __proxy->end_getAllGuests(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getAllGuestsPtr
newCallback_IShare_getAllGuests(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::StringSet&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getAllGuests<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getAllGuestsPtr
newCallback_IShare_getAllGuests(T* instance, void (T::*cb)(const ::omero::api::StringSet&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getAllGuests<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getAllGuests : public Callback_IShare_getAllGuests_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::StringSet&, const CT&);

    Callback_IShare_getAllGuests(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::StringSet __ret;
        try
        {
            __ret = __proxy->end_getAllGuests(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getAllGuestsPtr
newCallback_IShare_getAllGuests(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::StringSet&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getAllGuests<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getAllGuestsPtr
newCallback_IShare_getAllGuests(T* instance, void (T::*cb)(const ::omero::api::StringSet&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getAllGuests<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getAllUsers : public Callback_IShare_getAllUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::StringSet&);

    CallbackNC_IShare_getAllUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::StringSet __ret;
        try
        {
            __ret = __proxy->end_getAllUsers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getAllUsersPtr
newCallback_IShare_getAllUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::StringSet&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getAllUsers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getAllUsersPtr
newCallback_IShare_getAllUsers(T* instance, void (T::*cb)(const ::omero::api::StringSet&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getAllUsers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getAllUsers : public Callback_IShare_getAllUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::StringSet&, const CT&);

    Callback_IShare_getAllUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::StringSet __ret;
        try
        {
            __ret = __proxy->end_getAllUsers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getAllUsersPtr
newCallback_IShare_getAllUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::StringSet&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getAllUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getAllUsersPtr
newCallback_IShare_getAllUsers(T* instance, void (T::*cb)(const ::omero::api::StringSet&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getAllUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_addUsers : public Callback_IShare_addUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_addUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addUsers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_addUsersPtr
newCallback_IShare_addUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addUsers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addUsersPtr
newCallback_IShare_addUsers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addUsers<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_addUsersPtr
newCallback_IShare_addUsers(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addUsers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addUsersPtr
newCallback_IShare_addUsers(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addUsers<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_addUsers : public Callback_IShare_addUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_addUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addUsers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_addUsersPtr
newCallback_IShare_addUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addUsersPtr
newCallback_IShare_addUsers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addUsers<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addUsersPtr
newCallback_IShare_addUsers(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addUsersPtr
newCallback_IShare_addUsers(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addUsers<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_addGuests : public Callback_IShare_addGuests_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_addGuests(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addGuests(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_addGuestsPtr
newCallback_IShare_addGuests(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addGuests<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addGuestsPtr
newCallback_IShare_addGuests(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addGuests<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_addGuestsPtr
newCallback_IShare_addGuests(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addGuests<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addGuestsPtr
newCallback_IShare_addGuests(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addGuests<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_addGuests : public Callback_IShare_addGuests_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_addGuests(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addGuests(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_addGuestsPtr
newCallback_IShare_addGuests(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addGuests<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addGuestsPtr
newCallback_IShare_addGuests(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addGuests<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addGuestsPtr
newCallback_IShare_addGuests(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addGuests<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addGuestsPtr
newCallback_IShare_addGuests(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addGuests<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_removeUsers : public Callback_IShare_removeUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_removeUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeUsers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_removeUsersPtr
newCallback_IShare_removeUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeUsers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeUsersPtr
newCallback_IShare_removeUsers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeUsers<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_removeUsersPtr
newCallback_IShare_removeUsers(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeUsers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeUsersPtr
newCallback_IShare_removeUsers(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeUsers<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_removeUsers : public Callback_IShare_removeUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_removeUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeUsers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_removeUsersPtr
newCallback_IShare_removeUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeUsersPtr
newCallback_IShare_removeUsers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeUsers<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeUsersPtr
newCallback_IShare_removeUsers(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeUsersPtr
newCallback_IShare_removeUsers(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeUsers<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_removeGuests : public Callback_IShare_removeGuests_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_removeGuests(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeGuests(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_removeGuestsPtr
newCallback_IShare_removeGuests(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeGuests<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeGuestsPtr
newCallback_IShare_removeGuests(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeGuests<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_removeGuestsPtr
newCallback_IShare_removeGuests(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeGuests<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeGuestsPtr
newCallback_IShare_removeGuests(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeGuests<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_removeGuests : public Callback_IShare_removeGuests_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_removeGuests(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeGuests(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_removeGuestsPtr
newCallback_IShare_removeGuests(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeGuests<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeGuestsPtr
newCallback_IShare_removeGuests(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeGuests<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeGuestsPtr
newCallback_IShare_removeGuests(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeGuests<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeGuestsPtr
newCallback_IShare_removeGuests(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeGuests<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_addUser : public Callback_IShare_addUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_addUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_addUserPtr
newCallback_IShare_addUser(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addUserPtr
newCallback_IShare_addUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addUser<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_addUserPtr
newCallback_IShare_addUser(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addUserPtr
newCallback_IShare_addUser(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addUser<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_addUser : public Callback_IShare_addUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_addUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_addUserPtr
newCallback_IShare_addUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addUserPtr
newCallback_IShare_addUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addUserPtr
newCallback_IShare_addUser(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addUserPtr
newCallback_IShare_addUser(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_addGuest : public Callback_IShare_addGuest_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_addGuest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addGuest(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_addGuestPtr
newCallback_IShare_addGuest(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addGuest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addGuestPtr
newCallback_IShare_addGuest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addGuest<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_addGuestPtr
newCallback_IShare_addGuest(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addGuest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_addGuestPtr
newCallback_IShare_addGuest(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_addGuest<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_addGuest : public Callback_IShare_addGuest_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_addGuest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addGuest(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_addGuestPtr
newCallback_IShare_addGuest(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addGuest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addGuestPtr
newCallback_IShare_addGuest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addGuest<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addGuestPtr
newCallback_IShare_addGuest(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addGuest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_addGuestPtr
newCallback_IShare_addGuest(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_addGuest<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_removeUser : public Callback_IShare_removeUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_removeUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_removeUserPtr
newCallback_IShare_removeUser(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeUserPtr
newCallback_IShare_removeUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeUser<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_removeUserPtr
newCallback_IShare_removeUser(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeUserPtr
newCallback_IShare_removeUser(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeUser<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_removeUser : public Callback_IShare_removeUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_removeUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_removeUserPtr
newCallback_IShare_removeUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeUserPtr
newCallback_IShare_removeUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeUserPtr
newCallback_IShare_removeUser(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeUserPtr
newCallback_IShare_removeUser(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_removeGuest : public Callback_IShare_removeGuest_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_removeGuest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeGuest(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_removeGuestPtr
newCallback_IShare_removeGuest(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeGuest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeGuestPtr
newCallback_IShare_removeGuest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeGuest<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_removeGuestPtr
newCallback_IShare_removeGuest(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeGuest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_removeGuestPtr
newCallback_IShare_removeGuest(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_removeGuest<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_removeGuest : public Callback_IShare_removeGuest_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_removeGuest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeGuest(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_removeGuestPtr
newCallback_IShare_removeGuest(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeGuest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeGuestPtr
newCallback_IShare_removeGuest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeGuest<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeGuestPtr
newCallback_IShare_removeGuest(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeGuest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_removeGuestPtr
newCallback_IShare_removeGuest(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_removeGuest<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getActiveConnections : public Callback_IShare_getActiveConnections_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::UserMap&);

    CallbackNC_IShare_getActiveConnections(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::UserMap __ret;
        try
        {
            __ret = __proxy->end_getActiveConnections(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getActiveConnectionsPtr
newCallback_IShare_getActiveConnections(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::UserMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getActiveConnections<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getActiveConnectionsPtr
newCallback_IShare_getActiveConnections(T* instance, void (T::*cb)(const ::omero::api::UserMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getActiveConnections<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getActiveConnections : public Callback_IShare_getActiveConnections_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::UserMap&, const CT&);

    Callback_IShare_getActiveConnections(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::UserMap __ret;
        try
        {
            __ret = __proxy->end_getActiveConnections(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getActiveConnectionsPtr
newCallback_IShare_getActiveConnections(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::UserMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getActiveConnections<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getActiveConnectionsPtr
newCallback_IShare_getActiveConnections(T* instance, void (T::*cb)(const ::omero::api::UserMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getActiveConnections<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getPastConnections : public Callback_IShare_getPastConnections_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::UserMap&);

    CallbackNC_IShare_getPastConnections(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::UserMap __ret;
        try
        {
            __ret = __proxy->end_getPastConnections(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getPastConnectionsPtr
newCallback_IShare_getPastConnections(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::UserMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getPastConnections<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getPastConnectionsPtr
newCallback_IShare_getPastConnections(T* instance, void (T::*cb)(const ::omero::api::UserMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getPastConnections<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getPastConnections : public Callback_IShare_getPastConnections_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::UserMap&, const CT&);

    Callback_IShare_getPastConnections(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::UserMap __ret;
        try
        {
            __ret = __proxy->end_getPastConnections(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getPastConnectionsPtr
newCallback_IShare_getPastConnections(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::UserMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getPastConnections<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getPastConnectionsPtr
newCallback_IShare_getPastConnections(T* instance, void (T::*cb)(const ::omero::api::UserMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getPastConnections<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_invalidateConnection : public Callback_IShare_invalidateConnection_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IShare_invalidateConnection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_invalidateConnection(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_IShare_invalidateConnectionPtr
newCallback_IShare_invalidateConnection(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_invalidateConnection<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_invalidateConnectionPtr
newCallback_IShare_invalidateConnection(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_invalidateConnection<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IShare_invalidateConnectionPtr
newCallback_IShare_invalidateConnection(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_invalidateConnection<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_invalidateConnectionPtr
newCallback_IShare_invalidateConnection(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_invalidateConnection<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_invalidateConnection : public Callback_IShare_invalidateConnection_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IShare_invalidateConnection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_invalidateConnection(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_invalidateConnectionPtr
newCallback_IShare_invalidateConnection(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_invalidateConnection<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_invalidateConnectionPtr
newCallback_IShare_invalidateConnection(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_invalidateConnection<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_invalidateConnectionPtr
newCallback_IShare_invalidateConnection(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_invalidateConnection<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_invalidateConnectionPtr
newCallback_IShare_invalidateConnection(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_invalidateConnection<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IShare_getEvents : public Callback_IShare_getEvents_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::IObjectList&);

    CallbackNC_IShare_getEvents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getEvents(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IShare_getEventsPtr
newCallback_IShare_getEvents(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getEvents<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IShare_getEventsPtr
newCallback_IShare_getEvents(T* instance, void (T::*cb)(const ::omero::api::IObjectList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IShare_getEvents<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IShare_getEvents : public Callback_IShare_getEvents_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::IObjectList&, const CT&);

    Callback_IShare_getEvents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ISharePrx __proxy = ::omero::api::ISharePrx::uncheckedCast(__result->getProxy());
        ::omero::api::IObjectList __ret;
        try
        {
            __ret = __proxy->end_getEvents(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IShare_getEventsPtr
newCallback_IShare_getEvents(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getEvents<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IShare_getEventsPtr
newCallback_IShare_getEvents(T* instance, void (T::*cb)(const ::omero::api::IObjectList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IShare_getEvents<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
