// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `JobHandle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_JobHandle_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_JobHandle_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ModelF.h>
#include <omero/ServicesF.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class JobHandle;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::JobHandle>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::JobHandle*);

}

}

}

namespace omero
{

namespace api
{

class JobHandle;
bool operator==(const JobHandle&, const JobHandle&);
bool operator<(const JobHandle&, const JobHandle&);
::Ice::Object* upCast(::omero::api::JobHandle*);
typedef ::IceInternal::Handle< ::omero::api::JobHandle> JobHandlePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::JobHandle> JobHandlePrx;
void __patch(JobHandlePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_JobHandle_submit : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Long) = 0;

    void __response(::Ice::Long __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_submit> AMI_JobHandle_submitPtr;

class AMD_JobHandle_submit : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_submit> AMD_JobHandle_submitPtr;

class AMI_JobHandle_attach : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::JobStatusPtr&) = 0;

    void __response(const ::omero::model::JobStatusPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_attach> AMI_JobHandle_attachPtr;

class AMD_JobHandle_attach : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::JobStatusPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_attach> AMD_JobHandle_attachPtr;

class AMI_JobHandle_getJob : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::JobPtr&) = 0;

    void __response(const ::omero::model::JobPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_getJob> AMI_JobHandle_getJobPtr;

class AMD_JobHandle_getJob : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::JobPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_getJob> AMD_JobHandle_getJobPtr;

class AMI_JobHandle_jobStatus : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::JobStatusPtr&) = 0;

    void __response(const ::omero::model::JobStatusPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_jobStatus> AMI_JobHandle_jobStatusPtr;

class AMD_JobHandle_jobStatus : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::JobStatusPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_jobStatus> AMD_JobHandle_jobStatusPtr;

class AMI_JobHandle_jobFinished : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::RTimePtr&) = 0;

    void __response(const ::omero::RTimePtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_jobFinished> AMI_JobHandle_jobFinishedPtr;

class AMD_JobHandle_jobFinished : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::RTimePtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_jobFinished> AMD_JobHandle_jobFinishedPtr;

class AMI_JobHandle_jobMessage : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::string&) = 0;

    void __response(const ::std::string& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_jobMessage> AMI_JobHandle_jobMessagePtr;

class AMD_JobHandle_jobMessage : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::string&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_jobMessage> AMD_JobHandle_jobMessagePtr;

class AMI_JobHandle_jobRunning : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(bool) = 0;

    void __response(bool __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_jobRunning> AMI_JobHandle_jobRunningPtr;

class AMD_JobHandle_jobRunning : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(bool) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_jobRunning> AMD_JobHandle_jobRunningPtr;

class AMI_JobHandle_jobError : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(bool) = 0;

    void __response(bool __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_jobError> AMI_JobHandle_jobErrorPtr;

class AMD_JobHandle_jobError : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(bool) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_jobError> AMD_JobHandle_jobErrorPtr;

class AMI_JobHandle_cancelJob : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_cancelJob> AMI_JobHandle_cancelJobPtr;

class AMD_JobHandle_cancelJob : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_cancelJob> AMD_JobHandle_cancelJobPtr;

class AMI_JobHandle_setStatus : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::string&) = 0;

    void __response(const ::std::string& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_setStatus> AMI_JobHandle_setStatusPtr;

class AMD_JobHandle_setStatus : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::string&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_setStatus> AMD_JobHandle_setStatusPtr;

class AMI_JobHandle_setMessage : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::string&) = 0;

    void __response(const ::std::string& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_setMessage> AMI_JobHandle_setMessagePtr;

class AMD_JobHandle_setMessage : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::string&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_setMessage> AMD_JobHandle_setMessagePtr;

class AMI_JobHandle_setStatusAndMessage : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::string&) = 0;

    void __response(const ::std::string& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_JobHandle_setStatusAndMessage> AMI_JobHandle_setStatusAndMessagePtr;

class AMD_JobHandle_setStatusAndMessage : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::string&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_JobHandle_setStatusAndMessage> AMD_JobHandle_setStatusAndMessagePtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_JobHandle_submit : public ::omero::api::AMD_JobHandle_submit, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_submit(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JobHandle_attach : public ::omero::api::AMD_JobHandle_attach, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_attach(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::JobStatusPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JobHandle_getJob : public ::omero::api::AMD_JobHandle_getJob, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_getJob(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::JobPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JobHandle_jobStatus : public ::omero::api::AMD_JobHandle_jobStatus, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_jobStatus(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::JobStatusPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JobHandle_jobFinished : public ::omero::api::AMD_JobHandle_jobFinished, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_jobFinished(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::RTimePtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JobHandle_jobMessage : public ::omero::api::AMD_JobHandle_jobMessage, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_jobMessage(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JobHandle_jobRunning : public ::omero::api::AMD_JobHandle_jobRunning, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_jobRunning(::IceInternal::Incoming&);

    virtual void ice_response(bool);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JobHandle_jobError : public ::omero::api::AMD_JobHandle_jobError, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_jobError(::IceInternal::Incoming&);

    virtual void ice_response(bool);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JobHandle_cancelJob : public ::omero::api::AMD_JobHandle_cancelJob, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_cancelJob(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JobHandle_setStatus : public ::omero::api::AMD_JobHandle_setStatus, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_setStatus(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JobHandle_setMessage : public ::omero::api::AMD_JobHandle_setMessage, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_setMessage(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JobHandle_setStatusAndMessage : public ::omero::api::AMD_JobHandle_setStatusAndMessage, public ::IceInternal::IncomingAsync
{
public:

    AMD_JobHandle_setStatusAndMessage(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_JobHandle_submit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_submit_Base> Callback_JobHandle_submitPtr;

class Callback_JobHandle_attach_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_attach_Base> Callback_JobHandle_attachPtr;

class Callback_JobHandle_getJob_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_getJob_Base> Callback_JobHandle_getJobPtr;

class Callback_JobHandle_jobStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_jobStatus_Base> Callback_JobHandle_jobStatusPtr;

class Callback_JobHandle_jobFinished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_jobFinished_Base> Callback_JobHandle_jobFinishedPtr;

class Callback_JobHandle_jobMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_jobMessage_Base> Callback_JobHandle_jobMessagePtr;

class Callback_JobHandle_jobRunning_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_jobRunning_Base> Callback_JobHandle_jobRunningPtr;

class Callback_JobHandle_jobError_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_jobError_Base> Callback_JobHandle_jobErrorPtr;

class Callback_JobHandle_cancelJob_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_cancelJob_Base> Callback_JobHandle_cancelJobPtr;

class Callback_JobHandle_setStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_setStatus_Base> Callback_JobHandle_setStatusPtr;

class Callback_JobHandle_setMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_setMessage_Base> Callback_JobHandle_setMessagePtr;

class Callback_JobHandle_setStatusAndMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JobHandle_setStatusAndMessage_Base> Callback_JobHandle_setStatusAndMessagePtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class JobHandle : virtual public ::IceProxy::omero::api::StatefulServiceInterface
{
public:

    ::Ice::Long submit(const ::omero::model::JobPtr& j)
    {
        return submit(j, 0);
    }
    ::Ice::Long submit(const ::omero::model::JobPtr& j, const ::Ice::Context& __ctx)
    {
        return submit(j, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_submit(const ::omero::model::JobPtr& j, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submit(j, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submit(const ::omero::model::JobPtr& j, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submit(j, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_submit(const ::omero::model::JobPtr& j, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submit(j, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submit(const ::omero::model::JobPtr& j, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submit(j, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_submit(const ::omero::model::JobPtr& j, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_submit(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_submit(j, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_submit(const ::omero::model::JobPtr& j)
    {
        return begin_submit(j, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submit(const ::omero::model::JobPtr& j, const ::Ice::Context& __ctx)
    {
        return begin_submit(j, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submit(const ::omero::model::JobPtr& j, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submit(j, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submit(const ::omero::model::JobPtr& j, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submit(j, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submit(const ::omero::model::JobPtr& j, const ::omero::api::Callback_JobHandle_submitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submit(j, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submit(const ::omero::model::JobPtr& j, const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_submitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submit(j, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_submit(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long submit(const ::omero::model::JobPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_submit(const ::omero::model::JobPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool submit_async(const ::omero::api::AMI_JobHandle_submitPtr&, const ::omero::model::JobPtr&);
    bool submit_async(const ::omero::api::AMI_JobHandle_submitPtr&, const ::omero::model::JobPtr&, const ::Ice::Context&);

    ::omero::model::JobStatusPtr attach(::Ice::Long jobId)
    {
        return attach(jobId, 0);
    }
    ::omero::model::JobStatusPtr attach(::Ice::Long jobId, const ::Ice::Context& __ctx)
    {
        return attach(jobId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_attach(::Ice::Long jobId, const ::IceInternal::Function<void (const ::omero::model::JobStatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_attach(jobId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_attach(::Ice::Long jobId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_attach(jobId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_attach(::Ice::Long jobId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::JobStatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_attach(jobId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_attach(::Ice::Long jobId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_attach(jobId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_attach(::Ice::Long jobId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::JobStatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::JobStatusPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                ::omero::model::JobStatusPtr __ret;
                try
                {
                    __ret = __proxy->end_attach(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::JobStatusPtr&)> _response;
        };
        return begin_attach(jobId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_attach(::Ice::Long jobId)
    {
        return begin_attach(jobId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_attach(::Ice::Long jobId, const ::Ice::Context& __ctx)
    {
        return begin_attach(jobId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_attach(::Ice::Long jobId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_attach(jobId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_attach(::Ice::Long jobId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_attach(jobId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_attach(::Ice::Long jobId, const ::omero::api::Callback_JobHandle_attachPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_attach(jobId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_attach(::Ice::Long jobId, const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_attachPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_attach(jobId, &__ctx, __del, __cookie);
    }

    ::omero::model::JobStatusPtr end_attach(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::JobStatusPtr attach(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_attach(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool attach_async(const ::omero::api::AMI_JobHandle_attachPtr&, ::Ice::Long);
    bool attach_async(const ::omero::api::AMI_JobHandle_attachPtr&, ::Ice::Long, const ::Ice::Context&);

    ::omero::model::JobPtr getJob()
    {
        return getJob(0);
    }
    ::omero::model::JobPtr getJob(const ::Ice::Context& __ctx)
    {
        return getJob(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getJob(const ::IceInternal::Function<void (const ::omero::model::JobPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getJob(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getJob(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getJob(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getJob(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::JobPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getJob(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getJob(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getJob(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getJob(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::JobPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::JobPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                ::omero::model::JobPtr __ret;
                try
                {
                    __ret = __proxy->end_getJob(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::JobPtr&)> _response;
        };
        return begin_getJob(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getJob()
    {
        return begin_getJob(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::Ice::Context& __ctx)
    {
        return begin_getJob(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJob(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJob(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::omero::api::Callback_JobHandle_getJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJob(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_getJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJob(&__ctx, __del, __cookie);
    }

    ::omero::model::JobPtr end_getJob(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::JobPtr getJob(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getJob(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getJob_async(const ::omero::api::AMI_JobHandle_getJobPtr&);
    bool getJob_async(const ::omero::api::AMI_JobHandle_getJobPtr&, const ::Ice::Context&);

    ::omero::model::JobStatusPtr jobStatus()
    {
        return jobStatus(0);
    }
    ::omero::model::JobStatusPtr jobStatus(const ::Ice::Context& __ctx)
    {
        return jobStatus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_jobStatus(const ::IceInternal::Function<void (const ::omero::model::JobStatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_jobStatus(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_jobStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_jobStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_jobStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::JobStatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_jobStatus(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_jobStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_jobStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_jobStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::JobStatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::JobStatusPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                ::omero::model::JobStatusPtr __ret;
                try
                {
                    __ret = __proxy->end_jobStatus(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::JobStatusPtr&)> _response;
        };
        return begin_jobStatus(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_jobStatus()
    {
        return begin_jobStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jobStatus(const ::Ice::Context& __ctx)
    {
        return begin_jobStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jobStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobStatus(const ::omero::api::Callback_JobHandle_jobStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobStatus(const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_jobStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobStatus(&__ctx, __del, __cookie);
    }

    ::omero::model::JobStatusPtr end_jobStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::JobStatusPtr jobStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_jobStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool jobStatus_async(const ::omero::api::AMI_JobHandle_jobStatusPtr&);
    bool jobStatus_async(const ::omero::api::AMI_JobHandle_jobStatusPtr&, const ::Ice::Context&);

    ::omero::RTimePtr jobFinished()
    {
        return jobFinished(0);
    }
    ::omero::RTimePtr jobFinished(const ::Ice::Context& __ctx)
    {
        return jobFinished(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_jobFinished(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_jobFinished(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_jobFinished(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_jobFinished(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_jobFinished(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_jobFinished(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_jobFinished(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_jobFinished(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_jobFinished(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_jobFinished(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_jobFinished(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_jobFinished()
    {
        return begin_jobFinished(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jobFinished(const ::Ice::Context& __ctx)
    {
        return begin_jobFinished(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jobFinished(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobFinished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobFinished(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobFinished(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobFinished(const ::omero::api::Callback_JobHandle_jobFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobFinished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobFinished(const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_jobFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobFinished(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_jobFinished(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr jobFinished(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_jobFinished(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool jobFinished_async(const ::omero::api::AMI_JobHandle_jobFinishedPtr&);
    bool jobFinished_async(const ::omero::api::AMI_JobHandle_jobFinishedPtr&, const ::Ice::Context&);

    ::std::string jobMessage()
    {
        return jobMessage(0);
    }
    ::std::string jobMessage(const ::Ice::Context& __ctx)
    {
        return jobMessage(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_jobMessage(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_jobMessage(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_jobMessage(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_jobMessage(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_jobMessage(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_jobMessage(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_jobMessage(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_jobMessage(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_jobMessage(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_jobMessage(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_jobMessage(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_jobMessage()
    {
        return begin_jobMessage(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jobMessage(const ::Ice::Context& __ctx)
    {
        return begin_jobMessage(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jobMessage(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobMessage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobMessage(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobMessage(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobMessage(const ::omero::api::Callback_JobHandle_jobMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobMessage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobMessage(const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_jobMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobMessage(&__ctx, __del, __cookie);
    }

    ::std::string end_jobMessage(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string jobMessage(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_jobMessage(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool jobMessage_async(const ::omero::api::AMI_JobHandle_jobMessagePtr&);
    bool jobMessage_async(const ::omero::api::AMI_JobHandle_jobMessagePtr&, const ::Ice::Context&);

    bool jobRunning()
    {
        return jobRunning(0);
    }
    bool jobRunning(const ::Ice::Context& __ctx)
    {
        return jobRunning(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_jobRunning(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_jobRunning(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_jobRunning(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_jobRunning(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_jobRunning(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_jobRunning(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_jobRunning(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_jobRunning(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_jobRunning(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_jobRunning(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_jobRunning(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_jobRunning()
    {
        return begin_jobRunning(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jobRunning(const ::Ice::Context& __ctx)
    {
        return begin_jobRunning(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jobRunning(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobRunning(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobRunning(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobRunning(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobRunning(const ::omero::api::Callback_JobHandle_jobRunningPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobRunning(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobRunning(const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_jobRunningPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobRunning(&__ctx, __del, __cookie);
    }

    bool end_jobRunning(const ::Ice::AsyncResultPtr&);
    
private:

    bool jobRunning(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_jobRunning(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool jobRunning_async(const ::omero::api::AMI_JobHandle_jobRunningPtr&);
    bool jobRunning_async(const ::omero::api::AMI_JobHandle_jobRunningPtr&, const ::Ice::Context&);

    bool jobError()
    {
        return jobError(0);
    }
    bool jobError(const ::Ice::Context& __ctx)
    {
        return jobError(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_jobError(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_jobError(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_jobError(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_jobError(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_jobError(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_jobError(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_jobError(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_jobError(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_jobError(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_jobError(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_jobError(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_jobError()
    {
        return begin_jobError(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jobError(const ::Ice::Context& __ctx)
    {
        return begin_jobError(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jobError(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobError(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobError(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobError(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobError(const ::omero::api::Callback_JobHandle_jobErrorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobError(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jobError(const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_jobErrorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jobError(&__ctx, __del, __cookie);
    }

    bool end_jobError(const ::Ice::AsyncResultPtr&);
    
private:

    bool jobError(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_jobError(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool jobError_async(const ::omero::api::AMI_JobHandle_jobErrorPtr&);
    bool jobError_async(const ::omero::api::AMI_JobHandle_jobErrorPtr&, const ::Ice::Context&);

    void cancelJob()
    {
        cancelJob(0);
    }
    void cancelJob(const ::Ice::Context& __ctx)
    {
        cancelJob(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancelJob(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_cancelJob(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_cancelJob(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancelJob(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancelJob(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_cancelJob(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_cancelJob(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancelJob(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_cancelJob(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_cancelJob(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_cancelJob(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_cancelJob()
    {
        return begin_cancelJob(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancelJob(const ::Ice::Context& __ctx)
    {
        return begin_cancelJob(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancelJob(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelJob(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelJob(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelJob(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelJob(const ::omero::api::Callback_JobHandle_cancelJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelJob(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelJob(const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_cancelJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelJob(&__ctx, __del, __cookie);
    }

    void end_cancelJob(const ::Ice::AsyncResultPtr&);
    
private:

    void cancelJob(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancelJob(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool cancelJob_async(const ::omero::api::AMI_JobHandle_cancelJobPtr&);
    bool cancelJob_async(const ::omero::api::AMI_JobHandle_cancelJobPtr&, const ::Ice::Context&);

    ::std::string setStatus(const ::std::string& status)
    {
        return setStatus(status, 0);
    }
    ::std::string setStatus(const ::std::string& status, const ::Ice::Context& __ctx)
    {
        return setStatus(status, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::std::string& status, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setStatus(status, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::std::string& status, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStatus(status, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::std::string& status, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setStatus(status, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::std::string& status, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStatus(status, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setStatus(const ::std::string& status, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_setStatus(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_setStatus(status, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status)
    {
        return begin_setStatus(status, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status, const ::Ice::Context& __ctx)
    {
        return begin_setStatus(status, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(status, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status, const ::omero::api::Callback_JobHandle_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string& status, const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(status, &__ctx, __del, __cookie);
    }

    ::std::string end_setStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string setStatus(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStatus(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool setStatus_async(const ::omero::api::AMI_JobHandle_setStatusPtr&, const ::std::string&);
    bool setStatus_async(const ::omero::api::AMI_JobHandle_setStatusPtr&, const ::std::string&, const ::Ice::Context&);

    ::std::string setMessage(const ::std::string& message)
    {
        return setMessage(message, 0);
    }
    ::std::string setMessage(const ::std::string& message, const ::Ice::Context& __ctx)
    {
        return setMessage(message, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setMessage(const ::std::string& message, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setMessage(message, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setMessage(const ::std::string& message, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMessage(message, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMessage(const ::std::string& message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setMessage(message, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setMessage(const ::std::string& message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMessage(message, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setMessage(const ::std::string& message, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_setMessage(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_setMessage(message, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setMessage(const ::std::string& message)
    {
        return begin_setMessage(message, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::std::string& message, const ::Ice::Context& __ctx)
    {
        return begin_setMessage(message, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::std::string& message, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::std::string& message, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(message, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::std::string& message, const ::omero::api::Callback_JobHandle_setMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::std::string& message, const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_setMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(message, &__ctx, __del, __cookie);
    }

    ::std::string end_setMessage(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string setMessage(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMessage(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool setMessage_async(const ::omero::api::AMI_JobHandle_setMessagePtr&, const ::std::string&);
    bool setMessage_async(const ::omero::api::AMI_JobHandle_setMessagePtr&, const ::std::string&, const ::Ice::Context&);

    ::std::string setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message)
    {
        return setStatusAndMessage(status, message, 0);
    }
    ::std::string setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message, const ::Ice::Context& __ctx)
    {
        return setStatusAndMessage(status, message, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setStatusAndMessage(status, message, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStatusAndMessage(status, message, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setStatusAndMessage(status, message, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStatusAndMessage(status, message, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_setStatusAndMessage(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_setStatusAndMessage(status, message, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message)
    {
        return begin_setStatusAndMessage(status, message, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message, const ::Ice::Context& __ctx)
    {
        return begin_setStatusAndMessage(status, message, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatusAndMessage(status, message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatusAndMessage(status, message, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message, const ::omero::api::Callback_JobHandle_setStatusAndMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatusAndMessage(status, message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatusAndMessage(const ::std::string& status, const ::omero::RStringPtr& message, const ::Ice::Context& __ctx, const ::omero::api::Callback_JobHandle_setStatusAndMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatusAndMessage(status, message, &__ctx, __del, __cookie);
    }

    ::std::string end_setStatusAndMessage(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string setStatusAndMessage(const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStatusAndMessage(const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool setStatusAndMessage_async(const ::omero::api::AMI_JobHandle_setStatusAndMessagePtr&, const ::std::string&, const ::omero::RStringPtr&);
    bool setStatusAndMessage_async(const ::omero::api::AMI_JobHandle_setStatusAndMessagePtr&, const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<JobHandle> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_secure(bool __secure) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_twoway() const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_oneway() const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_batchOneway() const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_datagram() const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_batchDatagram() const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_compress(bool __compress) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_timeout(int __timeout) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<JobHandle> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<JobHandle*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class JobHandle : virtual public ::IceDelegate::omero::api::StatefulServiceInterface
{
public:

    virtual ::Ice::Long submit(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::JobStatusPtr attach(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::JobPtr getJob(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::JobStatusPtr jobStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr jobFinished(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string jobMessage(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool jobRunning(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool jobError(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void cancelJob(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string setStatus(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string setMessage(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string setStatusAndMessage(const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class JobHandle : virtual public ::IceDelegate::omero::api::JobHandle,
                  virtual public ::IceDelegateM::omero::api::StatefulServiceInterface
{
public:

    virtual ::Ice::Long submit(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobStatusPtr attach(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobPtr getJob(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobStatusPtr jobStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr jobFinished(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string jobMessage(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool jobRunning(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool jobError(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void cancelJob(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string setStatus(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string setMessage(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string setStatusAndMessage(const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class JobHandle : virtual public ::IceDelegate::omero::api::JobHandle,
                  virtual public ::IceDelegateD::omero::api::StatefulServiceInterface
{
public:

    virtual ::Ice::Long submit(const ::omero::model::JobPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobStatusPtr attach(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobPtr getJob(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::JobStatusPtr jobStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr jobFinished(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string jobMessage(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool jobRunning(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool jobError(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void cancelJob(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string setStatus(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string setMessage(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string setStatusAndMessage(const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class JobHandle : virtual public ::omero::api::StatefulServiceInterface
{
public:

    typedef JobHandlePrx ProxyType;
    typedef JobHandlePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void submit_async(const ::omero::api::AMD_JobHandle_submitPtr&, const ::omero::model::JobPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___submit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void attach_async(const ::omero::api::AMD_JobHandle_attachPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___attach(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getJob_async(const ::omero::api::AMD_JobHandle_getJobPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void jobStatus_async(const ::omero::api::AMD_JobHandle_jobStatusPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___jobStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void jobFinished_async(const ::omero::api::AMD_JobHandle_jobFinishedPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___jobFinished(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void jobMessage_async(const ::omero::api::AMD_JobHandle_jobMessagePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___jobMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void jobRunning_async(const ::omero::api::AMD_JobHandle_jobRunningPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___jobRunning(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void jobError_async(const ::omero::api::AMD_JobHandle_jobErrorPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___jobError(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancelJob_async(const ::omero::api::AMD_JobHandle_cancelJobPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancelJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStatus_async(const ::omero::api::AMD_JobHandle_setStatusPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setMessage_async(const ::omero::api::AMD_JobHandle_setMessagePtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStatusAndMessage_async(const ::omero::api::AMD_JobHandle_setStatusAndMessagePtr&, const ::std::string&, const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStatusAndMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const JobHandle& l, const JobHandle& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const JobHandle& l, const JobHandle& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_JobHandle_submit : public Callback_JobHandle_submit_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_JobHandle_submit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_submit(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_submitPtr
newCallback_JobHandle_submit(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_submit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_submitPtr
newCallback_JobHandle_submit(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_submit<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_submit : public Callback_JobHandle_submit_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_JobHandle_submit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_submit(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_submitPtr
newCallback_JobHandle_submit(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_submit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_submitPtr
newCallback_JobHandle_submit(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_submit<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JobHandle_attach : public Callback_JobHandle_attach_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::JobStatusPtr&);

    CallbackNC_JobHandle_attach(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobStatusPtr __ret;
        try
        {
            __ret = __proxy->end_attach(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_attachPtr
newCallback_JobHandle_attach(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobStatusPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_attach<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_attachPtr
newCallback_JobHandle_attach(T* instance, void (T::*cb)(const ::omero::model::JobStatusPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_attach<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_attach : public Callback_JobHandle_attach_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::JobStatusPtr&, const CT&);

    Callback_JobHandle_attach(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobStatusPtr __ret;
        try
        {
            __ret = __proxy->end_attach(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_attachPtr
newCallback_JobHandle_attach(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobStatusPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_attach<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_attachPtr
newCallback_JobHandle_attach(T* instance, void (T::*cb)(const ::omero::model::JobStatusPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_attach<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JobHandle_getJob : public Callback_JobHandle_getJob_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::JobPtr&);

    CallbackNC_JobHandle_getJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobPtr __ret;
        try
        {
            __ret = __proxy->end_getJob(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_getJobPtr
newCallback_JobHandle_getJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_getJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_getJobPtr
newCallback_JobHandle_getJob(T* instance, void (T::*cb)(const ::omero::model::JobPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_getJob<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_getJob : public Callback_JobHandle_getJob_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::JobPtr&, const CT&);

    Callback_JobHandle_getJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobPtr __ret;
        try
        {
            __ret = __proxy->end_getJob(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_getJobPtr
newCallback_JobHandle_getJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_getJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_getJobPtr
newCallback_JobHandle_getJob(T* instance, void (T::*cb)(const ::omero::model::JobPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_getJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JobHandle_jobStatus : public Callback_JobHandle_jobStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::JobStatusPtr&);

    CallbackNC_JobHandle_jobStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobStatusPtr __ret;
        try
        {
            __ret = __proxy->end_jobStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_jobStatusPtr
newCallback_JobHandle_jobStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobStatusPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_jobStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_jobStatusPtr
newCallback_JobHandle_jobStatus(T* instance, void (T::*cb)(const ::omero::model::JobStatusPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_jobStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_jobStatus : public Callback_JobHandle_jobStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::JobStatusPtr&, const CT&);

    Callback_JobHandle_jobStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::model::JobStatusPtr __ret;
        try
        {
            __ret = __proxy->end_jobStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_jobStatusPtr
newCallback_JobHandle_jobStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::JobStatusPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_jobStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_jobStatusPtr
newCallback_JobHandle_jobStatus(T* instance, void (T::*cb)(const ::omero::model::JobStatusPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_jobStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JobHandle_jobFinished : public Callback_JobHandle_jobFinished_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_JobHandle_jobFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_jobFinished(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_jobFinishedPtr
newCallback_JobHandle_jobFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_jobFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_jobFinishedPtr
newCallback_JobHandle_jobFinished(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_jobFinished<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_jobFinished : public Callback_JobHandle_jobFinished_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_JobHandle_jobFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_jobFinished(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_jobFinishedPtr
newCallback_JobHandle_jobFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_jobFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_jobFinishedPtr
newCallback_JobHandle_jobFinished(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_jobFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JobHandle_jobMessage : public Callback_JobHandle_jobMessage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_JobHandle_jobMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_jobMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_jobMessagePtr
newCallback_JobHandle_jobMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_jobMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_jobMessagePtr
newCallback_JobHandle_jobMessage(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_jobMessage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_jobMessage : public Callback_JobHandle_jobMessage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_JobHandle_jobMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_jobMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_jobMessagePtr
newCallback_JobHandle_jobMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_jobMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_jobMessagePtr
newCallback_JobHandle_jobMessage(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_jobMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JobHandle_jobRunning : public Callback_JobHandle_jobRunning_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_JobHandle_jobRunning(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_jobRunning(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_jobRunningPtr
newCallback_JobHandle_jobRunning(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_jobRunning<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_jobRunningPtr
newCallback_JobHandle_jobRunning(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_jobRunning<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_jobRunning : public Callback_JobHandle_jobRunning_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_JobHandle_jobRunning(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_jobRunning(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_jobRunningPtr
newCallback_JobHandle_jobRunning(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_jobRunning<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_jobRunningPtr
newCallback_JobHandle_jobRunning(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_jobRunning<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JobHandle_jobError : public Callback_JobHandle_jobError_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_JobHandle_jobError(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_jobError(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_jobErrorPtr
newCallback_JobHandle_jobError(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_jobError<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_jobErrorPtr
newCallback_JobHandle_jobError(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_jobError<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_jobError : public Callback_JobHandle_jobError_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_JobHandle_jobError(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_jobError(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_jobErrorPtr
newCallback_JobHandle_jobError(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_jobError<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_jobErrorPtr
newCallback_JobHandle_jobError(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_jobError<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JobHandle_cancelJob : public Callback_JobHandle_cancelJob_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JobHandle_cancelJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_cancelJob(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_cancelJobPtr
newCallback_JobHandle_cancelJob(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_cancelJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_cancelJobPtr
newCallback_JobHandle_cancelJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_cancelJob<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JobHandle_cancelJobPtr
newCallback_JobHandle_cancelJob(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_cancelJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_cancelJobPtr
newCallback_JobHandle_cancelJob(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_cancelJob<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_cancelJob : public Callback_JobHandle_cancelJob_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JobHandle_cancelJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_cancelJob(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_cancelJobPtr
newCallback_JobHandle_cancelJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_cancelJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_cancelJobPtr
newCallback_JobHandle_cancelJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_cancelJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_cancelJobPtr
newCallback_JobHandle_cancelJob(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_cancelJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_cancelJobPtr
newCallback_JobHandle_cancelJob(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_cancelJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JobHandle_setStatus : public Callback_JobHandle_setStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_JobHandle_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_setStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_setStatusPtr
newCallback_JobHandle_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_setStatusPtr
newCallback_JobHandle_setStatus(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_setStatus : public Callback_JobHandle_setStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_JobHandle_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_setStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_setStatusPtr
newCallback_JobHandle_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_setStatusPtr
newCallback_JobHandle_setStatus(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JobHandle_setMessage : public Callback_JobHandle_setMessage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_JobHandle_setMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_setMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_setMessagePtr
newCallback_JobHandle_setMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_setMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_setMessagePtr
newCallback_JobHandle_setMessage(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_setMessage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_setMessage : public Callback_JobHandle_setMessage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_JobHandle_setMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_setMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_setMessagePtr
newCallback_JobHandle_setMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_setMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_setMessagePtr
newCallback_JobHandle_setMessage(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_setMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JobHandle_setStatusAndMessage : public Callback_JobHandle_setStatusAndMessage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_JobHandle_setStatusAndMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_setStatusAndMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JobHandle_setStatusAndMessagePtr
newCallback_JobHandle_setStatusAndMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_setStatusAndMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JobHandle_setStatusAndMessagePtr
newCallback_JobHandle_setStatusAndMessage(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JobHandle_setStatusAndMessage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JobHandle_setStatusAndMessage : public Callback_JobHandle_setStatusAndMessage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_JobHandle_setStatusAndMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::JobHandlePrx __proxy = ::omero::api::JobHandlePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_setStatusAndMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JobHandle_setStatusAndMessagePtr
newCallback_JobHandle_setStatusAndMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_setStatusAndMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JobHandle_setStatusAndMessagePtr
newCallback_JobHandle_setStatusAndMessage(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JobHandle_setStatusAndMessage<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
