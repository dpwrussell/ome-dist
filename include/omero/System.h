// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `System.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_System_h__
#define __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_System_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/RTypes.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace sys
{

class EventContext;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::EventContext>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::sys::EventContext*);

class Filter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::Filter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::sys::Filter*);

class Options;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::Options>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::sys::Options*);

class Parameters;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::Parameters>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::sys::Parameters*);

class Principal;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::Principal>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::sys::Principal*);

class Roles;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::Roles>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::sys::Roles*);

}

}

}

namespace omero
{

namespace sys
{

class EventContext;
bool operator==(const EventContext&, const EventContext&);
bool operator<(const EventContext&, const EventContext&);
::Ice::Object* upCast(::omero::sys::EventContext*);
typedef ::IceInternal::Handle< ::omero::sys::EventContext> EventContextPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::EventContext> EventContextPrx;
void __patch(EventContextPtr&, const ::Ice::ObjectPtr&);

class Filter;
bool operator==(const Filter&, const Filter&);
bool operator<(const Filter&, const Filter&);
::Ice::Object* upCast(::omero::sys::Filter*);
typedef ::IceInternal::Handle< ::omero::sys::Filter> FilterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::Filter> FilterPrx;
void __patch(FilterPtr&, const ::Ice::ObjectPtr&);

class Options;
bool operator==(const Options&, const Options&);
bool operator<(const Options&, const Options&);
::Ice::Object* upCast(::omero::sys::Options*);
typedef ::IceInternal::Handle< ::omero::sys::Options> OptionsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::Options> OptionsPrx;
void __patch(OptionsPtr&, const ::Ice::ObjectPtr&);

class Parameters;
bool operator==(const Parameters&, const Parameters&);
bool operator<(const Parameters&, const Parameters&);
::Ice::Object* upCast(::omero::sys::Parameters*);
typedef ::IceInternal::Handle< ::omero::sys::Parameters> ParametersPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::Parameters> ParametersPrx;
void __patch(ParametersPtr&, const ::Ice::ObjectPtr&);

class Principal;
bool operator==(const Principal&, const Principal&);
bool operator<(const Principal&, const Principal&);
::Ice::Object* upCast(::omero::sys::Principal*);
typedef ::IceInternal::Handle< ::omero::sys::Principal> PrincipalPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::Principal> PrincipalPrx;
void __patch(PrincipalPtr&, const ::Ice::ObjectPtr&);

class Roles;
bool operator==(const Roles&, const Roles&);
bool operator<(const Roles&, const Roles&);
::Ice::Object* upCast(::omero::sys::Roles*);
typedef ::IceInternal::Handle< ::omero::sys::Roles> RolesPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::sys::Roles> RolesPrx;
void __patch(RolesPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace sys
{

typedef ::std::vector< ::Ice::Long> LongList;

typedef ::std::vector< ::Ice::Int> IntList;

typedef ::std::map< ::Ice::Long, ::Ice::Long> CountMap;

typedef ::std::map< ::std::string, ::omero::RTypePtr> ParamMap;

typedef ::std::map< ::Ice::Long, ::Ice::ByteSeq> IdByteMap;

}

}

namespace omero
{

namespace sys
{

}

}

namespace IceProxy
{

namespace omero
{

namespace sys
{

class EventContext : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<EventContext> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_secure(bool __secure) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_twoway() const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_oneway() const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_batchOneway() const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_datagram() const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_batchDatagram() const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_compress(bool __compress) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_timeout(int __timeout) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EventContext> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<EventContext*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Filter : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Filter> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_secure(bool __secure) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_twoway() const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_oneway() const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_batchOneway() const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_datagram() const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_batchDatagram() const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_compress(bool __compress) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Options : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Options> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_secure(bool __secure) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_twoway() const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_oneway() const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_batchOneway() const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_datagram() const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_batchDatagram() const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_compress(bool __compress) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Options> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Options*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Parameters : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Parameters> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_secure(bool __secure) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_twoway() const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_oneway() const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_batchOneway() const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_datagram() const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_batchDatagram() const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_compress(bool __compress) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Parameters> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Parameters*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Principal : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Principal> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_secure(bool __secure) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_twoway() const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_oneway() const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_batchOneway() const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_datagram() const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_batchDatagram() const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_compress(bool __compress) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Principal> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Principal*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Roles : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Roles> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_secure(bool __secure) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_twoway() const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_oneway() const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_batchOneway() const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_datagram() const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_batchDatagram() const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_compress(bool __compress) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Roles> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Roles*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace sys
{

class EventContext : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Filter : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Options : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Parameters : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Principal : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Roles : virtual public ::IceDelegate::Ice::Object
{
public:
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace sys
{

class EventContext : virtual public ::IceDelegate::omero::sys::EventContext,
                     virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Filter : virtual public ::IceDelegate::omero::sys::Filter,
               virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Options : virtual public ::IceDelegate::omero::sys::Options,
                virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Parameters : virtual public ::IceDelegate::omero::sys::Parameters,
                   virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Principal : virtual public ::IceDelegate::omero::sys::Principal,
                  virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Roles : virtual public ::IceDelegate::omero::sys::Roles,
              virtual public ::IceDelegateM::Ice::Object
{
public:
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace sys
{

class EventContext : virtual public ::IceDelegate::omero::sys::EventContext,
                     virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Filter : virtual public ::IceDelegate::omero::sys::Filter,
               virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Options : virtual public ::IceDelegate::omero::sys::Options,
                virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Parameters : virtual public ::IceDelegate::omero::sys::Parameters,
                   virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Principal : virtual public ::IceDelegate::omero::sys::Principal,
                  virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Roles : virtual public ::IceDelegate::omero::sys::Roles,
              virtual public ::IceDelegateD::Ice::Object
{
public:
};

}

}

}

namespace omero
{

namespace sys
{

class EventContext : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef EventContextPrx ProxyType;
    typedef EventContextPtr PointerType;

    EventContext()
    {
    }

    EventContext(::Ice::Long __ice_shareId, ::Ice::Long __ice_sessionId, const ::std::string& __ice_sessionUuid, ::Ice::Long __ice_userId, const ::std::string& __ice_userName, ::Ice::Long __ice_groupId, const ::std::string& __ice_groupName, bool __ice_isAdmin, ::Ice::Long __ice_eventId, const ::std::string& __ice_eventType, const ::omero::sys::LongList& __ice_memberOfGroups, const ::omero::sys::LongList& __ice_leaderOfGroups, const ::omero::model::PermissionsPtr& __ice_groupPermissions) :
        shareId(__ice_shareId),
        sessionId(__ice_sessionId),
        sessionUuid(__ice_sessionUuid),
        userId(__ice_userId),
        userName(__ice_userName),
        groupId(__ice_groupId),
        groupName(__ice_groupName),
        isAdmin(__ice_isAdmin),
        eventId(__ice_eventId),
        eventType(__ice_eventType),
        memberOfGroups(__ice_memberOfGroups),
        leaderOfGroups(__ice_leaderOfGroups),
        groupPermissions(__ice_groupPermissions)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Ice::Long shareId;

    ::Ice::Long sessionId;

    ::std::string sessionUuid;

    ::Ice::Long userId;

    ::std::string userName;

    ::Ice::Long groupId;

    ::std::string groupName;

    bool isAdmin;

    ::Ice::Long eventId;

    ::std::string eventType;

    ::omero::sys::LongList memberOfGroups;

    ::omero::sys::LongList leaderOfGroups;

    ::omero::model::PermissionsPtr groupPermissions;

protected:

    virtual ~EventContext() {}

    friend class EventContext__staticInit;
};

class EventContext__staticInit
{
public:

    ::omero::sys::EventContext _init;
};

static EventContext__staticInit _EventContext_init;

inline bool operator==(const EventContext& l, const EventContext& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const EventContext& l, const EventContext& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Filter : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef FilterPrx ProxyType;
    typedef FilterPtr PointerType;

    Filter()
    {
    }

    Filter(const ::omero::RBoolPtr& __ice_unique, const ::omero::RLongPtr& __ice_ownerId, const ::omero::RLongPtr& __ice_groupId, const ::omero::RIntPtr& __ice_offset, const ::omero::RIntPtr& __ice_limit, const ::omero::RTimePtr& __ice_startTime, const ::omero::RTimePtr& __ice_endTime) :
        unique(__ice_unique),
        ownerId(__ice_ownerId),
        groupId(__ice_groupId),
        offset(__ice_offset),
        limit(__ice_limit),
        startTime(__ice_startTime),
        endTime(__ice_endTime)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::omero::RBoolPtr unique;

    ::omero::RLongPtr ownerId;

    ::omero::RLongPtr groupId;

    ::omero::RIntPtr offset;

    ::omero::RIntPtr limit;

    ::omero::RTimePtr startTime;

    ::omero::RTimePtr endTime;

protected:

    virtual ~Filter() {}
};

inline bool operator==(const Filter& l, const Filter& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Filter& l, const Filter& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Options : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef OptionsPrx ProxyType;
    typedef OptionsPtr PointerType;

    Options()
    {
    }

    Options(const ::omero::RBoolPtr& __ice_leaves, const ::omero::RBoolPtr& __ice_orphan, const ::omero::RBoolPtr& __ice_acquisitionData) :
        leaves(__ice_leaves),
        orphan(__ice_orphan),
        acquisitionData(__ice_acquisitionData)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::omero::RBoolPtr leaves;

    ::omero::RBoolPtr orphan;

    ::omero::RBoolPtr acquisitionData;

protected:

    virtual ~Options() {}
};

inline bool operator==(const Options& l, const Options& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Options& l, const Options& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Parameters : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef ParametersPrx ProxyType;
    typedef ParametersPtr PointerType;

    Parameters()
    {
    }

    Parameters(const ::omero::sys::ParamMap& __ice_map, const ::omero::sys::FilterPtr& __ice_theFilter, const ::omero::sys::OptionsPtr& __ice_theOptions) :
        map(__ice_map),
        theFilter(__ice_theFilter),
        theOptions(__ice_theOptions)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::omero::sys::ParamMap map;

    ::omero::sys::FilterPtr theFilter;

    ::omero::sys::OptionsPtr theOptions;

protected:

    virtual ~Parameters() {}
};

inline bool operator==(const Parameters& l, const Parameters& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Parameters& l, const Parameters& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Principal : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef PrincipalPrx ProxyType;
    typedef PrincipalPtr PointerType;

    Principal()
    {
    }

    Principal(const ::std::string& __ice_name, const ::std::string& __ice_group, const ::std::string& __ice_eventType, const ::omero::model::PermissionsPtr& __ice_umask) :
        name(__ice_name),
        group(__ice_group),
        eventType(__ice_eventType),
        umask(__ice_umask)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string name;

    ::std::string group;

    ::std::string eventType;

    ::omero::model::PermissionsPtr umask;

protected:

    virtual ~Principal() {}
};

inline bool operator==(const Principal& l, const Principal& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Principal& l, const Principal& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Roles : virtual public ::Ice::Object
{
public:

    typedef RolesPrx ProxyType;
    typedef RolesPtr PointerType;

    Roles()
    {
    }

    Roles(::Ice::Long __ice_rootId, const ::std::string& __ice_rootName, ::Ice::Long __ice_systemGroupId, const ::std::string& __ice_systemGroupName, ::Ice::Long __ice_userGroupId, const ::std::string& __ice_userGroupName, ::Ice::Long __ice_guestId, const ::std::string& __ice_guestName, ::Ice::Long __ice_guestGroupId, const ::std::string& __ice_guestGroupName) :
        rootId(__ice_rootId),
        rootName(__ice_rootName),
        systemGroupId(__ice_systemGroupId),
        systemGroupName(__ice_systemGroupName),
        userGroupId(__ice_userGroupId),
        userGroupName(__ice_userGroupName),
        guestId(__ice_guestId),
        guestName(__ice_guestName),
        guestGroupId(__ice_guestGroupId),
        guestGroupName(__ice_guestGroupName)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Ice::Long rootId;

    ::std::string rootName;

    ::Ice::Long systemGroupId;

    ::std::string systemGroupName;

    ::Ice::Long userGroupId;

    ::std::string userGroupName;

    ::Ice::Long guestId;

    ::std::string guestName;

    ::Ice::Long guestGroupId;

    ::std::string guestGroupName;

protected:

    virtual ~Roles() {}
};

inline bool operator==(const Roles& l, const Roles& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Roles& l, const Roles& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace sys
{

}

}

#endif
