// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `FS.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_FS_h__
#define __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_FS_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Ice/BuiltinSequences.h>
#include <omero/ServerErrors.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace grid
{

namespace monitors
{

class MonitorClient;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::monitors::MonitorClient>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::grid::monitors::MonitorClient*);

class FileServer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::monitors::FileServer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::grid::monitors::FileServer*);

class MonitorServer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::monitors::MonitorServer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::grid::monitors::MonitorServer*);

}

}

}

}

namespace omero
{

namespace grid
{

namespace monitors
{

class MonitorClient;
bool operator==(const MonitorClient&, const MonitorClient&);
bool operator<(const MonitorClient&, const MonitorClient&);
::Ice::Object* upCast(::omero::grid::monitors::MonitorClient*);
typedef ::IceInternal::Handle< ::omero::grid::monitors::MonitorClient> MonitorClientPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::monitors::MonitorClient> MonitorClientPrx;
void __patch(MonitorClientPtr&, const ::Ice::ObjectPtr&);

class FileServer;
bool operator==(const FileServer&, const FileServer&);
bool operator<(const FileServer&, const FileServer&);
::Ice::Object* upCast(::omero::grid::monitors::FileServer*);
typedef ::IceInternal::Handle< ::omero::grid::monitors::FileServer> FileServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::monitors::FileServer> FileServerPrx;
void __patch(FileServerPtr&, const ::Ice::ObjectPtr&);

class MonitorServer;
bool operator==(const MonitorServer&, const MonitorServer&);
bool operator<(const MonitorServer&, const MonitorServer&);
::Ice::Object* upCast(::omero::grid::monitors::MonitorServer*);
typedef ::IceInternal::Handle< ::omero::grid::monitors::MonitorServer> MonitorServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::monitors::MonitorServer> MonitorServerPrx;
void __patch(MonitorServerPtr&, const ::Ice::ObjectPtr&);

}

}

}

namespace omero
{

namespace grid
{

namespace monitors
{

enum EventType
{
    Create,
    Modify,
    Delete,
    System
};

struct EventInfo
{
    ::std::string fileId;
    ::omero::grid::monitors::EventType type;

    bool operator==(const EventInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(fileId != __rhs.fileId)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        return true;
    }

    bool operator<(const EventInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(fileId < __rhs.fileId)
        {
            return true;
        }
        else if(__rhs.fileId < fileId)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const EventInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const EventInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const EventInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const EventInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::omero::grid::monitors::EventInfo> EventList;

enum MonitorType
{
    Persistent,
    OneShot,
    Inactivity
};

enum FileType
{
    File,
    Dir,
    Link,
    Mount,
    Unknown
};

enum PathMode
{
    Flat,
    Recurse,
    Follow
};

enum WatchEventType
{
    Creation,
    Modification,
    Deletion,
    All
};

enum MonitorState
{
    Stopped,
    Started
};

struct FileStats
{
    ::std::string baseName;
    ::std::string owner;
    ::Ice::Long size;
    ::Ice::Float mTime;
    ::Ice::Float cTime;
    ::Ice::Float aTime;
    ::omero::grid::monitors::FileType type;
};

typedef ::std::vector< ::omero::grid::monitors::WatchEventType> WatchEventList;

typedef ::std::vector< ::omero::grid::monitors::FileStats> FileStatsList;

}

}

}

namespace Ice
{
template<>
struct StreamableTraits< ::omero::grid::monitors::EventType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::omero::grid::monitors::EventInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::omero::grid::monitors::EventInfo, S>
{
    static void write(S* __os, const ::omero::grid::monitors::EventInfo& v)
    {
        __os->write(v.fileId);
        __os->write(v.type);
    }
};

template<class S>
struct StreamReader< ::omero::grid::monitors::EventInfo, S>
{
    static void read(S* __is, ::omero::grid::monitors::EventInfo& v)
    {
        __is->read(v.fileId);
        __is->read(v.type);
    }
};

template<>
struct StreamableTraits< ::omero::grid::monitors::MonitorType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::omero::grid::monitors::FileType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::omero::grid::monitors::PathMode>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::omero::grid::monitors::WatchEventType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::omero::grid::monitors::MonitorState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::omero::grid::monitors::FileStats>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 23;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::omero::grid::monitors::FileStats, S>
{
    static void write(S* __os, const ::omero::grid::monitors::FileStats& v)
    {
        __os->write(v.baseName);
        __os->write(v.owner);
        __os->write(v.size);
        __os->write(v.mTime);
        __os->write(v.cTime);
        __os->write(v.aTime);
        __os->write(v.type);
    }
};

template<class S>
struct StreamReader< ::omero::grid::monitors::FileStats, S>
{
    static void read(S* __is, ::omero::grid::monitors::FileStats& v)
    {
        __is->read(v.baseName);
        __is->read(v.owner);
        __is->read(v.size);
        __is->read(v.mTime);
        __is->read(v.cTime);
        __is->read(v.aTime);
        __is->read(v.type);
    }
};

}

namespace omero
{

namespace grid
{

namespace monitors
{

class Callback_MonitorClient_fsEventHappened_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorClient_fsEventHappened_Base> Callback_MonitorClient_fsEventHappenedPtr;

class Callback_FileServer_getDirectory_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getDirectory_Base> Callback_FileServer_getDirectoryPtr;

class Callback_FileServer_getBulkDirectory_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getBulkDirectory_Base> Callback_FileServer_getBulkDirectoryPtr;

class Callback_FileServer_fileExists_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_fileExists_Base> Callback_FileServer_fileExistsPtr;

class Callback_FileServer_getBaseName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getBaseName_Base> Callback_FileServer_getBaseNamePtr;

class Callback_FileServer_getStats_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getStats_Base> Callback_FileServer_getStatsPtr;

class Callback_FileServer_getSize_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getSize_Base> Callback_FileServer_getSizePtr;

class Callback_FileServer_getOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getOwner_Base> Callback_FileServer_getOwnerPtr;

class Callback_FileServer_getCTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getCTime_Base> Callback_FileServer_getCTimePtr;

class Callback_FileServer_getMTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getMTime_Base> Callback_FileServer_getMTimePtr;

class Callback_FileServer_getATime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getATime_Base> Callback_FileServer_getATimePtr;

class Callback_FileServer_isDir_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_isDir_Base> Callback_FileServer_isDirPtr;

class Callback_FileServer_isFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_isFile_Base> Callback_FileServer_isFilePtr;

class Callback_FileServer_getSHA1_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getSHA1_Base> Callback_FileServer_getSHA1Ptr;

class Callback_FileServer_readBlock_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_readBlock_Base> Callback_FileServer_readBlockPtr;

class Callback_MonitorServer_createMonitor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorServer_createMonitor_Base> Callback_MonitorServer_createMonitorPtr;

class Callback_MonitorServer_startMonitor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorServer_startMonitor_Base> Callback_MonitorServer_startMonitorPtr;

class Callback_MonitorServer_stopMonitor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorServer_stopMonitor_Base> Callback_MonitorServer_stopMonitorPtr;

class Callback_MonitorServer_destroyMonitor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorServer_destroyMonitor_Base> Callback_MonitorServer_destroyMonitorPtr;

class Callback_MonitorServer_getMonitorState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorServer_getMonitorState_Base> Callback_MonitorServer_getMonitorStatePtr;

}

}

}

namespace IceProxy
{

namespace omero
{

namespace grid
{

namespace monitors
{

class MonitorClient : virtual public ::IceProxy::Ice::Object
{
public:

    void fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el)
    {
        fsEventHappened(id, el, 0);
    }
    void fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el, const ::Ice::Context& __ctx)
    {
        fsEventHappened(id, el, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fsEventHappened(id, el, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fsEventHappened(id, el, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fsEventHappened(id, el, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fsEventHappened(id, el, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::MonitorClientPrx __proxy = ::omero::grid::monitors::MonitorClientPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_fsEventHappened(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_fsEventHappened(id, el, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el)
    {
        return begin_fsEventHappened(id, el, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el, const ::Ice::Context& __ctx)
    {
        return begin_fsEventHappened(id, el, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fsEventHappened(id, el, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fsEventHappened(id, el, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el, const ::omero::grid::monitors::Callback_MonitorClient_fsEventHappenedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fsEventHappened(id, el, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fsEventHappened(const ::std::string& id, const ::omero::grid::monitors::EventList& el, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_MonitorClient_fsEventHappenedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fsEventHappened(id, el, &__ctx, __del, __cookie);
    }

    void end_fsEventHappened(const ::Ice::AsyncResultPtr&);
    
private:

    void fsEventHappened(const ::std::string&, const ::omero::grid::monitors::EventList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fsEventHappened(const ::std::string&, const ::omero::grid::monitors::EventList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_secure(bool __secure) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_twoway() const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_oneway() const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_batchOneway() const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_datagram() const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_batchDatagram() const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_compress(bool __compress) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorClient> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MonitorClient*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FileServer : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::StringSeq getDirectory(const ::std::string& absPath, const ::std::string& filter)
    {
        return getDirectory(absPath, filter, 0);
    }
    ::Ice::StringSeq getDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx)
    {
        return getDirectory(absPath, filter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDirectory(const ::std::string& absPath, const ::std::string& filter, const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDirectory(absPath, filter, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDirectory(const ::std::string& absPath, const ::std::string& filter, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDirectory(absPath, filter, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDirectory(absPath, filter, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDirectory(absPath, filter, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::StringSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                ::Ice::StringSeq __ret;
                try
                {
                    __ret = __proxy->end_getDirectory(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::StringSeq&)> _response;
        };
        return begin_getDirectory(absPath, filter, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDirectory(const ::std::string& absPath, const ::std::string& filter)
    {
        return begin_getDirectory(absPath, filter, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx)
    {
        return begin_getDirectory(absPath, filter, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDirectory(absPath, filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDirectory(absPath, filter, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDirectory(const ::std::string& absPath, const ::std::string& filter, const ::omero::grid::monitors::Callback_FileServer_getDirectoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDirectory(absPath, filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_getDirectoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDirectory(absPath, filter, &__ctx, __del, __cookie);
    }

    ::Ice::StringSeq end_getDirectory(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::StringSeq getDirectory(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDirectory(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::grid::monitors::FileStatsList getBulkDirectory(const ::std::string& absPath, const ::std::string& filter)
    {
        return getBulkDirectory(absPath, filter, 0);
    }
    ::omero::grid::monitors::FileStatsList getBulkDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx)
    {
        return getBulkDirectory(absPath, filter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBulkDirectory(const ::std::string& absPath, const ::std::string& filter, const ::IceInternal::Function<void (const ::omero::grid::monitors::FileStatsList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBulkDirectory(absPath, filter, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBulkDirectory(const ::std::string& absPath, const ::std::string& filter, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBulkDirectory(absPath, filter, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBulkDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::grid::monitors::FileStatsList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBulkDirectory(absPath, filter, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBulkDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBulkDirectory(absPath, filter, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBulkDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::grid::monitors::FileStatsList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::grid::monitors::FileStatsList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                ::omero::grid::monitors::FileStatsList __ret;
                try
                {
                    __ret = __proxy->end_getBulkDirectory(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::grid::monitors::FileStatsList&)> _response;
        };
        return begin_getBulkDirectory(absPath, filter, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBulkDirectory(const ::std::string& absPath, const ::std::string& filter)
    {
        return begin_getBulkDirectory(absPath, filter, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBulkDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx)
    {
        return begin_getBulkDirectory(absPath, filter, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBulkDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBulkDirectory(absPath, filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBulkDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBulkDirectory(absPath, filter, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBulkDirectory(const ::std::string& absPath, const ::std::string& filter, const ::omero::grid::monitors::Callback_FileServer_getBulkDirectoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBulkDirectory(absPath, filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBulkDirectory(const ::std::string& absPath, const ::std::string& filter, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_getBulkDirectoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBulkDirectory(absPath, filter, &__ctx, __del, __cookie);
    }

    ::omero::grid::monitors::FileStatsList end_getBulkDirectory(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::grid::monitors::FileStatsList getBulkDirectory(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBulkDirectory(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool fileExists(const ::std::string& fileId)
    {
        return fileExists(fileId, 0);
    }
    bool fileExists(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return fileExists(fileId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_fileExists(const ::std::string& fileId, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fileExists(fileId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fileExists(const ::std::string& fileId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fileExists(fileId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_fileExists(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fileExists(fileId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fileExists(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fileExists(fileId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_fileExists(const ::std::string& fileId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_fileExists(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_fileExists(fileId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_fileExists(const ::std::string& fileId)
    {
        return begin_fileExists(fileId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fileExists(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return begin_fileExists(fileId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fileExists(const ::std::string& fileId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fileExists(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fileExists(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fileExists(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fileExists(const ::std::string& fileId, const ::omero::grid::monitors::Callback_FileServer_fileExistsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fileExists(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fileExists(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_fileExistsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fileExists(fileId, &__ctx, __del, __cookie);
    }

    bool end_fileExists(const ::Ice::AsyncResultPtr&);
    
private:

    bool fileExists(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fileExists(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getBaseName(const ::std::string& fileId)
    {
        return getBaseName(fileId, 0);
    }
    ::std::string getBaseName(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return getBaseName(fileId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBaseName(const ::std::string& fileId, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBaseName(fileId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBaseName(const ::std::string& fileId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBaseName(fileId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBaseName(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBaseName(fileId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBaseName(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBaseName(fileId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBaseName(const ::std::string& fileId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getBaseName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getBaseName(fileId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBaseName(const ::std::string& fileId)
    {
        return begin_getBaseName(fileId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBaseName(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return begin_getBaseName(fileId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBaseName(const ::std::string& fileId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseName(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseName(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseName(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseName(const ::std::string& fileId, const ::omero::grid::monitors::Callback_FileServer_getBaseNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseName(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseName(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_getBaseNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseName(fileId, &__ctx, __del, __cookie);
    }

    ::std::string end_getBaseName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getBaseName(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBaseName(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::grid::monitors::FileStats getStats(const ::std::string& fileId)
    {
        return getStats(fileId, 0);
    }
    ::omero::grid::monitors::FileStats getStats(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return getStats(fileId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStats(const ::std::string& fileId, const ::IceInternal::Function<void (const ::omero::grid::monitors::FileStats&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStats(fileId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStats(const ::std::string& fileId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStats(fileId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStats(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::grid::monitors::FileStats&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStats(fileId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStats(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStats(fileId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStats(const ::std::string& fileId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::grid::monitors::FileStats&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::grid::monitors::FileStats&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                ::omero::grid::monitors::FileStats __ret;
                try
                {
                    __ret = __proxy->end_getStats(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::grid::monitors::FileStats&)> _response;
        };
        return begin_getStats(fileId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStats(const ::std::string& fileId)
    {
        return begin_getStats(fileId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStats(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return begin_getStats(fileId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStats(const ::std::string& fileId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStats(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStats(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStats(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStats(const ::std::string& fileId, const ::omero::grid::monitors::Callback_FileServer_getStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStats(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStats(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_getStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStats(fileId, &__ctx, __del, __cookie);
    }

    ::omero::grid::monitors::FileStats end_getStats(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::grid::monitors::FileStats getStats(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStats(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long getSize(const ::std::string& fileId)
    {
        return getSize(fileId, 0);
    }
    ::Ice::Long getSize(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return getSize(fileId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSize(const ::std::string& fileId, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSize(fileId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSize(const ::std::string& fileId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSize(fileId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSize(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSize(fileId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSize(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSize(fileId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSize(const ::std::string& fileId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_getSize(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_getSize(fileId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSize(const ::std::string& fileId)
    {
        return begin_getSize(fileId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return begin_getSize(fileId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::std::string& fileId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::std::string& fileId, const ::omero::grid::monitors::Callback_FileServer_getSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_getSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_getSize(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long getSize(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSize(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getOwner(const ::std::string& fileId)
    {
        return getOwner(fileId, 0);
    }
    ::std::string getOwner(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return getOwner(fileId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOwner(const ::std::string& fileId, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOwner(fileId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOwner(const ::std::string& fileId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOwner(fileId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOwner(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOwner(fileId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOwner(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOwner(fileId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOwner(const ::std::string& fileId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getOwner(fileId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOwner(const ::std::string& fileId)
    {
        return begin_getOwner(fileId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOwner(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return begin_getOwner(fileId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOwner(const ::std::string& fileId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwner(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOwner(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwner(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOwner(const ::std::string& fileId, const ::omero::grid::monitors::Callback_FileServer_getOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwner(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOwner(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_getOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwner(fileId, &__ctx, __del, __cookie);
    }

    ::std::string end_getOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getOwner(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOwner(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Float getCTime(const ::std::string& fileId)
    {
        return getCTime(fileId, 0);
    }
    ::Ice::Float getCTime(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return getCTime(fileId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCTime(const ::std::string& fileId, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCTime(fileId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCTime(const ::std::string& fileId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCTime(fileId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCTime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCTime(fileId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCTime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCTime(fileId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCTime(const ::std::string& fileId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Float)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                ::Ice::Float __ret;
                try
                {
                    __ret = __proxy->end_getCTime(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Float)> _response;
        };
        return begin_getCTime(fileId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCTime(const ::std::string& fileId)
    {
        return begin_getCTime(fileId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCTime(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return begin_getCTime(fileId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCTime(const ::std::string& fileId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCTime(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCTime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCTime(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCTime(const ::std::string& fileId, const ::omero::grid::monitors::Callback_FileServer_getCTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCTime(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCTime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_getCTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCTime(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::Float end_getCTime(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Float getCTime(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCTime(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Float getMTime(const ::std::string& fileId)
    {
        return getMTime(fileId, 0);
    }
    ::Ice::Float getMTime(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return getMTime(fileId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMTime(const ::std::string& fileId, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMTime(fileId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMTime(const ::std::string& fileId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMTime(fileId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMTime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMTime(fileId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMTime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMTime(fileId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMTime(const ::std::string& fileId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Float)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                ::Ice::Float __ret;
                try
                {
                    __ret = __proxy->end_getMTime(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Float)> _response;
        };
        return begin_getMTime(fileId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMTime(const ::std::string& fileId)
    {
        return begin_getMTime(fileId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMTime(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return begin_getMTime(fileId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMTime(const ::std::string& fileId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMTime(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMTime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMTime(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMTime(const ::std::string& fileId, const ::omero::grid::monitors::Callback_FileServer_getMTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMTime(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMTime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_getMTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMTime(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::Float end_getMTime(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Float getMTime(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMTime(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Float getATime(const ::std::string& fileId)
    {
        return getATime(fileId, 0);
    }
    ::Ice::Float getATime(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return getATime(fileId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getATime(const ::std::string& fileId, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getATime(fileId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getATime(const ::std::string& fileId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getATime(fileId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getATime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getATime(fileId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getATime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getATime(fileId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getATime(const ::std::string& fileId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Float)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                ::Ice::Float __ret;
                try
                {
                    __ret = __proxy->end_getATime(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Float)> _response;
        };
        return begin_getATime(fileId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getATime(const ::std::string& fileId)
    {
        return begin_getATime(fileId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getATime(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return begin_getATime(fileId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getATime(const ::std::string& fileId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getATime(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getATime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getATime(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getATime(const ::std::string& fileId, const ::omero::grid::monitors::Callback_FileServer_getATimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getATime(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getATime(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_getATimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getATime(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::Float end_getATime(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Float getATime(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getATime(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isDir(const ::std::string& fileId)
    {
        return isDir(fileId, 0);
    }
    bool isDir(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return isDir(fileId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isDir(const ::std::string& fileId, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isDir(fileId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isDir(const ::std::string& fileId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isDir(fileId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isDir(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isDir(fileId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isDir(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isDir(fileId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isDir(const ::std::string& fileId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isDir(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isDir(fileId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isDir(const ::std::string& fileId)
    {
        return begin_isDir(fileId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isDir(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return begin_isDir(fileId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isDir(const ::std::string& fileId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isDir(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isDir(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isDir(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isDir(const ::std::string& fileId, const ::omero::grid::monitors::Callback_FileServer_isDirPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isDir(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isDir(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_isDirPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isDir(fileId, &__ctx, __del, __cookie);
    }

    bool end_isDir(const ::Ice::AsyncResultPtr&);
    
private:

    bool isDir(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isDir(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isFile(const ::std::string& fileId)
    {
        return isFile(fileId, 0);
    }
    bool isFile(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return isFile(fileId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isFile(const ::std::string& fileId, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isFile(fileId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isFile(const ::std::string& fileId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isFile(fileId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isFile(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isFile(fileId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isFile(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isFile(fileId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isFile(const ::std::string& fileId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isFile(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isFile(fileId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isFile(const ::std::string& fileId)
    {
        return begin_isFile(fileId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isFile(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return begin_isFile(fileId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isFile(const ::std::string& fileId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isFile(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isFile(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isFile(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isFile(const ::std::string& fileId, const ::omero::grid::monitors::Callback_FileServer_isFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isFile(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isFile(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_isFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isFile(fileId, &__ctx, __del, __cookie);
    }

    bool end_isFile(const ::Ice::AsyncResultPtr&);
    
private:

    bool isFile(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isFile(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getSHA1(const ::std::string& fileId)
    {
        return getSHA1(fileId, 0);
    }
    ::std::string getSHA1(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return getSHA1(fileId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSHA1(const ::std::string& fileId, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSHA1(fileId, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSHA1(const ::std::string& fileId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSHA1(fileId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSHA1(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSHA1(fileId, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSHA1(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSHA1(fileId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSHA1(const ::std::string& fileId, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getSHA1(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getSHA1(fileId, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSHA1(const ::std::string& fileId)
    {
        return begin_getSHA1(fileId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSHA1(const ::std::string& fileId, const ::Ice::Context& __ctx)
    {
        return begin_getSHA1(fileId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSHA1(const ::std::string& fileId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSHA1(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSHA1(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSHA1(fileId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSHA1(const ::std::string& fileId, const ::omero::grid::monitors::Callback_FileServer_getSHA1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSHA1(fileId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSHA1(const ::std::string& fileId, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_getSHA1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSHA1(fileId, &__ctx, __del, __cookie);
    }

    ::std::string end_getSHA1(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getSHA1(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSHA1(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::ByteSeq readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size)
    {
        return readBlock(fileId, offset, size, 0);
    }
    ::Ice::ByteSeq readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size, const ::Ice::Context& __ctx)
    {
        return readBlock(fileId, offset, size, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_readBlock(fileId, offset, size, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readBlock(fileId, offset, size, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_readBlock(fileId, offset, size, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readBlock(fileId, offset, size, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
                ::Ice::ByteSeq __ret;
                try
                {
                    __ret = __proxy->end_readBlock(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::ByteSeq&)> _response;
        };
        return begin_readBlock(fileId, offset, size, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size)
    {
        return begin_readBlock(fileId, offset, size, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size, const ::Ice::Context& __ctx)
    {
        return begin_readBlock(fileId, offset, size, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readBlock(fileId, offset, size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readBlock(fileId, offset, size, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size, const ::omero::grid::monitors::Callback_FileServer_readBlockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readBlock(fileId, offset, size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readBlock(const ::std::string& fileId, ::Ice::Long offset, ::Ice::Int size, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_FileServer_readBlockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readBlock(fileId, offset, size, &__ctx, __del, __cookie);
    }

    ::Ice::ByteSeq end_readBlock(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ByteSeq readBlock(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readBlock(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FileServer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_secure(bool __secure) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_twoway() const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_oneway() const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_batchOneway() const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_datagram() const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_batchDatagram() const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_compress(bool __compress) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MonitorServer : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy)
    {
        return createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, 0);
    }
    ::std::string createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy, const ::Ice::Context& __ctx)
    {
        return createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_createMonitor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy)
    {
        return begin_createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy, const ::Ice::Context& __ctx)
    {
        return begin_createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy, const ::omero::grid::monitors::Callback_MonitorServer_createMonitorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createMonitor(::omero::grid::monitors::MonitorType mType, const ::omero::grid::monitors::WatchEventList& eTypes, ::omero::grid::monitors::PathMode pMode, const ::std::string& pathString, const ::Ice::StringSeq& whitelist, const ::Ice::StringSeq& blacklist, ::Ice::Float timeout, ::Ice::Int blockSize, bool ignoreSysFiles, bool ignoreDirEvents, const ::omero::grid::monitors::MonitorClientPrx& proxy, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_MonitorServer_createMonitorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createMonitor(mType, eTypes, pMode, pathString, whitelist, blacklist, timeout, blockSize, ignoreSysFiles, ignoreDirEvents, proxy, &__ctx, __del, __cookie);
    }

    ::std::string end_createMonitor(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string createMonitor(::omero::grid::monitors::MonitorType, const ::omero::grid::monitors::WatchEventList&, ::omero::grid::monitors::PathMode, const ::std::string&, const ::Ice::StringSeq&, const ::Ice::StringSeq&, ::Ice::Float, ::Ice::Int, bool, bool, const ::omero::grid::monitors::MonitorClientPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createMonitor(::omero::grid::monitors::MonitorType, const ::omero::grid::monitors::WatchEventList&, ::omero::grid::monitors::PathMode, const ::std::string&, const ::Ice::StringSeq&, const ::Ice::StringSeq&, ::Ice::Float, ::Ice::Int, bool, bool, const ::omero::grid::monitors::MonitorClientPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void startMonitor(const ::std::string& id)
    {
        startMonitor(id, 0);
    }
    void startMonitor(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        startMonitor(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_startMonitor(const ::std::string& id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_startMonitor(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_startMonitor(const ::std::string& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_startMonitor(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_startMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_startMonitor(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_startMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_startMonitor(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_startMonitor(const ::std::string& id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_startMonitor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_startMonitor(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_startMonitor(const ::std::string& id)
    {
        return begin_startMonitor(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startMonitor(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return begin_startMonitor(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startMonitor(const ::std::string& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startMonitor(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startMonitor(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startMonitor(const ::std::string& id, const ::omero::grid::monitors::Callback_MonitorServer_startMonitorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startMonitor(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_MonitorServer_startMonitorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startMonitor(id, &__ctx, __del, __cookie);
    }

    void end_startMonitor(const ::Ice::AsyncResultPtr&);
    
private:

    void startMonitor(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_startMonitor(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stopMonitor(const ::std::string& id)
    {
        stopMonitor(id, 0);
    }
    void stopMonitor(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        stopMonitor(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stopMonitor(const ::std::string& id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stopMonitor(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stopMonitor(const ::std::string& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopMonitor(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stopMonitor(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stopMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopMonitor(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_stopMonitor(const ::std::string& id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_stopMonitor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_stopMonitor(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_stopMonitor(const ::std::string& id)
    {
        return begin_stopMonitor(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopMonitor(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return begin_stopMonitor(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopMonitor(const ::std::string& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopMonitor(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopMonitor(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopMonitor(const ::std::string& id, const ::omero::grid::monitors::Callback_MonitorServer_stopMonitorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopMonitor(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_MonitorServer_stopMonitorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopMonitor(id, &__ctx, __del, __cookie);
    }

    void end_stopMonitor(const ::Ice::AsyncResultPtr&);
    
private:

    void stopMonitor(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stopMonitor(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroyMonitor(const ::std::string& id)
    {
        destroyMonitor(id, 0);
    }
    void destroyMonitor(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        destroyMonitor(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroyMonitor(const ::std::string& id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_destroyMonitor(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_destroyMonitor(const ::std::string& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroyMonitor(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroyMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_destroyMonitor(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_destroyMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroyMonitor(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_destroyMonitor(const ::std::string& id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_destroyMonitor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_destroyMonitor(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_destroyMonitor(const ::std::string& id)
    {
        return begin_destroyMonitor(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroyMonitor(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return begin_destroyMonitor(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroyMonitor(const ::std::string& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyMonitor(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyMonitor(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyMonitor(const ::std::string& id, const ::omero::grid::monitors::Callback_MonitorServer_destroyMonitorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyMonitor(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyMonitor(const ::std::string& id, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_MonitorServer_destroyMonitorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyMonitor(id, &__ctx, __del, __cookie);
    }

    void end_destroyMonitor(const ::Ice::AsyncResultPtr&);
    
private:

    void destroyMonitor(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroyMonitor(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::grid::monitors::MonitorState getMonitorState(const ::std::string& id)
    {
        return getMonitorState(id, 0);
    }
    ::omero::grid::monitors::MonitorState getMonitorState(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return getMonitorState(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMonitorState(const ::std::string& id, const ::IceInternal::Function<void (::omero::grid::monitors::MonitorState)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMonitorState(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMonitorState(const ::std::string& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMonitorState(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMonitorState(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::omero::grid::monitors::MonitorState)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMonitorState(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMonitorState(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMonitorState(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMonitorState(const ::std::string& id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::omero::grid::monitors::MonitorState)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::omero::grid::monitors::MonitorState)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
                ::omero::grid::monitors::MonitorState __ret;
                try
                {
                    __ret = __proxy->end_getMonitorState(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::omero::grid::monitors::MonitorState)> _response;
        };
        return begin_getMonitorState(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMonitorState(const ::std::string& id)
    {
        return begin_getMonitorState(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMonitorState(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return begin_getMonitorState(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMonitorState(const ::std::string& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMonitorState(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMonitorState(const ::std::string& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMonitorState(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMonitorState(const ::std::string& id, const ::omero::grid::monitors::Callback_MonitorServer_getMonitorStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMonitorState(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMonitorState(const ::std::string& id, const ::Ice::Context& __ctx, const ::omero::grid::monitors::Callback_MonitorServer_getMonitorStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMonitorState(id, &__ctx, __del, __cookie);
    }

    ::omero::grid::monitors::MonitorState end_getMonitorState(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::grid::monitors::MonitorState getMonitorState(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMonitorState(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_secure(bool __secure) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_twoway() const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_oneway() const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_batchOneway() const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_datagram() const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_batchDatagram() const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_compress(bool __compress) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorServer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MonitorServer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace grid
{

namespace monitors
{

class MonitorClient : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void fsEventHappened(const ::std::string&, const ::omero::grid::monitors::EventList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class FileServer : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::StringSeq getDirectory(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::grid::monitors::FileStatsList getBulkDirectory(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool fileExists(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getBaseName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::grid::monitors::FileStats getStats(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long getSize(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getOwner(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Float getCTime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Float getMTime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Float getATime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isDir(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isFile(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getSHA1(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::ByteSeq readBlock(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class MonitorServer : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::string createMonitor(::omero::grid::monitors::MonitorType, const ::omero::grid::monitors::WatchEventList&, ::omero::grid::monitors::PathMode, const ::std::string&, const ::Ice::StringSeq&, const ::Ice::StringSeq&, ::Ice::Float, ::Ice::Int, bool, bool, const ::omero::grid::monitors::MonitorClientPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void startMonitor(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void stopMonitor(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroyMonitor(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::grid::monitors::MonitorState getMonitorState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace grid
{

namespace monitors
{

class MonitorClient : virtual public ::IceDelegate::omero::grid::monitors::MonitorClient,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void fsEventHappened(const ::std::string&, const ::omero::grid::monitors::EventList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FileServer : virtual public ::IceDelegate::omero::grid::monitors::FileServer,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::StringSeq getDirectory(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::monitors::FileStatsList getBulkDirectory(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool fileExists(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getBaseName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::monitors::FileStats getStats(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long getSize(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getOwner(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float getCTime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float getMTime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float getATime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isDir(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isFile(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getSHA1(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ByteSeq readBlock(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class MonitorServer : virtual public ::IceDelegate::omero::grid::monitors::MonitorServer,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::string createMonitor(::omero::grid::monitors::MonitorType, const ::omero::grid::monitors::WatchEventList&, ::omero::grid::monitors::PathMode, const ::std::string&, const ::Ice::StringSeq&, const ::Ice::StringSeq&, ::Ice::Float, ::Ice::Int, bool, bool, const ::omero::grid::monitors::MonitorClientPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void startMonitor(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stopMonitor(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroyMonitor(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::monitors::MonitorState getMonitorState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace grid
{

namespace monitors
{

class MonitorClient : virtual public ::IceDelegate::omero::grid::monitors::MonitorClient,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void fsEventHappened(const ::std::string&, const ::omero::grid::monitors::EventList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FileServer : virtual public ::IceDelegate::omero::grid::monitors::FileServer,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::StringSeq getDirectory(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::monitors::FileStatsList getBulkDirectory(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool fileExists(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getBaseName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::monitors::FileStats getStats(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long getSize(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getOwner(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float getCTime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float getMTime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float getATime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isDir(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isFile(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getSHA1(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ByteSeq readBlock(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class MonitorServer : virtual public ::IceDelegate::omero::grid::monitors::MonitorServer,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::string createMonitor(::omero::grid::monitors::MonitorType, const ::omero::grid::monitors::WatchEventList&, ::omero::grid::monitors::PathMode, const ::std::string&, const ::Ice::StringSeq&, const ::Ice::StringSeq&, ::Ice::Float, ::Ice::Int, bool, bool, const ::omero::grid::monitors::MonitorClientPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void startMonitor(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stopMonitor(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroyMonitor(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::grid::monitors::MonitorState getMonitorState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

}

namespace omero
{

namespace grid
{

namespace monitors
{

class MonitorClient : virtual public ::Ice::Object
{
public:

    typedef MonitorClientPrx ProxyType;
    typedef MonitorClientPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void fsEventHappened(const ::std::string&, const ::omero::grid::monitors::EventList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fsEventHappened(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const MonitorClient& l, const MonitorClient& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MonitorClient& l, const MonitorClient& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FileServer : virtual public ::Ice::Object
{
public:

    typedef FileServerPrx ProxyType;
    typedef FileServerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::StringSeq getDirectory(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDirectory(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::grid::monitors::FileStatsList getBulkDirectory(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBulkDirectory(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool fileExists(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fileExists(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getBaseName(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBaseName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::grid::monitors::FileStats getStats(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStats(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long getSize(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSize(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getOwner(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Float getCTime(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Float getMTime(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Float getATime(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getATime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isDir(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isDir(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isFile(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getSHA1(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSHA1(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::ByteSeq readBlock(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readBlock(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const FileServer& l, const FileServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FileServer& l, const FileServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MonitorServer : virtual public ::Ice::Object
{
public:

    typedef MonitorServerPrx ProxyType;
    typedef MonitorServerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string createMonitor(::omero::grid::monitors::MonitorType, const ::omero::grid::monitors::WatchEventList&, ::omero::grid::monitors::PathMode, const ::std::string&, const ::Ice::StringSeq&, const ::Ice::StringSeq&, ::Ice::Float, ::Ice::Int, bool, bool, const ::omero::grid::monitors::MonitorClientPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createMonitor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void startMonitor(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___startMonitor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopMonitor(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stopMonitor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroyMonitor(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroyMonitor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::grid::monitors::MonitorState getMonitorState(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMonitorState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const MonitorServer& l, const MonitorServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MonitorServer& l, const MonitorServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

}

namespace omero
{

namespace grid
{

namespace monitors
{

template<class T>
class CallbackNC_MonitorClient_fsEventHappened : public Callback_MonitorClient_fsEventHappened_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MonitorClient_fsEventHappened(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorClientPrx __proxy = ::omero::grid::monitors::MonitorClientPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_fsEventHappened(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_MonitorClient_fsEventHappenedPtr
newCallback_MonitorClient_fsEventHappened(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorClient_fsEventHappened<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorClient_fsEventHappenedPtr
newCallback_MonitorClient_fsEventHappened(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorClient_fsEventHappened<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MonitorClient_fsEventHappenedPtr
newCallback_MonitorClient_fsEventHappened(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorClient_fsEventHappened<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorClient_fsEventHappenedPtr
newCallback_MonitorClient_fsEventHappened(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorClient_fsEventHappened<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorClient_fsEventHappened : public Callback_MonitorClient_fsEventHappened_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MonitorClient_fsEventHappened(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorClientPrx __proxy = ::omero::grid::monitors::MonitorClientPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_fsEventHappened(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MonitorClient_fsEventHappenedPtr
newCallback_MonitorClient_fsEventHappened(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorClient_fsEventHappened<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorClient_fsEventHappenedPtr
newCallback_MonitorClient_fsEventHappened(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorClient_fsEventHappened<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorClient_fsEventHappenedPtr
newCallback_MonitorClient_fsEventHappened(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorClient_fsEventHappened<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorClient_fsEventHappenedPtr
newCallback_MonitorClient_fsEventHappened(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorClient_fsEventHappened<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getDirectory : public Callback_FileServer_getDirectory_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::StringSeq&);

    CallbackNC_FileServer_getDirectory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq __ret;
        try
        {
            __ret = __proxy->end_getDirectory(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_getDirectoryPtr
newCallback_FileServer_getDirectory(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getDirectory<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getDirectoryPtr
newCallback_FileServer_getDirectory(T* instance, void (T::*cb)(const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getDirectory<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getDirectory : public Callback_FileServer_getDirectory_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::StringSeq&, const CT&);

    Callback_FileServer_getDirectory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq __ret;
        try
        {
            __ret = __proxy->end_getDirectory(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_getDirectoryPtr
newCallback_FileServer_getDirectory(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getDirectory<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getDirectoryPtr
newCallback_FileServer_getDirectory(T* instance, void (T::*cb)(const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getDirectory<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getBulkDirectory : public Callback_FileServer_getBulkDirectory_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::grid::monitors::FileStatsList&);

    CallbackNC_FileServer_getBulkDirectory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::monitors::FileStatsList __ret;
        try
        {
            __ret = __proxy->end_getBulkDirectory(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_getBulkDirectoryPtr
newCallback_FileServer_getBulkDirectory(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::monitors::FileStatsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getBulkDirectory<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getBulkDirectoryPtr
newCallback_FileServer_getBulkDirectory(T* instance, void (T::*cb)(const ::omero::grid::monitors::FileStatsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getBulkDirectory<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getBulkDirectory : public Callback_FileServer_getBulkDirectory_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::grid::monitors::FileStatsList&, const CT&);

    Callback_FileServer_getBulkDirectory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::monitors::FileStatsList __ret;
        try
        {
            __ret = __proxy->end_getBulkDirectory(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_getBulkDirectoryPtr
newCallback_FileServer_getBulkDirectory(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::monitors::FileStatsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getBulkDirectory<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getBulkDirectoryPtr
newCallback_FileServer_getBulkDirectory(T* instance, void (T::*cb)(const ::omero::grid::monitors::FileStatsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getBulkDirectory<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_fileExists : public Callback_FileServer_fileExists_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_FileServer_fileExists(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_fileExists(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_fileExistsPtr
newCallback_FileServer_fileExists(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_fileExists<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_fileExistsPtr
newCallback_FileServer_fileExists(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_fileExists<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_fileExists : public Callback_FileServer_fileExists_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_FileServer_fileExists(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_fileExists(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_fileExistsPtr
newCallback_FileServer_fileExists(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_fileExists<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_fileExistsPtr
newCallback_FileServer_fileExists(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_fileExists<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getBaseName : public Callback_FileServer_getBaseName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_FileServer_getBaseName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getBaseName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_getBaseNamePtr
newCallback_FileServer_getBaseName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getBaseName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getBaseNamePtr
newCallback_FileServer_getBaseName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getBaseName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getBaseName : public Callback_FileServer_getBaseName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_FileServer_getBaseName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getBaseName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_getBaseNamePtr
newCallback_FileServer_getBaseName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getBaseName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getBaseNamePtr
newCallback_FileServer_getBaseName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getBaseName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getStats : public Callback_FileServer_getStats_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::grid::monitors::FileStats&);

    CallbackNC_FileServer_getStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::monitors::FileStats __ret;
        try
        {
            __ret = __proxy->end_getStats(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_getStatsPtr
newCallback_FileServer_getStats(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::monitors::FileStats&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getStats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getStatsPtr
newCallback_FileServer_getStats(T* instance, void (T::*cb)(const ::omero::grid::monitors::FileStats&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getStats<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getStats : public Callback_FileServer_getStats_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::grid::monitors::FileStats&, const CT&);

    Callback_FileServer_getStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::monitors::FileStats __ret;
        try
        {
            __ret = __proxy->end_getStats(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_getStatsPtr
newCallback_FileServer_getStats(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::grid::monitors::FileStats&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getStatsPtr
newCallback_FileServer_getStats(T* instance, void (T::*cb)(const ::omero::grid::monitors::FileStats&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getSize : public Callback_FileServer_getSize_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_FileServer_getSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getSize(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_getSizePtr
newCallback_FileServer_getSize(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getSizePtr
newCallback_FileServer_getSize(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getSize<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getSize : public Callback_FileServer_getSize_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_FileServer_getSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getSize(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_getSizePtr
newCallback_FileServer_getSize(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getSizePtr
newCallback_FileServer_getSize(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getOwner : public Callback_FileServer_getOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_FileServer_getOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_getOwnerPtr
newCallback_FileServer_getOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getOwnerPtr
newCallback_FileServer_getOwner(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getOwner : public Callback_FileServer_getOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_FileServer_getOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_getOwnerPtr
newCallback_FileServer_getOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getOwnerPtr
newCallback_FileServer_getOwner(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getCTime : public Callback_FileServer_getCTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_FileServer_getCTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getCTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_getCTimePtr
newCallback_FileServer_getCTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getCTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getCTimePtr
newCallback_FileServer_getCTime(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getCTime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getCTime : public Callback_FileServer_getCTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_FileServer_getCTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getCTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_getCTimePtr
newCallback_FileServer_getCTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getCTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getCTimePtr
newCallback_FileServer_getCTime(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getCTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getMTime : public Callback_FileServer_getMTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_FileServer_getMTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getMTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_getMTimePtr
newCallback_FileServer_getMTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getMTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getMTimePtr
newCallback_FileServer_getMTime(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getMTime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getMTime : public Callback_FileServer_getMTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_FileServer_getMTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getMTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_getMTimePtr
newCallback_FileServer_getMTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getMTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getMTimePtr
newCallback_FileServer_getMTime(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getMTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getATime : public Callback_FileServer_getATime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_FileServer_getATime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getATime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_getATimePtr
newCallback_FileServer_getATime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getATime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getATimePtr
newCallback_FileServer_getATime(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getATime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getATime : public Callback_FileServer_getATime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_FileServer_getATime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getATime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_getATimePtr
newCallback_FileServer_getATime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getATime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getATimePtr
newCallback_FileServer_getATime(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getATime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_isDir : public Callback_FileServer_isDir_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_FileServer_isDir(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isDir(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_isDirPtr
newCallback_FileServer_isDir(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_isDir<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_isDirPtr
newCallback_FileServer_isDir(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_isDir<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_isDir : public Callback_FileServer_isDir_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_FileServer_isDir(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isDir(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_isDirPtr
newCallback_FileServer_isDir(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_isDir<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_isDirPtr
newCallback_FileServer_isDir(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_isDir<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_isFile : public Callback_FileServer_isFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_FileServer_isFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_isFilePtr
newCallback_FileServer_isFile(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_isFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_isFilePtr
newCallback_FileServer_isFile(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_isFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_isFile : public Callback_FileServer_isFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_FileServer_isFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_isFilePtr
newCallback_FileServer_isFile(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_isFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_isFilePtr
newCallback_FileServer_isFile(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_isFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getSHA1 : public Callback_FileServer_getSHA1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_FileServer_getSHA1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getSHA1(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_getSHA1Ptr
newCallback_FileServer_getSHA1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getSHA1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getSHA1Ptr
newCallback_FileServer_getSHA1(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getSHA1<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getSHA1 : public Callback_FileServer_getSHA1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_FileServer_getSHA1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getSHA1(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_getSHA1Ptr
newCallback_FileServer_getSHA1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getSHA1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getSHA1Ptr
newCallback_FileServer_getSHA1(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getSHA1<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_readBlock : public Callback_FileServer_readBlock_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ByteSeq&);

    CallbackNC_FileServer_readBlock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_readBlock(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileServer_readBlockPtr
newCallback_FileServer_readBlock(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_readBlock<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_readBlockPtr
newCallback_FileServer_readBlock(T* instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_readBlock<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_readBlock : public Callback_FileServer_readBlock_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ByteSeq&, const CT&);

    Callback_FileServer_readBlock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::FileServerPrx __proxy = ::omero::grid::monitors::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_readBlock(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileServer_readBlockPtr
newCallback_FileServer_readBlock(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_readBlock<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_readBlockPtr
newCallback_FileServer_readBlock(T* instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_readBlock<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorServer_createMonitor : public Callback_MonitorServer_createMonitor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_MonitorServer_createMonitor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_createMonitor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MonitorServer_createMonitorPtr
newCallback_MonitorServer_createMonitor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_createMonitor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorServer_createMonitorPtr
newCallback_MonitorServer_createMonitor(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_createMonitor<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorServer_createMonitor : public Callback_MonitorServer_createMonitor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_MonitorServer_createMonitor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_createMonitor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MonitorServer_createMonitorPtr
newCallback_MonitorServer_createMonitor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_createMonitor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorServer_createMonitorPtr
newCallback_MonitorServer_createMonitor(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_createMonitor<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorServer_startMonitor : public Callback_MonitorServer_startMonitor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MonitorServer_startMonitor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_startMonitor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_MonitorServer_startMonitorPtr
newCallback_MonitorServer_startMonitor(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_startMonitor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorServer_startMonitorPtr
newCallback_MonitorServer_startMonitor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_startMonitor<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MonitorServer_startMonitorPtr
newCallback_MonitorServer_startMonitor(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_startMonitor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorServer_startMonitorPtr
newCallback_MonitorServer_startMonitor(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_startMonitor<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorServer_startMonitor : public Callback_MonitorServer_startMonitor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MonitorServer_startMonitor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_startMonitor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MonitorServer_startMonitorPtr
newCallback_MonitorServer_startMonitor(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_startMonitor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorServer_startMonitorPtr
newCallback_MonitorServer_startMonitor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_startMonitor<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorServer_startMonitorPtr
newCallback_MonitorServer_startMonitor(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_startMonitor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorServer_startMonitorPtr
newCallback_MonitorServer_startMonitor(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_startMonitor<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorServer_stopMonitor : public Callback_MonitorServer_stopMonitor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MonitorServer_stopMonitor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stopMonitor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_MonitorServer_stopMonitorPtr
newCallback_MonitorServer_stopMonitor(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_stopMonitor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorServer_stopMonitorPtr
newCallback_MonitorServer_stopMonitor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_stopMonitor<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MonitorServer_stopMonitorPtr
newCallback_MonitorServer_stopMonitor(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_stopMonitor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorServer_stopMonitorPtr
newCallback_MonitorServer_stopMonitor(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_stopMonitor<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorServer_stopMonitor : public Callback_MonitorServer_stopMonitor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MonitorServer_stopMonitor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stopMonitor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MonitorServer_stopMonitorPtr
newCallback_MonitorServer_stopMonitor(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_stopMonitor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorServer_stopMonitorPtr
newCallback_MonitorServer_stopMonitor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_stopMonitor<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorServer_stopMonitorPtr
newCallback_MonitorServer_stopMonitor(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_stopMonitor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorServer_stopMonitorPtr
newCallback_MonitorServer_stopMonitor(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_stopMonitor<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorServer_destroyMonitor : public Callback_MonitorServer_destroyMonitor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MonitorServer_destroyMonitor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_destroyMonitor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_MonitorServer_destroyMonitorPtr
newCallback_MonitorServer_destroyMonitor(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_destroyMonitor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorServer_destroyMonitorPtr
newCallback_MonitorServer_destroyMonitor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_destroyMonitor<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MonitorServer_destroyMonitorPtr
newCallback_MonitorServer_destroyMonitor(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_destroyMonitor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorServer_destroyMonitorPtr
newCallback_MonitorServer_destroyMonitor(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_destroyMonitor<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorServer_destroyMonitor : public Callback_MonitorServer_destroyMonitor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MonitorServer_destroyMonitor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_destroyMonitor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MonitorServer_destroyMonitorPtr
newCallback_MonitorServer_destroyMonitor(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_destroyMonitor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorServer_destroyMonitorPtr
newCallback_MonitorServer_destroyMonitor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_destroyMonitor<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorServer_destroyMonitorPtr
newCallback_MonitorServer_destroyMonitor(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_destroyMonitor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorServer_destroyMonitorPtr
newCallback_MonitorServer_destroyMonitor(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_destroyMonitor<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorServer_getMonitorState : public Callback_MonitorServer_getMonitorState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::omero::grid::monitors::MonitorState);

    CallbackNC_MonitorServer_getMonitorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::monitors::MonitorState __ret;
        try
        {
            __ret = __proxy->end_getMonitorState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MonitorServer_getMonitorStatePtr
newCallback_MonitorServer_getMonitorState(const IceUtil::Handle<T>& instance, void (T::*cb)(::omero::grid::monitors::MonitorState), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_getMonitorState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorServer_getMonitorStatePtr
newCallback_MonitorServer_getMonitorState(T* instance, void (T::*cb)(::omero::grid::monitors::MonitorState), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorServer_getMonitorState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorServer_getMonitorState : public Callback_MonitorServer_getMonitorState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::omero::grid::monitors::MonitorState, const CT&);

    Callback_MonitorServer_getMonitorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::grid::monitors::MonitorServerPrx __proxy = ::omero::grid::monitors::MonitorServerPrx::uncheckedCast(__result->getProxy());
        ::omero::grid::monitors::MonitorState __ret;
        try
        {
            __ret = __proxy->end_getMonitorState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MonitorServer_getMonitorStatePtr
newCallback_MonitorServer_getMonitorState(const IceUtil::Handle<T>& instance, void (T::*cb)(::omero::grid::monitors::MonitorState, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_getMonitorState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorServer_getMonitorStatePtr
newCallback_MonitorServer_getMonitorState(T* instance, void (T::*cb)(::omero::grid::monitors::MonitorState, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorServer_getMonitorState<T, CT>(instance, cb, excb, sentcb);
}

}

}

}

#endif
